{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/cactus/source/css/rtl.styl","path":"css/rtl.styl","modified":1,"renderable":1},{"_id":"themes/cactus/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/cactus/source/images/apple-touch-icon.png","path":"images/apple-touch-icon.png","modified":1,"renderable":1},{"_id":"themes/cactus/source/images/favicon-192x192.png","path":"images/favicon-192x192.png","modified":1,"renderable":1},{"_id":"themes/cactus/source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":1},{"_id":"themes/cactus/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/cactus/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff","path":"lib/vazir-font/Vazir-Black.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff2","path":"lib/vazir-font/Vazir-Black.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff","path":"lib/vazir-font/Vazir-Bold.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff2","path":"lib/vazir-font/Vazir-Bold.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff","path":"lib/vazir-font/Vazir-Light.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff2","path":"lib/vazir-font/Vazir-Light.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff","path":"lib/vazir-font/Vazir-Medium.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff2","path":"lib/vazir-font/Vazir-Medium.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff2","path":"lib/vazir-font/Vazir-Thin.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff","path":"lib/vazir-font/Vazir-Thin.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff2","path":"lib/vazir-font/Vazir.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff","path":"lib/vazir-font/Vazir.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/font-face.css","path":"lib/vazir-font/font-face.css","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/jquery/jquery.min.js","path":"lib/jquery/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.eot","path":"lib/vazir-font/Vazir-Black.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.ttf","path":"lib/vazir-font/Vazir-Black.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.ttf","path":"lib/vazir-font/Vazir-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.eot","path":"lib/vazir-font/Vazir-Bold.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.eot","path":"lib/vazir-font/Vazir-Light.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.ttf","path":"lib/vazir-font/Vazir-Light.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.ttf","path":"lib/vazir-font/Vazir-Medium.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.eot","path":"lib/vazir-font/Vazir-Medium.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.eot","path":"lib/vazir-font/Vazir-Thin.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/images/logo.png","path":"images/logo.png","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.ttf","path":"lib/vazir-font/Vazir-Thin.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.eot","path":"lib/vazir-font/Vazir.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.ttf","path":"lib/vazir-font/Vazir.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.eot","path":"lib/font-awesome/webfonts/fa-regular-400.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff","path":"lib/font-awesome/webfonts/fa-regular-400.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","path":"lib/font-awesome/webfonts/fa-regular-400.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","path":"lib/justified-gallery/css/justifiedGallery.min.css","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","path":"lib/justified-gallery/js/jquery.justifiedGallery.min.js","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff","path":"lib/font-awesome/webfonts/fa-brands-400.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","path":"lib/font-awesome/webfonts/fa-brands-400.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff","path":"lib/font-awesome/webfonts/fa-solid-900.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.eot","path":"lib/font-awesome/webfonts/fa-brands-400.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.svg","path":"lib/font-awesome/webfonts/fa-regular-400.svg","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.eot","path":"lib/font-awesome/webfonts/fa-solid-900.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","path":"lib/font-awesome/webfonts/fa-solid-900.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGM-BoldItalic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","path":"lib/meslo-LG/MesloLGM-Italic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","path":"lib/meslo-LG/MesloLGS-Italic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGS-BoldItalic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","path":"lib/meslo-LG/MesloLGS-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","path":"lib/meslo-LG/MesloLGL-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","path":"lib/meslo-LG/MesloLGL-Italic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","path":"lib/meslo-LG/MesloLGM-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","path":"lib/meslo-LG/MesloLGS-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGL-BoldItalic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","path":"lib/meslo-LG/MesloLGL-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","path":"lib/meslo-LG/MesloLGM-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.svg","path":"lib/font-awesome/webfonts/fa-solid-900.svg","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.svg","path":"lib/font-awesome/webfonts/fa-brands-400.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/cactus/LICENSE","hash":"346ece39a983b0e7858c11f785cd846cef9eb875","modified":1666666662647},{"_id":"themes/cactus/.stylintrc","hash":"eb5f48e83657928cb0cbee031373b2cd36ca0083","modified":1666666662647},{"_id":"themes/cactus/README.md","hash":"6b0c6ea10c3a68c3788f2c81065bad37699dc6a7","modified":1666666662647},{"_id":"themes/cactus/_config.yml","hash":"a60f587da93fb056df4a9c9d1d8b93232e1a7f90","modified":1666666662647},{"_id":"themes/cactus/gulpfile.js","hash":"2bae290993507026a509665ee5a5326b616f8d68","modified":1666666662648},{"_id":"themes/cactus/package.json","hash":"5bbdbc429e9d46acf97baf7ac5654edde0781064","modified":1666666662687},{"_id":"themes/cactus/languages/ca.yml","hash":"b79dd2c21dc6697c635e92db1f661a4b8d5d2305","modified":1666666662656},{"_id":"themes/cactus/languages/default.yml","hash":"b8c7ad13210c7d19d0893273617440e16fcba3c6","modified":1666666662657},{"_id":"themes/cactus/languages/en.yml","hash":"b8c7ad13210c7d19d0893273617440e16fcba3c6","modified":1666666662657},{"_id":"themes/cactus/languages/fa.yml","hash":"63f32e50953af1c4bd0308a4fca5862b5287c2cb","modified":1666666662663},{"_id":"themes/cactus/languages/es.yml","hash":"2b1fc8b0d636123e9ee39017fa20053bd1913a5a","modified":1666666662663},{"_id":"themes/cactus/languages/fr.yml","hash":"4fea266d3c522903f3eee4fffee6e66c44775005","modified":1666666662663},{"_id":"themes/cactus/languages/it.yml","hash":"62800bcae1f2d2454f87f4bcf4d7593848424f61","modified":1666666662663},{"_id":"themes/cactus/languages/nl.yml","hash":"ac0573352ad2c737a7686bcca498b985e7bd6447","modified":1666666662663},{"_id":"themes/cactus/languages/pl.yml","hash":"8a2d6dc874d86c38d42c2c861c39590647b5d536","modified":1666666662663},{"_id":"themes/cactus/languages/pt-br.yml","hash":"4859aba788a050c2d5d0b997693b0c8c24b349f7","modified":1666666662664},{"_id":"themes/cactus/languages/ru.yml","hash":"81b57fcd1977ef534f4bf303dbc1b4710cc7f057","modified":1666666662664},{"_id":"themes/cactus/languages/tr.yml","hash":"2702914007e6bade9d6861078c0e179ac05bf48c","modified":1666666662664},{"_id":"themes/cactus/languages/zh-CN.yml","hash":"142004800bd580f8ee2f0eba7345c1725a5e2e5e","modified":1666666662664},{"_id":"themes/cactus/layout/archive.ejs","hash":"b5e70bd2780d044b94e22ce8af0afb114c2a6eae","modified":1666666662686},{"_id":"themes/cactus/layout/index.ejs","hash":"2bb56a08ca4dcd9e37170be04ec791fffce8727a","modified":1666666662687},{"_id":"themes/cactus/layout/layout.ejs","hash":"ad0f48fca26b3670c9fbcb3e61bfbaa62dc33ab2","modified":1666666662687},{"_id":"themes/cactus/scripts/merge-configs.js","hash":"2048c3415d96b17b9d84aa44bc0c25f1210525f8","modified":1666666662687},{"_id":"themes/cactus/scripts/meta.js","hash":"fa6055a39851c9953d033e70c1614547b94dce60","modified":1666666662687},{"_id":"themes/cactus/scripts/page_title.js","hash":"fa662dbdb82779af1b95e35ed7ccdf4866a53dee","modified":1666666662687},{"_id":"themes/cactus/scripts/thumbnail.js","hash":"df8829fd8c3119650037eba5ec11bdce06acff9d","modified":1666666662687},{"_id":"themes/cactus/layout/page.ejs","hash":"c5465d5315a7544aa466b01fd8cfb62917a8bb1d","modified":1666666662687},{"_id":"themes/cactus/layout/post.ejs","hash":"a7d164ce888a60cd3eddd9c04bc6762428fa66bb","modified":1666666662687},{"_id":"source/_data/links.yml","hash":"f7f320fa572d705da325d4ceef05c788738767ce","modified":1666666662630},{"_id":"source/_drafts/learn-more-study-less.md","hash":"287afd7a02ed42b9d788ef5022fef30eaf888bb2","modified":1666666662630},{"_id":"source/_posts/arts-first-week.md","hash":"47a87f37b549e1207a561cf6b13fe431e758e6fc","modified":1666666662630},{"_id":"source/_posts/arts-second-week.md","hash":"14ccafd1b3f83917e9d2201c26ce711f78e5dfc6","modified":1666666662630},{"_id":"source/_posts/breakpoint-debug-autolayout.md","hash":"5fb640e1a6d8bbee81cfc9d9075d9c80da8910c3","modified":1666666662645},{"_id":"source/_posts/bezier-zhibei.md","hash":"40540e2653a5e2d8f613ebeb02dc5dc963760f94","modified":1666666662630},{"_id":"source/_posts/fight-with-cocoapods.md","hash":"3ef7849ca8bd2d2b7b85cabee0b65cab7ace64a7","modified":1666666662645},{"_id":"source/_posts/find-a-wierd-bug.md","hash":"7555b4660274c35be34cbf01079c37778f9ff5f7","modified":1666666662645},{"_id":"source/_posts/note-to-myself-on-software-engineering.md","hash":"90c2aa04b47ea4d748a48c0ad781ad87739a8636","modified":1666666662645},{"_id":"source/_posts/python-backend-memo.md","hash":"bba36e26ab9bb2b69e847537bc79e2a274c97a76","modified":1666666662645},{"_id":"source/_posts/sublimetext-remind.md","hash":"60815b71935c5bef5cfd673131f4e3577f8d0aea","modified":1666666662645},{"_id":"source/_posts/yong-swift-xieyi-tuozhan-fuyong.md","hash":"3f5ad42c8ea3777166036985edf996417a8f954a","modified":1666666662646},{"_id":"source/_posts/the-right-way-to-swizzling.md","hash":"976664a819fff755334a79b826b8057d75a2dd76","modified":1666666662646},{"_id":"source/about/index.md","hash":"54c3e4db412586a276f25c144cf699a33e26dc48","modified":1666666662646},{"_id":"source/buddy/index.md","hash":"c00f9f12144e3f220905977426589cb3682ab233","modified":1666666662646},{"_id":"source/links/index.md","hash":"19864cab259d7152d9e86566b49ef3e60af841ba","modified":1666666662646},{"_id":"source/nag/index.md","hash":"0d4f62ffb3d8901093afd0644b0b5386203953d3","modified":1666666662646},{"_id":"themes/cactus/layout/_partial/comments.ejs","hash":"4cf8d0059e5f8bc8ae1dd1a426293583fd398052","modified":1666666662664},{"_id":"themes/cactus/layout/_partial/footer.ejs","hash":"c3a80e347cb11022baf5e65fb4d0209b8d205693","modified":1666666662664},{"_id":"themes/cactus/layout/_partial/head.ejs","hash":"753dcb513c6f21f6f46e673942c7261cf50da886","modified":1666666662664},{"_id":"themes/cactus/layout/_partial/header.ejs","hash":"9b2b7d6e9ab514107adf408c7ec8530fd612b3d5","modified":1666666662664},{"_id":"themes/cactus/layout/_partial/pagination.ejs","hash":"23bf862b3b8a3cd831850504d9b5a24d21b005e7","modified":1666666662685},{"_id":"themes/cactus/layout/_partial/scripts.ejs","hash":"78e3e290ab8bb6450a04b2a9c7c5b7b3da74abb8","modified":1666666662686},{"_id":"themes/cactus/layout/_partial/search.ejs","hash":"8b4bf9cf5db0ce762a31fc3baae0f2fc004bece4","modified":1666666662686},{"_id":"themes/cactus/layout/_partial/styles.ejs","hash":"be1b54388eb02176dd4722285dda19e3dce2e62e","modified":1666666662686},{"_id":"themes/cactus/source/css/_extend.styl","hash":"2ff73bd3dbdb58fa69cbadb2a1c0ed966812ce88","modified":1666666662688},{"_id":"themes/cactus/source/css/_fonts.styl","hash":"354809b5a64e8a47a66c66fd1a28ac597c1460a6","modified":1666666662689},{"_id":"themes/cactus/source/css/_mixins.styl","hash":"1a9e309523df9685e8d088dcff0a809c58e2c392","modified":1666666662697},{"_id":"themes/cactus/source/css/_util.styl","hash":"2bfeb2e2605dd5235693b00c71a212646d2e0410","modified":1666666662698},{"_id":"themes/cactus/source/css/rtl.styl","hash":"98355abe9ef3a398a5b4cb40d3d33bf86ac8d1d4","modified":1666666662698},{"_id":"themes/cactus/source/css/style.styl","hash":"935843090dc40797a1e85181253ffe169b883131","modified":1666666662698},{"_id":"themes/cactus/source/css/_variables.styl","hash":"02079fb71b7d1c01d15fa512a1948ad4cbb416b5","modified":1666666662698},{"_id":"themes/cactus/source/images/apple-touch-icon.png","hash":"57e2def34682655f41a0be2d083f16765ba7858b","modified":1666666662699},{"_id":"themes/cactus/source/images/favicon-192x192.png","hash":"96e6fcbbb13a5914a6131391e210eb7dfd13d692","modified":1666666662699},{"_id":"themes/cactus/source/images/favicon.ico","hash":"189f9842bcb79a6f8f9e8445bc8bbd773443826b","modified":1666666662699},{"_id":"themes/cactus/source/js/main.js","hash":"584c5a69ac81a483a1c4377a2e2cf326c2795e7b","modified":1666666662701},{"_id":"themes/cactus/source/js/search.js","hash":"a74d0c601f820160825a2e4ad13618074d714933","modified":1666666662701},{"_id":"source/_posts/bezier-zhibei/56030-48977fcfcd8cd57e.png","hash":"e2f8cf83a8687840caaf010eca9c749e67be6364","modified":1666666662636},{"_id":"source/_posts/bezier-zhibei/56030-4ad6b01ea2c03caa.png","hash":"3cf6b6dd6dfa8d20ebc1cad3a049ce09e8e8c675","modified":1666666662637},{"_id":"source/_posts/bezier-zhibei/56030-5d3e252f34e657c9.jpg","hash":"f791230179a6a69492b1b6016118ca1b241b4c07","modified":1666666662637},{"_id":"source/_posts/bezier-zhibei/56030-5175f6c03d4990b2.jpg","hash":"08741ebe5b2585b74a240e1731f1ee822d039c3d","modified":1666666662637},{"_id":"source/_posts/bezier-zhibei/56030-8c56a1e98f432000.jpg","hash":"a155d0a5fef32cfc5e0599e2aa797658da04466b","modified":1666666662639},{"_id":"source/_posts/bezier-zhibei/56030-88174468ef9870e3.png","hash":"1bacc2e96a0a7aae25a3192ab60bab19ff9d8100","modified":1666666662639},{"_id":"source/_posts/bezier-zhibei/56030-6700ecb2811dcac4.jpg","hash":"c477901c6bc923a64836f51b3ac64544c0239b22","modified":1666666662638},{"_id":"source/_posts/bezier-zhibei/56030-9e2c8e268d676528.png","hash":"4749581274209e95ca70d89fa6ce53c9a5fcaa2e","modified":1666666662642},{"_id":"source/_posts/bezier-zhibei/56030-c2894a2979862cd1.png","hash":"8d3aa81e3efc18344d4ec6cab5e1f267477a795b","modified":1666666662644},{"_id":"source/_posts/bezier-zhibei/56030-c2aa8094cd0a6004.png","hash":"744694a312cf2404954537cc8eda7e421c31f147","modified":1666666662644},{"_id":"source/_posts/bezier-zhibei/56030-de6fcb447ec49b87.png","hash":"74edb84bacf708c7a0baf34123d2e8c0d4e4a279","modified":1666666662644},{"_id":"source/_posts/bezier-zhibei/56030-86bc9a9afdb15e48.png","hash":"d9d1a79d065c02e0a17a763270eaff9473dd6abd","modified":1666666662639},{"_id":"source/_posts/bezier-zhibei/56030-b65e3dd8196f4da5.gif","hash":"c623deb512a9b05b609fddf57330b0da13d80838","modified":1666666662643},{"_id":"themes/cactus/layout/_partial/post/actions_mobile.ejs","hash":"79b234ff3c264e66b2e71c819228e62bf92b48e4","modified":1666666662685},{"_id":"themes/cactus/layout/_partial/post/actions_desktop.ejs","hash":"38aadd1ed890303dde582b722486138afee09b0a","modified":1666666662685},{"_id":"themes/cactus/layout/_partial/post/category.ejs","hash":"b5bfa049f17868fb09d9d2a7e1d5279fa0381d37","modified":1666666662686},{"_id":"themes/cactus/layout/_partial/post/date.ejs","hash":"12a4a7ba6334e3e5c03d9a9601d7779a27c2e082","modified":1666666662686},{"_id":"themes/cactus/layout/_partial/post/gallery.ejs","hash":"9aecd8908e8a684f33dc20c02497c0f1774137c7","modified":1666666662686},{"_id":"themes/cactus/layout/_partial/post/share.ejs","hash":"847a400e79b775246ca9067e40c3f104d571413d","modified":1666666662686},{"_id":"themes/cactus/layout/_partial/post/tag.ejs","hash":"e08fae30da060f49c087f6c121868b08eb55c795","modified":1666666662686},{"_id":"themes/cactus/layout/_partial/post/title.ejs","hash":"a060f1c6e3718494a6b1d0e1981ea0bf4e549828","modified":1666666662686},{"_id":"themes/cactus/source/css/_colors/classic.styl","hash":"0f0ec41a4165814ce69688425d5ac4d701b7cc70","modified":1666666662688},{"_id":"themes/cactus/source/css/_colors/dark.styl","hash":"9c9655b42b85f754b8a573a1d4634c23c680e1bf","modified":1666666662688},{"_id":"themes/cactus/source/css/_colors/light.styl","hash":"d09f781cb02394850737b3a9efc6693307d5bf09","modified":1666666662688},{"_id":"themes/cactus/source/css/_colors/white.styl","hash":"2b25ad24573bded8b42f9d80112eab9fadbed1a5","modified":1666666662688},{"_id":"themes/cactus/source/css/_highlight/agate.styl","hash":"53027913ed8d4f75ac3e49e76aad824f0df62da3","modified":1666666662689},{"_id":"themes/cactus/source/css/_highlight/androidstudio.styl","hash":"2af0861725f97f0ee2ded67c3d2d4548c62b2d16","modified":1666666662689},{"_id":"themes/cactus/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1666666662689},{"_id":"themes/cactus/source/css/_highlight/arta.styl","hash":"b3e81e3e694ceb8deed178adb8b91013c5120e30","modified":1666666662689},{"_id":"themes/cactus/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1666666662689},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-dark.styl","hash":"ce63dd8548688d88254405eedfa75b1d7c82449e","modified":1666666662690},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1666666662690},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-dark.styl","hash":"c196ff0ee064af0e507823694ae39020addfc280","modified":1666666662690},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1666666662690},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-dark.styl","hash":"0bb16a4eff93688f40787abc2f9e56e7d5cc93e7","modified":1666666662690},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1666666662690},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-dark.styl","hash":"effbc5d75fa87203c847039869c22031b40d5b7d","modified":1666666662690},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1666666662690},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-dark.styl","hash":"9a2e9a1d0a01bbdf158560c3ed1c134e098b2c68","modified":1666666662690},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1666666662691},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-dark.styl","hash":"10ee3882fca7b97a37bd309d2d35fce9868647bb","modified":1666666662691},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1666666662691},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-dark.styl","hash":"84c80e6f67f62fce958d25817c277d2360272617","modified":1666666662691},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1666666662691},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-dark.styl","hash":"e32c1c70def8060fce5e790979a126da650ac642","modified":1666666662691},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1666666662691},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-dark.styl","hash":"2edf385215bbe1985b1a10106525d362667d28c2","modified":1666666662691},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1666666662691},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1666666662692},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"538a14321193cd8abf2ddc484306631e54149ffb","modified":1666666662691},{"_id":"themes/cactus/source/css/_highlight/brown-paper.styl","hash":"c2326ba20a5020a66ca7895258d18833327d4334","modified":1666666662692},{"_id":"themes/cactus/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1666666662692},{"_id":"themes/cactus/source/css/_highlight/codepen-embed.styl","hash":"8b7b34484f76a6c2c3b1a9e49abb9b382f439ae8","modified":1666666662692},{"_id":"themes/cactus/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1666666662692},{"_id":"themes/cactus/source/css/_highlight/dark.styl","hash":"f5e6e75958de59e87fc6be3a1668e870e20bc836","modified":1666666662692},{"_id":"themes/cactus/source/css/_highlight/darkula.styl","hash":"9717efa9194837ba3fb4d762997d33075dcf8bfa","modified":1666666662692},{"_id":"themes/cactus/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1666666662692},{"_id":"themes/cactus/source/css/_highlight/far.styl","hash":"aaac3028f5e33123cd123a583cddc9290c45ec8e","modified":1666666662692},{"_id":"themes/cactus/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1666666662693},{"_id":"themes/cactus/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1666666662693},{"_id":"themes/cactus/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1666666662693},{"_id":"themes/cactus/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1666666662693},{"_id":"themes/cactus/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1666666662693},{"_id":"themes/cactus/source/css/_highlight/highlightjs.styl","hash":"0e198b7a59191c7a39b641a4ddd22c948edb9358","modified":1666666662693},{"_id":"themes/cactus/source/css/_highlight/hopscotch.styl","hash":"1378a6bc67a32c0cbff72ab771268b53f9aa586d","modified":1666666662693},{"_id":"themes/cactus/source/css/_highlight/hybrid.styl","hash":"b8eb5c69d12f2ee5ebc50265ae271699d7f1a8d3","modified":1666666662693},{"_id":"themes/cactus/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1666666662693},{"_id":"themes/cactus/source/css/_highlight/index.styl","hash":"002d5596f6379cc87dbd43d9145bc764aa666be1","modified":1666666662694},{"_id":"themes/cactus/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1666666662694},{"_id":"themes/cactus/source/css/_highlight/ir-black.styl","hash":"53e5d74326a4527b92272bbd6946d4fec92720e8","modified":1666666662694},{"_id":"themes/cactus/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1666666662694},{"_id":"themes/cactus/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1666666662694},{"_id":"themes/cactus/source/css/_highlight/kimbie.styl","hash":"51b889ca7c6fe178cfbbe28d875a6ea427184441","modified":1666666662694},{"_id":"themes/cactus/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1666666662694},{"_id":"themes/cactus/source/css/_highlight/monokai-sublime.styl","hash":"c385b11345894be7e6ce3c5f08663e199933b8e4","modified":1666666662694},{"_id":"themes/cactus/source/css/_highlight/obsidian.styl","hash":"199e28326be8590883f0813ebbd54fcfaa4750fd","modified":1666666662695},{"_id":"themes/cactus/source/css/_highlight/monokai.styl","hash":"f87be027848ea6bee623a08ad1e17b2f5b7937ee","modified":1666666662695},{"_id":"themes/cactus/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1666666662695},{"_id":"themes/cactus/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1666666662695},{"_id":"themes/cactus/source/css/_highlight/paraiso.styl","hash":"75f181eece6b71d033ea0c8d6cf00ae7efb9e29b","modified":1666666662695},{"_id":"themes/cactus/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1666666662695},{"_id":"themes/cactus/source/css/_highlight/pojoaque.styl","hash":"4e7b6b046b8575ac749f6aec4e953a62ada27a36","modified":1666666662695},{"_id":"themes/cactus/source/css/_highlight/railscasts.styl","hash":"b6674db9210e0c4444e4835fff2d1361f3ebd64c","modified":1666666662695},{"_id":"themes/cactus/source/css/_highlight/rainbow.styl","hash":"c0cf97aae3e10fdcd10414547a711c9effbc39b8","modified":1666666662696},{"_id":"themes/cactus/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1666666662696},{"_id":"themes/cactus/source/css/_highlight/school-book.styl","hash":"d43560fe519a931ce6da7d57416d7aa148441b83","modified":1666666662696},{"_id":"themes/cactus/source/css/_highlight/solarized-dark.styl","hash":"90c9da5aa594383697e5b18892a7f95beb053f55","modified":1666666662696},{"_id":"themes/cactus/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1666666662696},{"_id":"themes/cactus/source/css/_highlight/sunburst.styl","hash":"af3eec0fd56151e55bbd49c31b151f36717611d8","modified":1666666662696},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-blue.styl","hash":"f24c17d0ab815dcfaab3438cb9fe2ab4839f5e0d","modified":1666666662696},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-bright.styl","hash":"7674fecb6d27350727dc0d2dc93bc018382ebbd0","modified":1666666662696},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-eighties.styl","hash":"28d751075ebabf7d0327a36f725076fe82fdf626","modified":1666666662696},{"_id":"themes/cactus/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1666666662696},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night.styl","hash":"16ba09b2db501e4e3e2e7d62595d9bf935bf27c4","modified":1666666662696},{"_id":"themes/cactus/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1666666662696},{"_id":"themes/cactus/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1666666662697},{"_id":"themes/cactus/source/css/_highlight/zenburn.styl","hash":"68ff9332ccc03f9389b15b713415cde016f8088f","modified":1666666662697},{"_id":"themes/cactus/source/css/_partial/archive.styl","hash":"ef8fc52337c4c7b010cad7c427cb78009b30f9d8","modified":1666666662697},{"_id":"themes/cactus/source/css/_partial/article.styl","hash":"2c0569b6ba624160701e69688ca02ecdf24c2ac6","modified":1666666662697},{"_id":"themes/cactus/source/css/_partial/categories.styl","hash":"a43f00e61b3507f130b8a3f8108a4eeca147c2a0","modified":1666666662697},{"_id":"themes/cactus/source/css/_partial/comments.styl","hash":"1e90f1fb9d4c155df518cacb5a537e9de9c042c1","modified":1666666662697},{"_id":"themes/cactus/source/css/_partial/footer.styl","hash":"d9b13e402808175dc90761cc4fdfe3d4808034f8","modified":1666666662697},{"_id":"themes/cactus/source/css/_partial/header.styl","hash":"662667942cc9a2caf55caa84a0fc73617d0c3aa4","modified":1666666662697},{"_id":"themes/cactus/source/css/_partial/index.styl","hash":"59c99f4ea3a73bf47ce030df166c5e33d5de31fb","modified":1666666662697},{"_id":"themes/cactus/source/css/_partial/pagination.styl","hash":"950bf517bbe7adb9a9aa4eb5ddec74ffc7598787","modified":1666666662697},{"_id":"themes/cactus/source/css/_partial/search.styl","hash":"159be002780c62a77f46947cf854a7342fba24f4","modified":1666666662698},{"_id":"themes/cactus/source/css/_partial/tags.styl","hash":"d571d5c7c960300d29c5f0ec3fe1140322ecd6b3","modified":1666666662698},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff","hash":"37443d0040f0d7af381c955e4c15919a15d0349e","modified":1666666662748},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff2","hash":"0a257c8b60e0f20802c1dc8daeed2d3cb0d44f17","modified":1666666662748},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff","hash":"df15fd1e74b6f4a50bea57e2b44d9627f38495b5","modified":1666666662750},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff2","hash":"62447a951d48b21c4696ae72df4bc4adef636e26","modified":1666666662750},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff","hash":"32ae5c0d1d5943c8bb8e0f6ab07c3269c6f8b8a8","modified":1666666662752},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff2","hash":"ef07a250766fea840c1049e67c0405d9216ee0a8","modified":1666666662752},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff","hash":"f5653059b2a5929516e4aab02329a978600b9b67","modified":1666666662754},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff2","hash":"668400ae92700965f03f2371faaee0ab8c8347c3","modified":1666666662754},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff2","hash":"c3be79b553ec394db71268d604b1d29183b867dc","modified":1666666662755},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff","hash":"ad4d46a99a1daf6353c86c79ac3a2b030213859c","modified":1666666662755},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff2","hash":"30ce165216db078951a690a6ad665b9b78f5dd81","modified":1666666662757},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff","hash":"bbee70033f0f5882e9869e417b69c6a38f56f187","modified":1666666662757},{"_id":"themes/cactus/source/lib/vazir-font/font-face.css","hash":"8f2bf6b59ae1f2ed4c2fead6cea4b8314fcf62e5","modified":1666666662757},{"_id":"source/_posts/bezier-zhibei/56030-bb6b8c6a46f12135.gif","hash":"b0f55381880464de10250ad92b5cabd64a74bd14","modified":1666666662644},{"_id":"themes/cactus/source/lib/jquery/jquery.min.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1666666662713},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.eot","hash":"13d026ff857c853cbd0dc519b6e58669db309441","modified":1666666662747},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.ttf","hash":"594dc3344ad14903c247615427d1009709f0f5a4","modified":1666666662748},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.ttf","hash":"2e6c9df9f775373fb1988ae8529aa8f05313dae6","modified":1666666662750},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.eot","hash":"f76ec625e15522ff60d21f7a9a3b71c65bc27556","modified":1666666662749},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.eot","hash":"3edffd7bb61eee8cd46b57225f9f9e5264e3362b","modified":1666666662751},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.ttf","hash":"9f1e2934098a6a4a7c5584c8f3fa24a707070da3","modified":1666666662752},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.ttf","hash":"295f7e02c9b157e7ea63ad09613b00ceab85c5cd","modified":1666666662754},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.eot","hash":"1f5a73db7947ef22c8a2bb19d6449b80496c03c4","modified":1666666662753},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.eot","hash":"08e1503d1181188690fd9c81860d6c890c1465f6","modified":1666666662755},{"_id":"themes/cactus/source/images/logo.png","hash":"0e3029251dfda26adee2761f71377297e8c26871","modified":1666666662700},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.ttf","hash":"a6aa450ee6e0f85786474ca6b04827ef97e81af4","modified":1666666662755},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.eot","hash":"31a9219c25fe1991fb745ec8dbbcf45c6094a702","modified":1666666662756},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.ttf","hash":"f22b219824026e490a581ddb3b36b07997dff0e3","modified":1666666662756},{"_id":"source/_posts/bezier-zhibei/56030-f3e69b487f4e37c8.gif","hash":"6982d3fb2de095a23884a28e1a33451d52909299","modified":1666666662645},{"_id":"themes/cactus/source/css/_partial/post/actions_mobile.styl","hash":"0d2966c1d870392476864af8ee3ba312ba30cb82","modified":1666666662698},{"_id":"themes/cactus/source/css/_partial/post/actions_desktop.styl","hash":"4ef72ea70f7c840b2843bf7717aaafae3b6fc241","modified":1666666662698},{"_id":"themes/cactus/source/lib/font-awesome/css/all.min.css","hash":"cf1a3fd771900af34f2af22142beecfb47367548","modified":1666666662701},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"d902f8db3e021155f177f698a252fb98d6e61768","modified":1666666662706},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.eot","hash":"42ff503f20e97503cef8e5b2ec10ae07699d7c01","modified":1666666662706},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff","hash":"7b3f44b4d3028f3c87ddf0f4bd62511c9bf4a87e","modified":1666666662707},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"c140085833a38abec6b7df99d4ccac93eb266031","modified":1666666662707},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"9784edb76f8a2ed595ea4bf74d46cda4eff3b303","modified":1666666662707},{"_id":"themes/cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","hash":"92bb6e468a1db7fbd99ccb960e15e28572254263","modified":1666666662713},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"92da6e3c7121e21cdfde25ef08797a3937a683e1","modified":1666666662712},{"_id":"themes/cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"82ab395176c927ffbb2f7c95132ee0a06cd5d64a","modified":1666666662713},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff","hash":"f9d835a0f9248b1bb33d66968e87c4a50103ed8d","modified":1666666662706},{"_id":"source/_posts/bezier-zhibei/56030-2d2fb8989e10f177.gif","hash":"b86bdc64434146ca81876e7d1da72acfe1ae0aba","modified":1666666662631},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"19e302760e39e25a5f8d90d6cd0164ef6cd74f8c","modified":1666666662705},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff","hash":"80d33a73cbb60e206ef6f5c898988641576c7dda","modified":1666666662712},{"_id":"source/_posts/bezier-zhibei/56030-61f16deba712d8ac.gif","hash":"70bec6e2128e41ed394ac295541162dcbbc0b857","modified":1666666662638},{"_id":"source/_posts/bezier-zhibei/56030-8fb7008726c62987.gif","hash":"f8c7666e02f132ac48bcb3ab89996fc29fb58795","modified":1666666662640},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.eot","hash":"644ece8263d2f96b087eebf7f6d4e309e5898eb5","modified":1666666662702},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.svg","hash":"33e86c0ad6fb9c5c0c8c2af4cb2d790c6b14a8aa","modified":1666666662707},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.eot","hash":"10740942ec6b3f4985529d343402d0bf32f9f847","modified":1666666662708},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"c445864a9646948e0d7ff44930ad732ee61427d8","modified":1666666662712},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","hash":"b542b9591fbf33925d93f0695b6e123a9f0cfd43","modified":1666666662743},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","hash":"93ebc5098cf57a32b7b8d297681f31692c09bdfa","modified":1666666662743},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","hash":"9d757cc9f928fc83b2133283dd639c12b11d94ad","modified":1666666662746},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","hash":"926035f0156cccf1b0ca507347f39bf9c510f51e","modified":1666666662745},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","hash":"f9918fb93d6ab6850f5d38069a999c311af78816","modified":1666666662745},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","hash":"6c090d6bff3928fbf8a5f4104e58ed7f421aea7c","modified":1666666662741},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","hash":"9a23c6898b0943bd3d96c04df9a0f66e919451d8","modified":1666666662738},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","hash":"20ce1fc7ae1254558ca044ae48283faaa58897e5","modified":1666666662744},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","hash":"de559f8d70d5b1ab2810597bfd0b1b9506f3ef01","modified":1666666662747},{"_id":"source/_posts/bezier-zhibei/56030-9b189370ffbf5aec.gif","hash":"1e39c8942231ad7af1aa9efe809adb1224253ae5","modified":1666666662642},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","hash":"b7d24ab1e4fad720f31a2b0cca1904ce1740d846","modified":1666666662736},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","hash":"34f7db59f1d023294e69976aa20b7d52b86165a4","modified":1666666662717},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","hash":"58be4b7760e9a84daa81929d046f9a15c4fd1c1a","modified":1666666662741},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.svg","hash":"ed6c1ed8f24df909f40fe5e5c652d7ff9570c821","modified":1666666662711},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.svg","hash":"b0bb9e6ac7709206b9510f1718516d89aead5b21","modified":1666666662704},{"_id":"source/_posts/bezier-zhibei/56030-390b7b874ddd5d3d.gif","hash":"5b5d6900e23d4bdf797f3edd101b1e6a166983d9","modified":1666666662636},{"_id":"public/atom.xml","hash":"3fc4b160cfd6535bad2dd11d0f865785f084180a","modified":1666666726603},{"_id":"public/sitemap.xml","hash":"75a843117a6905f32be3ec2a0fd7ea1ff659cac4","modified":1666666726604},{"_id":"public/content.json","hash":"d4863a0597551c3e5eae4ae2ba2283688c9db356","modified":1666666726904},{"_id":"public/baidusitemap.xml","hash":"3b68d9ba5397c6a5a5337618e6261487feeca9a8","modified":1666666726905},{"_id":"public/about/index.html","hash":"957141cbe8c5487961b5201a8c28ad1b66f95e9e","modified":1666666726918},{"_id":"public/buddy/index.html","hash":"be4b32eee11bef53155d163e756c7105c5e028f5","modified":1666666726918},{"_id":"public/links/index.html","hash":"8fc4a90af925c25bb166e18397914c562a803b98","modified":1666666726918},{"_id":"public/nag/index.html","hash":"45ae19504b8ee41e30ea34bc29134aac11da4a90","modified":1666666726919},{"_id":"public/archives/index.html","hash":"3101b14189904fb09d4b96ec86692a21bbc71770","modified":1666666726919},{"_id":"public/archives/page/2/index.html","hash":"5bd49f8c7ae6f009c6a6e85fb9692d076b7b9ce7","modified":1666666726919},{"_id":"public/archives/2016/index.html","hash":"cfc8d71e2014916ceba6409967cadf69fcefbf79","modified":1666666726919},{"_id":"public/archives/2016/09/index.html","hash":"440cc2d1f3e86cdfa1e97f26a197b635ab1e85bc","modified":1666666726919},{"_id":"public/archives/2016/11/index.html","hash":"6f2d7b6af4be37dd42580de59bea012d68456140","modified":1666666726919},{"_id":"public/archives/2018/index.html","hash":"60946ed38127d648f74ab2b3d037870a72070511","modified":1666666726919},{"_id":"public/archives/2018/05/index.html","hash":"ff59fb3b06ffec898362e0734fad8c5b25d7ac23","modified":1666666726919},{"_id":"public/archives/2018/12/index.html","hash":"4752636b5379b6d75d4948e680d3e95642a3d743","modified":1666666726919},{"_id":"public/archives/2019/index.html","hash":"529825b1f25525fff4acf750bca2d1e2f1011987","modified":1666666726919},{"_id":"public/archives/2019/02/index.html","hash":"02a847ca4c9339f83fd6898beda8989b54340f21","modified":1666666726919},{"_id":"public/archives/2019/03/index.html","hash":"68685222c5ab77a09cbbd12c89c8221c09a90372","modified":1666666726919},{"_id":"public/archives/2019/07/index.html","hash":"2f8a12aa29a842414e38728217d04e3775b97dc9","modified":1666666726919},{"_id":"public/index.html","hash":"efcf9e6ab3d3398b5e947ec63afccfe5e9982679","modified":1666666726919},{"_id":"public/page/2/index.html","hash":"e137288774ac1b34ecaea44ff8736fd2ab077443","modified":1666666726919},{"_id":"public/tags/ARTS/index.html","hash":"792232271d6cb52ba15ca7ac67f0d35d2616c1c9","modified":1666666726919},{"_id":"public/tags/iOS/index.html","hash":"9e47506d4aca5601a96551f9aea1fdb20501f75a","modified":1666666726919},{"_id":"public/tags/Orientation/index.html","hash":"b37f39c6a4162f95977993db0037538fa2dbbbf2","modified":1666666726919},{"_id":"public/tags/动画/index.html","hash":"9dae8c2fa794ff3d30f5bf0e4531677207e063db","modified":1666666726919},{"_id":"public/tags/贝塞尔/index.html","hash":"101cc5c95f67f331e1518ff37e19314fff6dada0","modified":1666666726919},{"_id":"public/tags/心得/index.html","hash":"6c6039c424bbcb3b91e7db8d2f1399cf6814fec7","modified":1666666726919},{"_id":"public/tags/软件工程/index.html","hash":"6dcfb8843c1422008991aaf6e7e45f1bafd17ac3","modified":1666666726919},{"_id":"public/tags/Python/index.html","hash":"e78855a29daf804124ba81a93da5e20ad935deb6","modified":1666666726919},{"_id":"public/tags/Flask/index.html","hash":"f4f63b2ef4de2d355d9d64bac04a4e7afda05ade","modified":1666666726919},{"_id":"public/tags/OpenSSL/index.html","hash":"475d0464933151746eeedf2c17e98c92d872ed51","modified":1666666726919},{"_id":"public/tags/Linux/index.html","hash":"87df9a7b3a277ed4e4a5f36cd65b943be32f8a8e","modified":1666666726919},{"_id":"public/tags/sublime-text/index.html","hash":"5763de9fc3c0216a18543643355e718e75536fd1","modified":1666666726919},{"_id":"public/tags/Runtime/index.html","hash":"f27cea728730c2f702f9dc15dc9adb45161c8a83","modified":1666666726919},{"_id":"public/tags/Objective-C/index.html","hash":"6512f7f70d7acc49a11ee94d0d4d1541c74229b6","modified":1666666726919},{"_id":"public/tags/Method-Swizzling/index.html","hash":"5e2f2143081f3239bb75282d1617dd6ce8c82624","modified":1666666726919},{"_id":"public/tags/Swift/index.html","hash":"d97b749e6891b2cca2687c31999da2092bdd6689","modified":1666666726919},{"_id":"public/2019/07/30/find-a-wierd-bug/index.html","hash":"9258eb75290cda83589611bbb3af2eff30d09a8e","modified":1666666726919},{"_id":"public/2019/03/29/note-to-myself-on-software-engineering/index.html","hash":"69b63d0de47e2e593c63bc8d44869b8e04b12650","modified":1666666726919},{"_id":"public/2019/03/29/arts-second-week/index.html","hash":"bae7000faa4caa0f07f4d6dc7e92469859b61cee","modified":1666666726919},{"_id":"public/2019/03/25/arts-first-week/index.html","hash":"b9a036d1e5abd9b3ad26f6ff69b762872c4abb9e","modified":1666666726919},{"_id":"public/2019/03/01/the-right-way-to-swizzling/index.html","hash":"2abd9db9113f3cd1cb10966d361377fcd5093115","modified":1666666726919},{"_id":"public/2019/02/25/python-backend-memo/index.html","hash":"ababacd71ddc019f9762b2975208bd775f474c9e","modified":1666666726919},{"_id":"public/2016/11/03/bezier-zhibei/index.html","hash":"e92d3ed4f10f98e9208776e2445df5de4e7f4260","modified":1666666726920},{"_id":"public/2016/11/11/yong-swift-xieyi-tuozhan-fuyong/index.html","hash":"527a02ef703aee1619bda1640803dae1de48a173","modified":1666666726920},{"_id":"public/2016/09/16/breakpoint-debug-autolayout/index.html","hash":"3dd1be45631e33231806b9432519217723b4efb9","modified":1666666726920},{"_id":"public/2018/05/22/fight-with-cocoapods/index.html","hash":"69ffd95a78383458a83495694ec7d31cdbc52589","modified":1666666726920},{"_id":"public/2018/12/24/sublimetext-remind/index.html","hash":"47f1349e989d8c920ed8bc55b75a6e4af2c40fd8","modified":1666666726920},{"_id":"public/images/apple-touch-icon.png","hash":"57e2def34682655f41a0be2d083f16765ba7858b","modified":1666666726932},{"_id":"public/images/favicon-192x192.png","hash":"96e6fcbbb13a5914a6131391e210eb7dfd13d692","modified":1666666726932},{"_id":"public/images/favicon.ico","hash":"189f9842bcb79a6f8f9e8445bc8bbd773443826b","modified":1666666726932},{"_id":"public/lib/vazir-font/Vazir-Black.woff","hash":"37443d0040f0d7af381c955e4c15919a15d0349e","modified":1666666726932},{"_id":"public/lib/vazir-font/Vazir-Black.woff2","hash":"0a257c8b60e0f20802c1dc8daeed2d3cb0d44f17","modified":1666666726932},{"_id":"public/lib/vazir-font/Vazir-Bold.woff","hash":"df15fd1e74b6f4a50bea57e2b44d9627f38495b5","modified":1666666726932},{"_id":"public/lib/vazir-font/Vazir-Bold.woff2","hash":"62447a951d48b21c4696ae72df4bc4adef636e26","modified":1666666726932},{"_id":"public/lib/vazir-font/Vazir-Light.woff","hash":"32ae5c0d1d5943c8bb8e0f6ab07c3269c6f8b8a8","modified":1666666726932},{"_id":"public/lib/vazir-font/Vazir-Light.woff2","hash":"ef07a250766fea840c1049e67c0405d9216ee0a8","modified":1666666726932},{"_id":"public/lib/vazir-font/Vazir-Medium.woff","hash":"f5653059b2a5929516e4aab02329a978600b9b67","modified":1666666726932},{"_id":"public/lib/vazir-font/Vazir-Medium.woff2","hash":"668400ae92700965f03f2371faaee0ab8c8347c3","modified":1666666726932},{"_id":"public/lib/vazir-font/Vazir-Thin.woff2","hash":"c3be79b553ec394db71268d604b1d29183b867dc","modified":1666666726932},{"_id":"public/lib/vazir-font/Vazir-Thin.woff","hash":"ad4d46a99a1daf6353c86c79ac3a2b030213859c","modified":1666666726932},{"_id":"public/lib/vazir-font/Vazir.woff2","hash":"30ce165216db078951a690a6ad665b9b78f5dd81","modified":1666666726932},{"_id":"public/lib/vazir-font/Vazir.woff","hash":"bbee70033f0f5882e9869e417b69c6a38f56f187","modified":1666666726933},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.eot","hash":"42ff503f20e97503cef8e5b2ec10ae07699d7c01","modified":1666666726933},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"d902f8db3e021155f177f698a252fb98d6e61768","modified":1666666726933},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff","hash":"7b3f44b4d3028f3c87ddf0f4bd62511c9bf4a87e","modified":1666666726933},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"9784edb76f8a2ed595ea4bf74d46cda4eff3b303","modified":1666666726933},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"c140085833a38abec6b7df99d4ccac93eb266031","modified":1666666726933},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"92da6e3c7121e21cdfde25ef08797a3937a683e1","modified":1666666726933},{"_id":"public/2016/11/03/bezier-zhibei/56030-5175f6c03d4990b2.jpg","hash":"08741ebe5b2585b74a240e1731f1ee822d039c3d","modified":1666666726933},{"_id":"public/2016/11/03/bezier-zhibei/56030-5d3e252f34e657c9.jpg","hash":"f791230179a6a69492b1b6016118ca1b241b4c07","modified":1666666726933},{"_id":"public/2016/11/03/bezier-zhibei/56030-4ad6b01ea2c03caa.png","hash":"3cf6b6dd6dfa8d20ebc1cad3a049ce09e8e8c675","modified":1666666726933},{"_id":"public/2016/11/03/bezier-zhibei/56030-48977fcfcd8cd57e.png","hash":"e2f8cf83a8687840caaf010eca9c749e67be6364","modified":1666666726933},{"_id":"public/2016/11/03/bezier-zhibei/56030-6700ecb2811dcac4.jpg","hash":"c477901c6bc923a64836f51b3ac64544c0239b22","modified":1666666726933},{"_id":"public/2016/11/03/bezier-zhibei/56030-88174468ef9870e3.png","hash":"1bacc2e96a0a7aae25a3192ab60bab19ff9d8100","modified":1666666726933},{"_id":"public/2016/11/03/bezier-zhibei/56030-9e2c8e268d676528.png","hash":"4749581274209e95ca70d89fa6ce53c9a5fcaa2e","modified":1666666726933},{"_id":"public/2016/11/03/bezier-zhibei/56030-de6fcb447ec49b87.png","hash":"74edb84bacf708c7a0baf34123d2e8c0d4e4a279","modified":1666666726933},{"_id":"public/2016/11/03/bezier-zhibei/56030-c2aa8094cd0a6004.png","hash":"744694a312cf2404954537cc8eda7e421c31f147","modified":1666666726933},{"_id":"public/2016/11/03/bezier-zhibei/56030-c2894a2979862cd1.png","hash":"8d3aa81e3efc18344d4ec6cab5e1f267477a795b","modified":1666666726933},{"_id":"public/2016/11/03/bezier-zhibei/56030-8c56a1e98f432000.jpg","hash":"a155d0a5fef32cfc5e0599e2aa797658da04466b","modified":1666666726933},{"_id":"public/lib/vazir-font/Vazir-Black.eot","hash":"13d026ff857c853cbd0dc519b6e58669db309441","modified":1666666727174},{"_id":"public/lib/vazir-font/Vazir-Black.ttf","hash":"594dc3344ad14903c247615427d1009709f0f5a4","modified":1666666727175},{"_id":"public/lib/vazir-font/Vazir-Bold.eot","hash":"f76ec625e15522ff60d21f7a9a3b71c65bc27556","modified":1666666727175},{"_id":"public/lib/vazir-font/Vazir-Bold.ttf","hash":"2e6c9df9f775373fb1988ae8529aa8f05313dae6","modified":1666666727175},{"_id":"public/lib/vazir-font/Vazir-Light.eot","hash":"3edffd7bb61eee8cd46b57225f9f9e5264e3362b","modified":1666666727175},{"_id":"public/lib/vazir-font/Vazir-Light.ttf","hash":"9f1e2934098a6a4a7c5584c8f3fa24a707070da3","modified":1666666727175},{"_id":"public/lib/vazir-font/Vazir-Medium.eot","hash":"1f5a73db7947ef22c8a2bb19d6449b80496c03c4","modified":1666666727175},{"_id":"public/lib/vazir-font/Vazir-Medium.ttf","hash":"295f7e02c9b157e7ea63ad09613b00ceab85c5cd","modified":1666666727176},{"_id":"public/lib/vazir-font/Vazir-Thin.eot","hash":"08e1503d1181188690fd9c81860d6c890c1465f6","modified":1666666727176},{"_id":"public/lib/vazir-font/Vazir-Thin.ttf","hash":"a6aa450ee6e0f85786474ca6b04827ef97e81af4","modified":1666666727176},{"_id":"public/lib/vazir-font/Vazir.ttf","hash":"f22b219824026e490a581ddb3b36b07997dff0e3","modified":1666666727176},{"_id":"public/lib/vazir-font/Vazir.eot","hash":"31a9219c25fe1991fb745ec8dbbcf45c6094a702","modified":1666666727176},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff","hash":"f9d835a0f9248b1bb33d66968e87c4a50103ed8d","modified":1666666727176},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"19e302760e39e25a5f8d90d6cd0164ef6cd74f8c","modified":1666666727176},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff","hash":"80d33a73cbb60e206ef6f5c898988641576c7dda","modified":1666666727176},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.eot","hash":"644ece8263d2f96b087eebf7f6d4e309e5898eb5","modified":1666666727176},{"_id":"public/2016/11/03/bezier-zhibei/56030-86bc9a9afdb15e48.png","hash":"d9d1a79d065c02e0a17a763270eaff9473dd6abd","modified":1666666727176},{"_id":"public/2016/11/03/bezier-zhibei/56030-b65e3dd8196f4da5.gif","hash":"c623deb512a9b05b609fddf57330b0da13d80838","modified":1666666727177},{"_id":"public/css/rtl.css","hash":"c2c2bc4ce311b3129275e009e903088b45e7ed77","modified":1666666727181},{"_id":"public/js/main.js","hash":"584c5a69ac81a483a1c4377a2e2cf326c2795e7b","modified":1666666727181},{"_id":"public/js/search.js","hash":"a74d0c601f820160825a2e4ad13618074d714933","modified":1666666727181},{"_id":"public/lib/vazir-font/font-face.css","hash":"8f2bf6b59ae1f2ed4c2fead6cea4b8314fcf62e5","modified":1666666727181},{"_id":"public/lib/justified-gallery/css/justifiedGallery.min.css","hash":"92bb6e468a1db7fbd99ccb960e15e28572254263","modified":1666666727182},{"_id":"public/css/style.css","hash":"f2ff16f003b06d96c5b61f0070b3d04083c0898c","modified":1666666727182},{"_id":"public/lib/jquery/jquery.min.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1666666727182},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"cf1a3fd771900af34f2af22142beecfb47367548","modified":1666666727182},{"_id":"public/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"82ab395176c927ffbb2f7c95132ee0a06cd5d64a","modified":1666666727182},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"c445864a9646948e0d7ff44930ad732ee61427d8","modified":1666666727182},{"_id":"public/2016/11/03/bezier-zhibei/56030-bb6b8c6a46f12135.gif","hash":"b0f55381880464de10250ad92b5cabd64a74bd14","modified":1666666727182},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.svg","hash":"33e86c0ad6fb9c5c0c8c2af4cb2d790c6b14a8aa","modified":1666666727186},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.eot","hash":"10740942ec6b3f4985529d343402d0bf32f9f847","modified":1666666727186},{"_id":"public/2016/11/03/bezier-zhibei/56030-f3e69b487f4e37c8.gif","hash":"6982d3fb2de095a23884a28e1a33451d52909299","modified":1666666727187},{"_id":"public/2016/11/03/bezier-zhibei/56030-2d2fb8989e10f177.gif","hash":"b86bdc64434146ca81876e7d1da72acfe1ae0aba","modified":1666666727189},{"_id":"public/images/logo.png","hash":"0e3029251dfda26adee2761f71377297e8c26871","modified":1666666727192},{"_id":"public/2016/11/03/bezier-zhibei/56030-61f16deba712d8ac.gif","hash":"70bec6e2128e41ed394ac295541162dcbbc0b857","modified":1666666727193},{"_id":"public/lib/meslo-LG/MesloLGS-BoldItalic.ttf","hash":"926035f0156cccf1b0ca507347f39bf9c510f51e","modified":1666666727195},{"_id":"public/lib/meslo-LG/MesloLGS-Italic.ttf","hash":"9d757cc9f928fc83b2133283dd639c12b11d94ad","modified":1666666727198},{"_id":"public/lib/meslo-LG/MesloLGL-Italic.ttf","hash":"9a23c6898b0943bd3d96c04df9a0f66e919451d8","modified":1666666727198},{"_id":"public/lib/meslo-LG/MesloLGL-BoldItalic.ttf","hash":"b7d24ab1e4fad720f31a2b0cca1904ce1740d846","modified":1666666727198},{"_id":"public/lib/meslo-LG/MesloLGM-BoldItalic.ttf","hash":"b542b9591fbf33925d93f0695b6e123a9f0cfd43","modified":1666666727201},{"_id":"public/lib/meslo-LG/MesloLGM-Italic.ttf","hash":"93ebc5098cf57a32b7b8d297681f31692c09bdfa","modified":1666666727201},{"_id":"public/lib/meslo-LG/MesloLGS-Bold.ttf","hash":"f9918fb93d6ab6850f5d38069a999c311af78816","modified":1666666727201},{"_id":"public/lib/meslo-LG/MesloLGL-Regular.ttf","hash":"6c090d6bff3928fbf8a5f4104e58ed7f421aea7c","modified":1666666727201},{"_id":"public/lib/meslo-LG/MesloLGS-Regular.ttf","hash":"de559f8d70d5b1ab2810597bfd0b1b9506f3ef01","modified":1666666727201},{"_id":"public/lib/meslo-LG/MesloLGM-Bold.ttf","hash":"58be4b7760e9a84daa81929d046f9a15c4fd1c1a","modified":1666666727202},{"_id":"public/lib/meslo-LG/MesloLGL-Bold.ttf","hash":"34f7db59f1d023294e69976aa20b7d52b86165a4","modified":1666666727202},{"_id":"public/2016/11/03/bezier-zhibei/56030-8fb7008726c62987.gif","hash":"f8c7666e02f132ac48bcb3ab89996fc29fb58795","modified":1666666727202},{"_id":"public/2016/11/03/bezier-zhibei/56030-9b189370ffbf5aec.gif","hash":"1e39c8942231ad7af1aa9efe809adb1224253ae5","modified":1666666727202},{"_id":"public/lib/meslo-LG/MesloLGM-Regular.ttf","hash":"20ce1fc7ae1254558ca044ae48283faaa58897e5","modified":1666666727204},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.svg","hash":"ed6c1ed8f24df909f40fe5e5c652d7ff9570c821","modified":1666666727206},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.svg","hash":"b0bb9e6ac7709206b9510f1718516d89aead5b21","modified":1666666727206},{"_id":"public/2016/11/03/bezier-zhibei/56030-390b7b874ddd5d3d.gif","hash":"5b5d6900e23d4bdf797f3edd101b1e6a166983d9","modified":1666666727212}],"Category":[],"Data":[{"_id":"links","data":{"Colin’s Nest":{"link":"http://colin1994.github.io/","avatar":"http://example.com/avatar.png"},"Vong":{"link":"https://vongloo.me/","avatar":"http://example.com/avatar.png"},"Punmy":{"link":"https://punmy.cn/","avatar":"http://example.com/avatar.png"},"细语呢喃":{"link":"https://www.hrwhisper.me/","avatar":"http://example.com/avatar.png"},"栖迟于一丘":{"link":"https://www.hongweipeng.com/","avatar":"http://example.com/avatar.png"},"B1ueW01f":{"link":"https://www.b1uew01f.net/","avatar":"http://example.com/avatar.png"},"忘归":{"link":"http://jalan.space/","avatar":"http://example.com/avatar.png"},"进阶者":{"link":"https://ruphi.cn/","avatar":"http://example.com/avatar.png"},"LIZIMEOW'S BLOG":{"link":"http://lizimeow.cn/","avatar":"http://example.com/avatar.png"},"Saitjr":{"link":"http://www.saitjr.com/","avatar":null}}}],"Page":[{"title":"about","date":"2018-11-21T13:09:38.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-11-21 21:09:38\n---\n","updated":"2022-10-25T02:57:42.646Z","path":"about/index.html","comments":1,"layout":"page","_id":"cl9nmc47s00018wwxzf7jwbjr","content":"","site":{"data":{"links":{"Colin’s Nest":{"link":"http://colin1994.github.io/","avatar":"http://example.com/avatar.png"},"Vong":{"link":"https://vongloo.me/","avatar":"http://example.com/avatar.png"},"Punmy":{"link":"https://punmy.cn/","avatar":"http://example.com/avatar.png"},"细语呢喃":{"link":"https://www.hrwhisper.me/","avatar":"http://example.com/avatar.png"},"栖迟于一丘":{"link":"https://www.hongweipeng.com/","avatar":"http://example.com/avatar.png"},"B1ueW01f":{"link":"https://www.b1uew01f.net/","avatar":"http://example.com/avatar.png"},"忘归":{"link":"http://jalan.space/","avatar":"http://example.com/avatar.png"},"进阶者":{"link":"https://ruphi.cn/","avatar":"http://example.com/avatar.png"},"LIZIMEOW'S BLOG":{"link":"http://lizimeow.cn/","avatar":"http://example.com/avatar.png"},"Saitjr":{"link":"http://www.saitjr.com/","avatar":null}}}},"excerpt":"","more":""},{"title":"buddy","date":"2019-02-26T05:47:12.000Z","_content":"\n[Colin's Nest](http://colin1994.github.io/)\n[Vong](https://vongloo.me/)\n[Punmy](https://punmy.cn/)\n[细语呢喃](https://www.hrwhisper.me)\n[栖迟于一丘](https://www.hongweipeng.com/)\n[B1ueW01f](https://www.b1uew01f.net/)\n[忘归](http://jalan.space/)\n[进阶者](https://ruphi.cn/)\n[LIZIMEOW'S BLOG](http://lizimeow.cn/)\n[Saitjr](http://www.saitjr.com/)\n\n#### > _🤙 排名不分先后_\n","source":"buddy/index.md","raw":"---\ntitle: buddy\ndate: 2019-02-26 13:47:12\n---\n\n[Colin's Nest](http://colin1994.github.io/)\n[Vong](https://vongloo.me/)\n[Punmy](https://punmy.cn/)\n[细语呢喃](https://www.hrwhisper.me)\n[栖迟于一丘](https://www.hongweipeng.com/)\n[B1ueW01f](https://www.b1uew01f.net/)\n[忘归](http://jalan.space/)\n[进阶者](https://ruphi.cn/)\n[LIZIMEOW'S BLOG](http://lizimeow.cn/)\n[Saitjr](http://www.saitjr.com/)\n\n#### > _🤙 排名不分先后_\n","updated":"2022-10-25T02:57:42.646Z","path":"buddy/index.html","comments":1,"layout":"page","_id":"cl9nmc49j001o8wwxac0rzdem","content":"<p><a href=\"http://colin1994.github.io/\" target=\"_blank\" rel=\"noopener\">Colin’s Nest</a><br><a href=\"https://vongloo.me/\" target=\"_blank\" rel=\"noopener\">Vong</a><br><a href=\"https://punmy.cn/\" target=\"_blank\" rel=\"noopener\">Punmy</a><br><a href=\"https://www.hrwhisper.me\" target=\"_blank\" rel=\"noopener\">细语呢喃</a><br><a href=\"https://www.hongweipeng.com/\" target=\"_blank\" rel=\"noopener\">栖迟于一丘</a><br><a href=\"https://www.b1uew01f.net/\" target=\"_blank\" rel=\"noopener\">B1ueW01f</a><br><a href=\"http://jalan.space/\" target=\"_blank\" rel=\"noopener\">忘归</a><br><a href=\"https://ruphi.cn/\" target=\"_blank\" rel=\"noopener\">进阶者</a><br><a href=\"http://lizimeow.cn/\" target=\"_blank\" rel=\"noopener\">LIZIMEOW’S BLOG</a><br><a href=\"http://www.saitjr.com/\" target=\"_blank\" rel=\"noopener\">Saitjr</a></p>\n<h4 id=\"gt-🤙-排名不分先后\"><a href=\"#gt-🤙-排名不分先后\" class=\"headerlink\" title=\"&gt; 🤙 排名不分先后\"></a>&gt; <em>🤙 排名不分先后</em></h4>","site":{"data":{"links":{"Colin’s Nest":{"link":"http://colin1994.github.io/","avatar":"http://example.com/avatar.png"},"Vong":{"link":"https://vongloo.me/","avatar":"http://example.com/avatar.png"},"Punmy":{"link":"https://punmy.cn/","avatar":"http://example.com/avatar.png"},"细语呢喃":{"link":"https://www.hrwhisper.me/","avatar":"http://example.com/avatar.png"},"栖迟于一丘":{"link":"https://www.hongweipeng.com/","avatar":"http://example.com/avatar.png"},"B1ueW01f":{"link":"https://www.b1uew01f.net/","avatar":"http://example.com/avatar.png"},"忘归":{"link":"http://jalan.space/","avatar":"http://example.com/avatar.png"},"进阶者":{"link":"https://ruphi.cn/","avatar":"http://example.com/avatar.png"},"LIZIMEOW'S BLOG":{"link":"http://lizimeow.cn/","avatar":"http://example.com/avatar.png"},"Saitjr":{"link":"http://www.saitjr.com/","avatar":null}}}},"excerpt":"","more":"<p><a href=\"http://colin1994.github.io/\" target=\"_blank\" rel=\"noopener\">Colin’s Nest</a><br><a href=\"https://vongloo.me/\" target=\"_blank\" rel=\"noopener\">Vong</a><br><a href=\"https://punmy.cn/\" target=\"_blank\" rel=\"noopener\">Punmy</a><br><a href=\"https://www.hrwhisper.me\" target=\"_blank\" rel=\"noopener\">细语呢喃</a><br><a href=\"https://www.hongweipeng.com/\" target=\"_blank\" rel=\"noopener\">栖迟于一丘</a><br><a href=\"https://www.b1uew01f.net/\" target=\"_blank\" rel=\"noopener\">B1ueW01f</a><br><a href=\"http://jalan.space/\" target=\"_blank\" rel=\"noopener\">忘归</a><br><a href=\"https://ruphi.cn/\" target=\"_blank\" rel=\"noopener\">进阶者</a><br><a href=\"http://lizimeow.cn/\" target=\"_blank\" rel=\"noopener\">LIZIMEOW’S BLOG</a><br><a href=\"http://www.saitjr.com/\" target=\"_blank\" rel=\"noopener\">Saitjr</a></p>\n<h4 id=\"gt-🤙-排名不分先后\"><a href=\"#gt-🤙-排名不分先后\" class=\"headerlink\" title=\"&gt; 🤙 排名不分先后\"></a>&gt; <em>🤙 排名不分先后</em></h4>"},{"title":"友情链接","layout":"links","comments":0,"sidebar":"none","_content":"\n","source":"links/index.md","raw":"---\ntitle: 友情链接\nlayout: links\ncomments: false\nsidebar: none\n---\n\n","date":"2022-10-25T02:57:42.646Z","updated":"2022-10-25T02:57:42.646Z","path":"links/index.html","_id":"cl9nmc49l001p8wwx5hy22z3l","content":"","site":{"data":{"links":{"Colin’s Nest":{"link":"http://colin1994.github.io/","avatar":"http://example.com/avatar.png"},"Vong":{"link":"https://vongloo.me/","avatar":"http://example.com/avatar.png"},"Punmy":{"link":"https://punmy.cn/","avatar":"http://example.com/avatar.png"},"细语呢喃":{"link":"https://www.hrwhisper.me/","avatar":"http://example.com/avatar.png"},"栖迟于一丘":{"link":"https://www.hongweipeng.com/","avatar":"http://example.com/avatar.png"},"B1ueW01f":{"link":"https://www.b1uew01f.net/","avatar":"http://example.com/avatar.png"},"忘归":{"link":"http://jalan.space/","avatar":"http://example.com/avatar.png"},"进阶者":{"link":"https://ruphi.cn/","avatar":"http://example.com/avatar.png"},"LIZIMEOW'S BLOG":{"link":"http://lizimeow.cn/","avatar":"http://example.com/avatar.png"},"Saitjr":{"link":"http://www.saitjr.com/","avatar":null}}}},"excerpt":"","more":""},{"title":"唠叨","comments":0,"_content":"\n> [2018-12-06 00:45] 所谓创新，其实并不复杂，这个时代，简单本身就是最好的创新。\n\n> [2018-12-06 00:40] 小说《去19号房间》里的妻子，发现自己出现了厌烦家庭生活的时刻。于是，便在房子里辟出了一个独处的房间，也跟家里人约定好这个空间只属于自己。但没多久，家人完全忘了这个约定，开始在这个房间里进进出出。后来这位妻子在宾馆里租了个房间作为个人私密空间，即使被误会外遇也不肯说出真相。其实每个人，都有属于自己的19号房间。再亲密的人也希望他能在门前止步，保持界限感。可往往很多人对界限感并没有清晰的认识，一不小心就越了界。\n\n> [2018-12-06 00:37] 社交的起因在于人们生活的单调和空虚。社交的需要驱使他们来到一起，但各自具有的许多令人厌憎的品行又驱使他们分开。\n\n> [2018-12-05 13:44] 影响力的另一个重要意义是，当他人认为你是（将成为）该领域的重要成员，他们才会愿意给与你机会或是资源。互联网行业人员流动性很大，往往今天对接的人明天离职就不知所踪了，这样的情况没有人原因付出太多精力和时间关注你的成长，更不可能给予你实际性的机会。让别人意识到，你会长久的呆在互联网行业，成为核心成员只是时间问题，大家就不会轻视你，并愿意在早期对你进行投资。\n\n> [2018-11-22 23:30] 可以！大功告成！:yum:\n\n> [2018-11-22 23:29] 试试倒序发布~\n\n> [2018-11-22 22:05] 终于把bot弄好了，以后可以直接在slack里发东西，bot就会自动将内容发布到git-pages上，然后顺便把代码push到git上。自动化的魅力真是太迷人了..\n\n> [2018.11.22 15.50] 测试一下。\n\n> [2018.11.22 15:48] 搞了个记录碎碎念的地方。\n\n\n\n\n","source":"nag/index.md","raw":"---\ntitle: 唠叨\ncomments: false\n---\n\n> [2018-12-06 00:45] 所谓创新，其实并不复杂，这个时代，简单本身就是最好的创新。\n\n> [2018-12-06 00:40] 小说《去19号房间》里的妻子，发现自己出现了厌烦家庭生活的时刻。于是，便在房子里辟出了一个独处的房间，也跟家里人约定好这个空间只属于自己。但没多久，家人完全忘了这个约定，开始在这个房间里进进出出。后来这位妻子在宾馆里租了个房间作为个人私密空间，即使被误会外遇也不肯说出真相。其实每个人，都有属于自己的19号房间。再亲密的人也希望他能在门前止步，保持界限感。可往往很多人对界限感并没有清晰的认识，一不小心就越了界。\n\n> [2018-12-06 00:37] 社交的起因在于人们生活的单调和空虚。社交的需要驱使他们来到一起，但各自具有的许多令人厌憎的品行又驱使他们分开。\n\n> [2018-12-05 13:44] 影响力的另一个重要意义是，当他人认为你是（将成为）该领域的重要成员，他们才会愿意给与你机会或是资源。互联网行业人员流动性很大，往往今天对接的人明天离职就不知所踪了，这样的情况没有人原因付出太多精力和时间关注你的成长，更不可能给予你实际性的机会。让别人意识到，你会长久的呆在互联网行业，成为核心成员只是时间问题，大家就不会轻视你，并愿意在早期对你进行投资。\n\n> [2018-11-22 23:30] 可以！大功告成！:yum:\n\n> [2018-11-22 23:29] 试试倒序发布~\n\n> [2018-11-22 22:05] 终于把bot弄好了，以后可以直接在slack里发东西，bot就会自动将内容发布到git-pages上，然后顺便把代码push到git上。自动化的魅力真是太迷人了..\n\n> [2018.11.22 15.50] 测试一下。\n\n> [2018.11.22 15:48] 搞了个记录碎碎念的地方。\n\n\n\n\n","date":"2022-10-25T02:57:42.646Z","updated":"2022-10-25T02:57:42.646Z","path":"nag/index.html","layout":"page","_id":"cl9nmc49w001q8wwx4tfcy4gs","content":"<blockquote>\n<p>[2018-12-06 00:45] 所谓创新，其实并不复杂，这个时代，简单本身就是最好的创新。</p>\n</blockquote>\n<blockquote>\n<p>[2018-12-06 00:40] 小说《去19号房间》里的妻子，发现自己出现了厌烦家庭生活的时刻。于是，便在房子里辟出了一个独处的房间，也跟家里人约定好这个空间只属于自己。但没多久，家人完全忘了这个约定，开始在这个房间里进进出出。后来这位妻子在宾馆里租了个房间作为个人私密空间，即使被误会外遇也不肯说出真相。其实每个人，都有属于自己的19号房间。再亲密的人也希望他能在门前止步，保持界限感。可往往很多人对界限感并没有清晰的认识，一不小心就越了界。</p>\n</blockquote>\n<blockquote>\n<p>[2018-12-06 00:37] 社交的起因在于人们生活的单调和空虚。社交的需要驱使他们来到一起，但各自具有的许多令人厌憎的品行又驱使他们分开。</p>\n</blockquote>\n<blockquote>\n<p>[2018-12-05 13:44] 影响力的另一个重要意义是，当他人认为你是（将成为）该领域的重要成员，他们才会愿意给与你机会或是资源。互联网行业人员流动性很大，往往今天对接的人明天离职就不知所踪了，这样的情况没有人原因付出太多精力和时间关注你的成长，更不可能给予你实际性的机会。让别人意识到，你会长久的呆在互联网行业，成为核心成员只是时间问题，大家就不会轻视你，并愿意在早期对你进行投资。</p>\n</blockquote>\n<blockquote>\n<p>[2018-11-22 23:30] 可以！大功告成！:yum:</p>\n</blockquote>\n<blockquote>\n<p>[2018-11-22 23:29] 试试倒序发布~</p>\n</blockquote>\n<blockquote>\n<p>[2018-11-22 22:05] 终于把bot弄好了，以后可以直接在slack里发东西，bot就会自动将内容发布到git-pages上，然后顺便把代码push到git上。自动化的魅力真是太迷人了..</p>\n</blockquote>\n<blockquote>\n<p>[2018.11.22 15.50] 测试一下。</p>\n</blockquote>\n<blockquote>\n<p>[2018.11.22 15:48] 搞了个记录碎碎念的地方。</p>\n</blockquote>\n","site":{"data":{"links":{"Colin’s Nest":{"link":"http://colin1994.github.io/","avatar":"http://example.com/avatar.png"},"Vong":{"link":"https://vongloo.me/","avatar":"http://example.com/avatar.png"},"Punmy":{"link":"https://punmy.cn/","avatar":"http://example.com/avatar.png"},"细语呢喃":{"link":"https://www.hrwhisper.me/","avatar":"http://example.com/avatar.png"},"栖迟于一丘":{"link":"https://www.hongweipeng.com/","avatar":"http://example.com/avatar.png"},"B1ueW01f":{"link":"https://www.b1uew01f.net/","avatar":"http://example.com/avatar.png"},"忘归":{"link":"http://jalan.space/","avatar":"http://example.com/avatar.png"},"进阶者":{"link":"https://ruphi.cn/","avatar":"http://example.com/avatar.png"},"LIZIMEOW'S BLOG":{"link":"http://lizimeow.cn/","avatar":"http://example.com/avatar.png"},"Saitjr":{"link":"http://www.saitjr.com/","avatar":null}}}},"excerpt":"","more":"<blockquote>\n<p>[2018-12-06 00:45] 所谓创新，其实并不复杂，这个时代，简单本身就是最好的创新。</p>\n</blockquote>\n<blockquote>\n<p>[2018-12-06 00:40] 小说《去19号房间》里的妻子，发现自己出现了厌烦家庭生活的时刻。于是，便在房子里辟出了一个独处的房间，也跟家里人约定好这个空间只属于自己。但没多久，家人完全忘了这个约定，开始在这个房间里进进出出。后来这位妻子在宾馆里租了个房间作为个人私密空间，即使被误会外遇也不肯说出真相。其实每个人，都有属于自己的19号房间。再亲密的人也希望他能在门前止步，保持界限感。可往往很多人对界限感并没有清晰的认识，一不小心就越了界。</p>\n</blockquote>\n<blockquote>\n<p>[2018-12-06 00:37] 社交的起因在于人们生活的单调和空虚。社交的需要驱使他们来到一起，但各自具有的许多令人厌憎的品行又驱使他们分开。</p>\n</blockquote>\n<blockquote>\n<p>[2018-12-05 13:44] 影响力的另一个重要意义是，当他人认为你是（将成为）该领域的重要成员，他们才会愿意给与你机会或是资源。互联网行业人员流动性很大，往往今天对接的人明天离职就不知所踪了，这样的情况没有人原因付出太多精力和时间关注你的成长，更不可能给予你实际性的机会。让别人意识到，你会长久的呆在互联网行业，成为核心成员只是时间问题，大家就不会轻视你，并愿意在早期对你进行投资。</p>\n</blockquote>\n<blockquote>\n<p>[2018-11-22 23:30] 可以！大功告成！:yum:</p>\n</blockquote>\n<blockquote>\n<p>[2018-11-22 23:29] 试试倒序发布~</p>\n</blockquote>\n<blockquote>\n<p>[2018-11-22 22:05] 终于把bot弄好了，以后可以直接在slack里发东西，bot就会自动将内容发布到git-pages上，然后顺便把代码push到git上。自动化的魅力真是太迷人了..</p>\n</blockquote>\n<blockquote>\n<p>[2018.11.22 15.50] 测试一下。</p>\n</blockquote>\n<blockquote>\n<p>[2018.11.22 15:48] 搞了个记录碎碎念的地方。</p>\n</blockquote>\n"}],"Post":[{"title":"《如何高效学习》","date":"2019-03-10T11:55:06.000Z","draft":true,"_content":"\n从高中开始，我开始逐渐意识到“学习方法”这件事，而当我开始不断地在学业上尝试不同的学习方法之后，我对事半功倍这个词有了新的认识，并且在高考也考出了一个超常的成绩（虽然也没有多好）。从那以后，我都会有意无意地去学习不同的学习策略，并且非常渴望能有快速学习掌握某一门技术及知识的能力。就如《如何高效学习》书中的序篇所说的那样：\n\n> （本书）其主旨在于打通现在所谓的专业壁垒。目前流行所谓的知识专业性，当然我并不否认，但是知识本身是没有疆界的，如何通过自身的努力和创造性将各种专业知识有机地融合在一起，然后创造性地解决问题才是关键。\n\n这个观点和我之前的想法不谋而合，因此在这半个月里，我断断续续地读完了《如何高效学习》这本书，特此也做下记录及心得。\n\n从整体来看，这本书共分为四个部分。\n\n* 整体性学习策略\n* 整体性学习技术\n* 超越整体性学习\n* 整体性学习小结\n\n从这四个部分其实就可以发现，作者也将其的一个学习思路贯彻在了写书的过程当中：第一部分主要讲解概念，第二部分讲解方法，第三部分讲的是如何举一反三，最后做了下总结。\n\n下面我们就一一刨开这四个部分去看看。\n\n# 第一部分：整体性学习策略\n\n首先作者解释了一下，什么是“整体性学习”。整体性学习和机械记忆相反，机械记忆就是反复的记忆信息，希望通过不断地重复，来达到记忆某个信息（比如公式等等）的目的的一种学习方法。而整体性学习，就偏不做重复反复记忆的事情，而是建立知识与知识之间的联系（事实上，知识的学习从来就不是孤立的）。只要你建立的联系越多，你就记得越牢，理解得越好。\n\n## 整体性学习的三个观点\n\n在整体性学习中，有三个观点（这三个观点理解起来较为隐晦，下面为我自己的理解，如有不当，欢迎指出）：\n\n* 结构\n    * 结构其实就相当于一张地图，只有这张地图，你才能想去哪就去哪。而地图中的建筑就是知识点，道路就是他们之间的联系。可想而知，如果你没有建立起一个清楚的结构，那么你到达某个知识点就会特别困难。\n\n* 模型\n    * 模型就是知识的压缩，比如一本书最好的模型之一，就是书的目录，目录中已经将书本里的知识压缩到了极致，你只需看着目录通过联想，就可以回忆起书中的内容，而不需要把每行每字都记录下来。而在这你就可以将模型理解为，（结构）地图中的某座建筑。\n\n* 高速公路\n    * 高速公路就是结构与结构之间的联系。我们假设数学是一座城市，那么如我们在结构中定义的，他拥有自己城市的地图，我们可以在这个城市里来去自如。但是生物学是另一个城市，我们又该怎么从数学这座城市通往物理这座城市呢？这就需要我们建立两者之间的高速公路。**高速公路正是创造的源泉。**\n\n因此，将单一学科中的知识点压缩成**模型**，并建立知识点与知识点之间的联系，形成**结构**，再在不同学科中建立起联系，形成**高速公路**，这就是整体性学习的策略。\n\n了解了三个重要观点，我们再来说下如何获取知识。\n\n## 整体性学习的顺序\n\n### 1. 获取\n\n获取就是代表信息进入脑子的过程。因此在这个阶段，处理各种信息以及减少干扰的能力至关重要。比如，1. 阅读一页材料并达到90%的理解，你要花费多长时间？ 2. 一堂课，你真正听下去的有多少内容？只有高效的获取信息，才能为整体性学习打下良好的基础，否则就是无稽之谈。\n\n那么在获取这一阶段，有三个主要目标：\n\n#### 1） 简化\n\n简化就是你要找出重要的东西和不重要的东西。在上学时期，我的老师经常说过：“一节课45分钟不需要你们45分钟都认真听，你可以开小差，但是当我讲到重点的时候，你得回过神来听我讲。”。\n\n#### 2） 容量\n\n容量其实指的是你获取到的信息的多少。你只有获取尽可能多的信息，也就是容量越大，你才能知道得越多，理解得越深。打个比方，我们学习数学公式的时候，如果仅仅是看这个公式，是理解得不透彻的，自然也没办法记牢。如果能再多去理解这个公式要解决的问题、它发明的背景，那么你对它的理解就会更透彻。\n\n#### 3） 速度\n\n速度是获取信息的最后一个目标，我们的目标是用最短的时间，获取最多的知识。（因此，专注、效率就显得尤为重要。）\n\n### 2. 理解\n\n> 整体性学习过程对信息的理解有三个层次，\n\n### 3. 拓展\n### 4. 纠错\n### 5. 应用\n\n# 整体性学习技术\n\n# 超越整体性学习\n\n# 整体性学习小结\n\n\n","source":"_drafts/learn-more-study-less.md","raw":"---\ntitle: 《如何高效学习》\ndate: 2019-03-10 19:55:06\ndraft: true\ntags: \n- 高效\n- 学习\n---\n\n从高中开始，我开始逐渐意识到“学习方法”这件事，而当我开始不断地在学业上尝试不同的学习方法之后，我对事半功倍这个词有了新的认识，并且在高考也考出了一个超常的成绩（虽然也没有多好）。从那以后，我都会有意无意地去学习不同的学习策略，并且非常渴望能有快速学习掌握某一门技术及知识的能力。就如《如何高效学习》书中的序篇所说的那样：\n\n> （本书）其主旨在于打通现在所谓的专业壁垒。目前流行所谓的知识专业性，当然我并不否认，但是知识本身是没有疆界的，如何通过自身的努力和创造性将各种专业知识有机地融合在一起，然后创造性地解决问题才是关键。\n\n这个观点和我之前的想法不谋而合，因此在这半个月里，我断断续续地读完了《如何高效学习》这本书，特此也做下记录及心得。\n\n从整体来看，这本书共分为四个部分。\n\n* 整体性学习策略\n* 整体性学习技术\n* 超越整体性学习\n* 整体性学习小结\n\n从这四个部分其实就可以发现，作者也将其的一个学习思路贯彻在了写书的过程当中：第一部分主要讲解概念，第二部分讲解方法，第三部分讲的是如何举一反三，最后做了下总结。\n\n下面我们就一一刨开这四个部分去看看。\n\n# 第一部分：整体性学习策略\n\n首先作者解释了一下，什么是“整体性学习”。整体性学习和机械记忆相反，机械记忆就是反复的记忆信息，希望通过不断地重复，来达到记忆某个信息（比如公式等等）的目的的一种学习方法。而整体性学习，就偏不做重复反复记忆的事情，而是建立知识与知识之间的联系（事实上，知识的学习从来就不是孤立的）。只要你建立的联系越多，你就记得越牢，理解得越好。\n\n## 整体性学习的三个观点\n\n在整体性学习中，有三个观点（这三个观点理解起来较为隐晦，下面为我自己的理解，如有不当，欢迎指出）：\n\n* 结构\n    * 结构其实就相当于一张地图，只有这张地图，你才能想去哪就去哪。而地图中的建筑就是知识点，道路就是他们之间的联系。可想而知，如果你没有建立起一个清楚的结构，那么你到达某个知识点就会特别困难。\n\n* 模型\n    * 模型就是知识的压缩，比如一本书最好的模型之一，就是书的目录，目录中已经将书本里的知识压缩到了极致，你只需看着目录通过联想，就可以回忆起书中的内容，而不需要把每行每字都记录下来。而在这你就可以将模型理解为，（结构）地图中的某座建筑。\n\n* 高速公路\n    * 高速公路就是结构与结构之间的联系。我们假设数学是一座城市，那么如我们在结构中定义的，他拥有自己城市的地图，我们可以在这个城市里来去自如。但是生物学是另一个城市，我们又该怎么从数学这座城市通往物理这座城市呢？这就需要我们建立两者之间的高速公路。**高速公路正是创造的源泉。**\n\n因此，将单一学科中的知识点压缩成**模型**，并建立知识点与知识点之间的联系，形成**结构**，再在不同学科中建立起联系，形成**高速公路**，这就是整体性学习的策略。\n\n了解了三个重要观点，我们再来说下如何获取知识。\n\n## 整体性学习的顺序\n\n### 1. 获取\n\n获取就是代表信息进入脑子的过程。因此在这个阶段，处理各种信息以及减少干扰的能力至关重要。比如，1. 阅读一页材料并达到90%的理解，你要花费多长时间？ 2. 一堂课，你真正听下去的有多少内容？只有高效的获取信息，才能为整体性学习打下良好的基础，否则就是无稽之谈。\n\n那么在获取这一阶段，有三个主要目标：\n\n#### 1） 简化\n\n简化就是你要找出重要的东西和不重要的东西。在上学时期，我的老师经常说过：“一节课45分钟不需要你们45分钟都认真听，你可以开小差，但是当我讲到重点的时候，你得回过神来听我讲。”。\n\n#### 2） 容量\n\n容量其实指的是你获取到的信息的多少。你只有获取尽可能多的信息，也就是容量越大，你才能知道得越多，理解得越深。打个比方，我们学习数学公式的时候，如果仅仅是看这个公式，是理解得不透彻的，自然也没办法记牢。如果能再多去理解这个公式要解决的问题、它发明的背景，那么你对它的理解就会更透彻。\n\n#### 3） 速度\n\n速度是获取信息的最后一个目标，我们的目标是用最短的时间，获取最多的知识。（因此，专注、效率就显得尤为重要。）\n\n### 2. 理解\n\n> 整体性学习过程对信息的理解有三个层次，\n\n### 3. 拓展\n### 4. 纠错\n### 5. 应用\n\n# 整体性学习技术\n\n# 超越整体性学习\n\n# 整体性学习小结\n\n\n","slug":"learn-more-study-less","published":0,"updated":"2022-10-25T02:57:42.630Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9nmc47l00008wwxervnp72v","content":"<p>从高中开始，我开始逐渐意识到“学习方法”这件事，而当我开始不断地在学业上尝试不同的学习方法之后，我对事半功倍这个词有了新的认识，并且在高考也考出了一个超常的成绩（虽然也没有多好）。从那以后，我都会有意无意地去学习不同的学习策略，并且非常渴望能有快速学习掌握某一门技术及知识的能力。就如《如何高效学习》书中的序篇所说的那样：</p>\n<blockquote>\n<p>（本书）其主旨在于打通现在所谓的专业壁垒。目前流行所谓的知识专业性，当然我并不否认，但是知识本身是没有疆界的，如何通过自身的努力和创造性将各种专业知识有机地融合在一起，然后创造性地解决问题才是关键。</p>\n</blockquote>\n<p>这个观点和我之前的想法不谋而合，因此在这半个月里，我断断续续地读完了《如何高效学习》这本书，特此也做下记录及心得。</p>\n<p>从整体来看，这本书共分为四个部分。</p>\n<ul>\n<li>整体性学习策略</li>\n<li>整体性学习技术</li>\n<li>超越整体性学习</li>\n<li>整体性学习小结</li>\n</ul>\n<p>从这四个部分其实就可以发现，作者也将其的一个学习思路贯彻在了写书的过程当中：第一部分主要讲解概念，第二部分讲解方法，第三部分讲的是如何举一反三，最后做了下总结。</p>\n<p>下面我们就一一刨开这四个部分去看看。</p>\n<h1 id=\"第一部分：整体性学习策略\"><a href=\"#第一部分：整体性学习策略\" class=\"headerlink\" title=\"第一部分：整体性学习策略\"></a>第一部分：整体性学习策略</h1><p>首先作者解释了一下，什么是“整体性学习”。整体性学习和机械记忆相反，机械记忆就是反复的记忆信息，希望通过不断地重复，来达到记忆某个信息（比如公式等等）的目的的一种学习方法。而整体性学习，就偏不做重复反复记忆的事情，而是建立知识与知识之间的联系（事实上，知识的学习从来就不是孤立的）。只要你建立的联系越多，你就记得越牢，理解得越好。</p>\n<h2 id=\"整体性学习的三个观点\"><a href=\"#整体性学习的三个观点\" class=\"headerlink\" title=\"整体性学习的三个观点\"></a>整体性学习的三个观点</h2><p>在整体性学习中，有三个观点（这三个观点理解起来较为隐晦，下面为我自己的理解，如有不当，欢迎指出）：</p>\n<ul>\n<li><p>结构</p>\n<ul>\n<li>结构其实就相当于一张地图，只有这张地图，你才能想去哪就去哪。而地图中的建筑就是知识点，道路就是他们之间的联系。可想而知，如果你没有建立起一个清楚的结构，那么你到达某个知识点就会特别困难。</li>\n</ul>\n</li>\n<li><p>模型</p>\n<ul>\n<li>模型就是知识的压缩，比如一本书最好的模型之一，就是书的目录，目录中已经将书本里的知识压缩到了极致，你只需看着目录通过联想，就可以回忆起书中的内容，而不需要把每行每字都记录下来。而在这你就可以将模型理解为，（结构）地图中的某座建筑。</li>\n</ul>\n</li>\n<li><p>高速公路</p>\n<ul>\n<li>高速公路就是结构与结构之间的联系。我们假设数学是一座城市，那么如我们在结构中定义的，他拥有自己城市的地图，我们可以在这个城市里来去自如。但是生物学是另一个城市，我们又该怎么从数学这座城市通往物理这座城市呢？这就需要我们建立两者之间的高速公路。<strong>高速公路正是创造的源泉。</strong></li>\n</ul>\n</li>\n</ul>\n<p>因此，将单一学科中的知识点压缩成<strong>模型</strong>，并建立知识点与知识点之间的联系，形成<strong>结构</strong>，再在不同学科中建立起联系，形成<strong>高速公路</strong>，这就是整体性学习的策略。</p>\n<p>了解了三个重要观点，我们再来说下如何获取知识。</p>\n<h2 id=\"整体性学习的顺序\"><a href=\"#整体性学习的顺序\" class=\"headerlink\" title=\"整体性学习的顺序\"></a>整体性学习的顺序</h2><h3 id=\"1-获取\"><a href=\"#1-获取\" class=\"headerlink\" title=\"1. 获取\"></a>1. 获取</h3><p>获取就是代表信息进入脑子的过程。因此在这个阶段，处理各种信息以及减少干扰的能力至关重要。比如，1. 阅读一页材料并达到90%的理解，你要花费多长时间？ 2. 一堂课，你真正听下去的有多少内容？只有高效的获取信息，才能为整体性学习打下良好的基础，否则就是无稽之谈。</p>\n<p>那么在获取这一阶段，有三个主要目标：</p>\n<h4 id=\"1）-简化\"><a href=\"#1）-简化\" class=\"headerlink\" title=\"1） 简化\"></a>1） 简化</h4><p>简化就是你要找出重要的东西和不重要的东西。在上学时期，我的老师经常说过：“一节课45分钟不需要你们45分钟都认真听，你可以开小差，但是当我讲到重点的时候，你得回过神来听我讲。”。</p>\n<h4 id=\"2）-容量\"><a href=\"#2）-容量\" class=\"headerlink\" title=\"2） 容量\"></a>2） 容量</h4><p>容量其实指的是你获取到的信息的多少。你只有获取尽可能多的信息，也就是容量越大，你才能知道得越多，理解得越深。打个比方，我们学习数学公式的时候，如果仅仅是看这个公式，是理解得不透彻的，自然也没办法记牢。如果能再多去理解这个公式要解决的问题、它发明的背景，那么你对它的理解就会更透彻。</p>\n<h4 id=\"3）-速度\"><a href=\"#3）-速度\" class=\"headerlink\" title=\"3） 速度\"></a>3） 速度</h4><p>速度是获取信息的最后一个目标，我们的目标是用最短的时间，获取最多的知识。（因此，专注、效率就显得尤为重要。）</p>\n<h3 id=\"2-理解\"><a href=\"#2-理解\" class=\"headerlink\" title=\"2. 理解\"></a>2. 理解</h3><blockquote>\n<p>整体性学习过程对信息的理解有三个层次，</p>\n</blockquote>\n<h3 id=\"3-拓展\"><a href=\"#3-拓展\" class=\"headerlink\" title=\"3. 拓展\"></a>3. 拓展</h3><h3 id=\"4-纠错\"><a href=\"#4-纠错\" class=\"headerlink\" title=\"4. 纠错\"></a>4. 纠错</h3><h3 id=\"5-应用\"><a href=\"#5-应用\" class=\"headerlink\" title=\"5. 应用\"></a>5. 应用</h3><h1 id=\"整体性学习技术\"><a href=\"#整体性学习技术\" class=\"headerlink\" title=\"整体性学习技术\"></a>整体性学习技术</h1><h1 id=\"超越整体性学习\"><a href=\"#超越整体性学习\" class=\"headerlink\" title=\"超越整体性学习\"></a>超越整体性学习</h1><h1 id=\"整体性学习小结\"><a href=\"#整体性学习小结\" class=\"headerlink\" title=\"整体性学习小结\"></a>整体性学习小结</h1>","site":{"data":{"links":{"Colin’s Nest":{"link":"http://colin1994.github.io/","avatar":"http://example.com/avatar.png"},"Vong":{"link":"https://vongloo.me/","avatar":"http://example.com/avatar.png"},"Punmy":{"link":"https://punmy.cn/","avatar":"http://example.com/avatar.png"},"细语呢喃":{"link":"https://www.hrwhisper.me/","avatar":"http://example.com/avatar.png"},"栖迟于一丘":{"link":"https://www.hongweipeng.com/","avatar":"http://example.com/avatar.png"},"B1ueW01f":{"link":"https://www.b1uew01f.net/","avatar":"http://example.com/avatar.png"},"忘归":{"link":"http://jalan.space/","avatar":"http://example.com/avatar.png"},"进阶者":{"link":"https://ruphi.cn/","avatar":"http://example.com/avatar.png"},"LIZIMEOW'S BLOG":{"link":"http://lizimeow.cn/","avatar":"http://example.com/avatar.png"},"Saitjr":{"link":"http://www.saitjr.com/","avatar":null}}}},"excerpt":"","more":"<p>从高中开始，我开始逐渐意识到“学习方法”这件事，而当我开始不断地在学业上尝试不同的学习方法之后，我对事半功倍这个词有了新的认识，并且在高考也考出了一个超常的成绩（虽然也没有多好）。从那以后，我都会有意无意地去学习不同的学习策略，并且非常渴望能有快速学习掌握某一门技术及知识的能力。就如《如何高效学习》书中的序篇所说的那样：</p>\n<blockquote>\n<p>（本书）其主旨在于打通现在所谓的专业壁垒。目前流行所谓的知识专业性，当然我并不否认，但是知识本身是没有疆界的，如何通过自身的努力和创造性将各种专业知识有机地融合在一起，然后创造性地解决问题才是关键。</p>\n</blockquote>\n<p>这个观点和我之前的想法不谋而合，因此在这半个月里，我断断续续地读完了《如何高效学习》这本书，特此也做下记录及心得。</p>\n<p>从整体来看，这本书共分为四个部分。</p>\n<ul>\n<li>整体性学习策略</li>\n<li>整体性学习技术</li>\n<li>超越整体性学习</li>\n<li>整体性学习小结</li>\n</ul>\n<p>从这四个部分其实就可以发现，作者也将其的一个学习思路贯彻在了写书的过程当中：第一部分主要讲解概念，第二部分讲解方法，第三部分讲的是如何举一反三，最后做了下总结。</p>\n<p>下面我们就一一刨开这四个部分去看看。</p>\n<h1 id=\"第一部分：整体性学习策略\"><a href=\"#第一部分：整体性学习策略\" class=\"headerlink\" title=\"第一部分：整体性学习策略\"></a>第一部分：整体性学习策略</h1><p>首先作者解释了一下，什么是“整体性学习”。整体性学习和机械记忆相反，机械记忆就是反复的记忆信息，希望通过不断地重复，来达到记忆某个信息（比如公式等等）的目的的一种学习方法。而整体性学习，就偏不做重复反复记忆的事情，而是建立知识与知识之间的联系（事实上，知识的学习从来就不是孤立的）。只要你建立的联系越多，你就记得越牢，理解得越好。</p>\n<h2 id=\"整体性学习的三个观点\"><a href=\"#整体性学习的三个观点\" class=\"headerlink\" title=\"整体性学习的三个观点\"></a>整体性学习的三个观点</h2><p>在整体性学习中，有三个观点（这三个观点理解起来较为隐晦，下面为我自己的理解，如有不当，欢迎指出）：</p>\n<ul>\n<li><p>结构</p>\n<ul>\n<li>结构其实就相当于一张地图，只有这张地图，你才能想去哪就去哪。而地图中的建筑就是知识点，道路就是他们之间的联系。可想而知，如果你没有建立起一个清楚的结构，那么你到达某个知识点就会特别困难。</li>\n</ul>\n</li>\n<li><p>模型</p>\n<ul>\n<li>模型就是知识的压缩，比如一本书最好的模型之一，就是书的目录，目录中已经将书本里的知识压缩到了极致，你只需看着目录通过联想，就可以回忆起书中的内容，而不需要把每行每字都记录下来。而在这你就可以将模型理解为，（结构）地图中的某座建筑。</li>\n</ul>\n</li>\n<li><p>高速公路</p>\n<ul>\n<li>高速公路就是结构与结构之间的联系。我们假设数学是一座城市，那么如我们在结构中定义的，他拥有自己城市的地图，我们可以在这个城市里来去自如。但是生物学是另一个城市，我们又该怎么从数学这座城市通往物理这座城市呢？这就需要我们建立两者之间的高速公路。<strong>高速公路正是创造的源泉。</strong></li>\n</ul>\n</li>\n</ul>\n<p>因此，将单一学科中的知识点压缩成<strong>模型</strong>，并建立知识点与知识点之间的联系，形成<strong>结构</strong>，再在不同学科中建立起联系，形成<strong>高速公路</strong>，这就是整体性学习的策略。</p>\n<p>了解了三个重要观点，我们再来说下如何获取知识。</p>\n<h2 id=\"整体性学习的顺序\"><a href=\"#整体性学习的顺序\" class=\"headerlink\" title=\"整体性学习的顺序\"></a>整体性学习的顺序</h2><h3 id=\"1-获取\"><a href=\"#1-获取\" class=\"headerlink\" title=\"1. 获取\"></a>1. 获取</h3><p>获取就是代表信息进入脑子的过程。因此在这个阶段，处理各种信息以及减少干扰的能力至关重要。比如，1. 阅读一页材料并达到90%的理解，你要花费多长时间？ 2. 一堂课，你真正听下去的有多少内容？只有高效的获取信息，才能为整体性学习打下良好的基础，否则就是无稽之谈。</p>\n<p>那么在获取这一阶段，有三个主要目标：</p>\n<h4 id=\"1）-简化\"><a href=\"#1）-简化\" class=\"headerlink\" title=\"1） 简化\"></a>1） 简化</h4><p>简化就是你要找出重要的东西和不重要的东西。在上学时期，我的老师经常说过：“一节课45分钟不需要你们45分钟都认真听，你可以开小差，但是当我讲到重点的时候，你得回过神来听我讲。”。</p>\n<h4 id=\"2）-容量\"><a href=\"#2）-容量\" class=\"headerlink\" title=\"2） 容量\"></a>2） 容量</h4><p>容量其实指的是你获取到的信息的多少。你只有获取尽可能多的信息，也就是容量越大，你才能知道得越多，理解得越深。打个比方，我们学习数学公式的时候，如果仅仅是看这个公式，是理解得不透彻的，自然也没办法记牢。如果能再多去理解这个公式要解决的问题、它发明的背景，那么你对它的理解就会更透彻。</p>\n<h4 id=\"3）-速度\"><a href=\"#3）-速度\" class=\"headerlink\" title=\"3） 速度\"></a>3） 速度</h4><p>速度是获取信息的最后一个目标，我们的目标是用最短的时间，获取最多的知识。（因此，专注、效率就显得尤为重要。）</p>\n<h3 id=\"2-理解\"><a href=\"#2-理解\" class=\"headerlink\" title=\"2. 理解\"></a>2. 理解</h3><blockquote>\n<p>整体性学习过程对信息的理解有三个层次，</p>\n</blockquote>\n<h3 id=\"3-拓展\"><a href=\"#3-拓展\" class=\"headerlink\" title=\"3. 拓展\"></a>3. 拓展</h3><h3 id=\"4-纠错\"><a href=\"#4-纠错\" class=\"headerlink\" title=\"4. 纠错\"></a>4. 纠错</h3><h3 id=\"5-应用\"><a href=\"#5-应用\" class=\"headerlink\" title=\"5. 应用\"></a>5. 应用</h3><h1 id=\"整体性学习技术\"><a href=\"#整体性学习技术\" class=\"headerlink\" title=\"整体性学习技术\"></a>整体性学习技术</h1><h1 id=\"超越整体性学习\"><a href=\"#超越整体性学习\" class=\"headerlink\" title=\"超越整体性学习\"></a>超越整体性学习</h1><h1 id=\"整体性学习小结\"><a href=\"#整体性学习小结\" class=\"headerlink\" title=\"整体性学习小结\"></a>整体性学习小结</h1>"},{"title":"ARTS挑战-第一周","date":"2019-03-25T08:25:19.000Z","_content":"\n# 什么是ARTS？\n\n> 1.Algorithm：每周至少做一个 leetcode 的算法题\n> 2.Review：阅读并点评至少一篇英文技术文章\n> 3.Tip：学习至少一个技术技巧\n> 4.Share：分享一篇有观点和思考的技术文章\n\n\n# Algorithm\n\n**Q:**\n\nGiven an array of integers, return indices of the two numbers such that they add up to a specific target.\n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\n\nExample:\n\n```\nGiven nums = [2, 7, 11, 15], target = 9,\n\nBecause nums[0] + nums[1] = 2 + 7 = 9,\nreturn [0, 1].\n```\n\n**A:**\n\n```swift\nclass Solution {\n    func twoSum(_ nums: [Int], _ target: Int) -> [Int] {\n        for (i, firstItem) in nums.enumerated() {\n            for j in i+1..<nums.count {\n                let secondItem = nums[j]\n                let sum = firstItem + secondItem\n                if sum == target {\n                    return [i, j]\n                }\n            }\n        }\n        \n        return []\n    }\n}\n```\n\n# Review\n\n这周分享的一篇技术文章是[Designing a workflow with functions that are capable of failing](https://medium.com/genesis-media/designing-a-workflow-with-functions-that-are-capable-of-failing-c1fb796aa084)，主要介绍了更好的错误处理工作流，包括Swift里标准库新加入的Result<T>，以及适配重试网络请求等逻辑。\n（这两天找个时间翻译一下）\n\n# Tip\n\n这周在写Swift的时候，由于我在一个变量的didSet中加入了一些处理的方式，在某些情况下，需要触发变量的didSet方法，于是就会有这样的代码：`self.model = self.model`，这个时候Xcode会报警：`assign a property to itself`。所以在Swift里，是不能把自己赋给自己的。\n\n怎么解决呢？\n\n```swift\nlet temp = self.model\nself.model = temp\n```\n\n这样子就简单解决了。可是这样子其他想 assign a property to itself 的地方就得也这么写一遍，有点繁琐。于是就在思考有没有更好的办法呢？\n\n**可以通过自定义operator**\n\n```swift\nprefix operator <<\nprefix func << <T: Any>(t: T) -> T {\n    let temp = t\n    return temp\n}\n```\n\n这样在想要把自己赋给自己的地方这么写就行了\n\n```swift\nself.model <<= self.model\n```\n\n\n# Share\n\n这周重温了一下objc的 [行为驱动开发](https://objccn.io/issue-15-1/)\n\n> 有时候改变自己的思维方式真不是一件容易的事，但是当真的能接受新的思考方式并转变的话，一定会有更大的突破的。\n\n","source":"_posts/arts-first-week.md","raw":"---\ntitle: ARTS挑战-第一周\ndate: 2019-03-25 16:25:19\ntags:\n- ARTS\n---\n\n# 什么是ARTS？\n\n> 1.Algorithm：每周至少做一个 leetcode 的算法题\n> 2.Review：阅读并点评至少一篇英文技术文章\n> 3.Tip：学习至少一个技术技巧\n> 4.Share：分享一篇有观点和思考的技术文章\n\n\n# Algorithm\n\n**Q:**\n\nGiven an array of integers, return indices of the two numbers such that they add up to a specific target.\n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\n\nExample:\n\n```\nGiven nums = [2, 7, 11, 15], target = 9,\n\nBecause nums[0] + nums[1] = 2 + 7 = 9,\nreturn [0, 1].\n```\n\n**A:**\n\n```swift\nclass Solution {\n    func twoSum(_ nums: [Int], _ target: Int) -> [Int] {\n        for (i, firstItem) in nums.enumerated() {\n            for j in i+1..<nums.count {\n                let secondItem = nums[j]\n                let sum = firstItem + secondItem\n                if sum == target {\n                    return [i, j]\n                }\n            }\n        }\n        \n        return []\n    }\n}\n```\n\n# Review\n\n这周分享的一篇技术文章是[Designing a workflow with functions that are capable of failing](https://medium.com/genesis-media/designing-a-workflow-with-functions-that-are-capable-of-failing-c1fb796aa084)，主要介绍了更好的错误处理工作流，包括Swift里标准库新加入的Result<T>，以及适配重试网络请求等逻辑。\n（这两天找个时间翻译一下）\n\n# Tip\n\n这周在写Swift的时候，由于我在一个变量的didSet中加入了一些处理的方式，在某些情况下，需要触发变量的didSet方法，于是就会有这样的代码：`self.model = self.model`，这个时候Xcode会报警：`assign a property to itself`。所以在Swift里，是不能把自己赋给自己的。\n\n怎么解决呢？\n\n```swift\nlet temp = self.model\nself.model = temp\n```\n\n这样子就简单解决了。可是这样子其他想 assign a property to itself 的地方就得也这么写一遍，有点繁琐。于是就在思考有没有更好的办法呢？\n\n**可以通过自定义operator**\n\n```swift\nprefix operator <<\nprefix func << <T: Any>(t: T) -> T {\n    let temp = t\n    return temp\n}\n```\n\n这样在想要把自己赋给自己的地方这么写就行了\n\n```swift\nself.model <<= self.model\n```\n\n\n# Share\n\n这周重温了一下objc的 [行为驱动开发](https://objccn.io/issue-15-1/)\n\n> 有时候改变自己的思维方式真不是一件容易的事，但是当真的能接受新的思考方式并转变的话，一定会有更大的突破的。\n\n","slug":"arts-first-week","published":1,"updated":"2022-10-25T02:57:42.630Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9nmc47y00028wwxztk1zuec","content":"<h1 id=\"什么是ARTS？\"><a href=\"#什么是ARTS？\" class=\"headerlink\" title=\"什么是ARTS？\"></a>什么是ARTS？</h1><blockquote>\n<p>1.Algorithm：每周至少做一个 leetcode 的算法题<br>2.Review：阅读并点评至少一篇英文技术文章<br>3.Tip：学习至少一个技术技巧<br>4.Share：分享一篇有观点和思考的技术文章</p>\n</blockquote>\n<h1 id=\"Algorithm\"><a href=\"#Algorithm\" class=\"headerlink\" title=\"Algorithm\"></a>Algorithm</h1><p><strong>Q:</strong></p>\n<p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.</p>\n<p>You may assume that each input would have exactly one solution, and you may not use the same element twice.</p>\n<p>Example:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Given nums = [2, 7, 11, 15], target = 9,</span><br><span class=\"line\"></span><br><span class=\"line\">Because nums[0] + nums[1] = 2 + 7 = 9,</span><br><span class=\"line\">return [0, 1].</span><br></pre></td></tr></table></figure>\n<p><strong>A:</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">twoSum</span><span class=\"params\">(<span class=\"number\">_</span> nums: [Int], <span class=\"number\">_</span> target: Int)</span></span> -&gt; [<span class=\"type\">Int</span>] &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i, firstItem) <span class=\"keyword\">in</span> nums.enumerated() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> i+<span class=\"number\">1</span>..&lt;nums.<span class=\"built_in\">count</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> secondItem = nums[j]</span><br><span class=\"line\">                <span class=\"keyword\">let</span> sum = firstItem + secondItem</span><br><span class=\"line\">                <span class=\"keyword\">if</span> sum == target &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> [i, j]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Review\"><a href=\"#Review\" class=\"headerlink\" title=\"Review\"></a>Review</h1><p>这周分享的一篇技术文章是<a href=\"https://medium.com/genesis-media/designing-a-workflow-with-functions-that-are-capable-of-failing-c1fb796aa084\" target=\"_blank\" rel=\"noopener\">Designing a workflow with functions that are capable of failing</a>，主要介绍了更好的错误处理工作流，包括Swift里标准库新加入的Result<t>，以及适配重试网络请求等逻辑。<br>（这两天找个时间翻译一下）</t></p>\n<h1 id=\"Tip\"><a href=\"#Tip\" class=\"headerlink\" title=\"Tip\"></a>Tip</h1><p>这周在写Swift的时候，由于我在一个变量的didSet中加入了一些处理的方式，在某些情况下，需要触发变量的didSet方法，于是就会有这样的代码：<code>self.model = self.model</code>，这个时候Xcode会报警：<code>assign a property to itself</code>。所以在Swift里，是不能把自己赋给自己的。</p>\n<p>怎么解决呢？</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> temp = <span class=\"keyword\">self</span>.model</span><br><span class=\"line\"><span class=\"keyword\">self</span>.model = temp</span><br></pre></td></tr></table></figure>\n<p>这样子就简单解决了。可是这样子其他想 assign a property to itself 的地方就得也这么写一遍，有点繁琐。于是就在思考有没有更好的办法呢？</p>\n<p><strong>可以通过自定义operator</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">prefix</span> <span class=\"keyword\">operator</span> &lt;&lt;</span><br><span class=\"line\"><span class=\"keyword\">prefix</span> <span class=\"function\"><span class=\"keyword\">func</span> &lt;&lt; &lt;T: Any&gt;<span class=\"params\">(t: T)</span></span> -&gt; <span class=\"type\">T</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> temp = t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> temp</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样在想要把自己赋给自己的地方这么写就行了</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">self</span>.model &lt;&lt;= <span class=\"keyword\">self</span>.model</span><br></pre></td></tr></table></figure>\n<h1 id=\"Share\"><a href=\"#Share\" class=\"headerlink\" title=\"Share\"></a>Share</h1><p>这周重温了一下objc的 <a href=\"https://objccn.io/issue-15-1/\" target=\"_blank\" rel=\"noopener\">行为驱动开发</a></p>\n<blockquote>\n<p>有时候改变自己的思维方式真不是一件容易的事，但是当真的能接受新的思考方式并转变的话，一定会有更大的突破的。</p>\n</blockquote>\n","site":{"data":{"links":{"Colin’s Nest":{"link":"http://colin1994.github.io/","avatar":"http://example.com/avatar.png"},"Vong":{"link":"https://vongloo.me/","avatar":"http://example.com/avatar.png"},"Punmy":{"link":"https://punmy.cn/","avatar":"http://example.com/avatar.png"},"细语呢喃":{"link":"https://www.hrwhisper.me/","avatar":"http://example.com/avatar.png"},"栖迟于一丘":{"link":"https://www.hongweipeng.com/","avatar":"http://example.com/avatar.png"},"B1ueW01f":{"link":"https://www.b1uew01f.net/","avatar":"http://example.com/avatar.png"},"忘归":{"link":"http://jalan.space/","avatar":"http://example.com/avatar.png"},"进阶者":{"link":"https://ruphi.cn/","avatar":"http://example.com/avatar.png"},"LIZIMEOW'S BLOG":{"link":"http://lizimeow.cn/","avatar":"http://example.com/avatar.png"},"Saitjr":{"link":"http://www.saitjr.com/","avatar":null}}}},"excerpt":"","more":"<h1 id=\"什么是ARTS？\"><a href=\"#什么是ARTS？\" class=\"headerlink\" title=\"什么是ARTS？\"></a>什么是ARTS？</h1><blockquote>\n<p>1.Algorithm：每周至少做一个 leetcode 的算法题<br>2.Review：阅读并点评至少一篇英文技术文章<br>3.Tip：学习至少一个技术技巧<br>4.Share：分享一篇有观点和思考的技术文章</p>\n</blockquote>\n<h1 id=\"Algorithm\"><a href=\"#Algorithm\" class=\"headerlink\" title=\"Algorithm\"></a>Algorithm</h1><p><strong>Q:</strong></p>\n<p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.</p>\n<p>You may assume that each input would have exactly one solution, and you may not use the same element twice.</p>\n<p>Example:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Given nums = [2, 7, 11, 15], target = 9,</span><br><span class=\"line\"></span><br><span class=\"line\">Because nums[0] + nums[1] = 2 + 7 = 9,</span><br><span class=\"line\">return [0, 1].</span><br></pre></td></tr></table></figure>\n<p><strong>A:</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">twoSum</span><span class=\"params\">(<span class=\"number\">_</span> nums: [Int], <span class=\"number\">_</span> target: Int)</span></span> -&gt; [<span class=\"type\">Int</span>] &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i, firstItem) <span class=\"keyword\">in</span> nums.enumerated() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> i+<span class=\"number\">1</span>..&lt;nums.<span class=\"built_in\">count</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> secondItem = nums[j]</span><br><span class=\"line\">                <span class=\"keyword\">let</span> sum = firstItem + secondItem</span><br><span class=\"line\">                <span class=\"keyword\">if</span> sum == target &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> [i, j]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Review\"><a href=\"#Review\" class=\"headerlink\" title=\"Review\"></a>Review</h1><p>这周分享的一篇技术文章是<a href=\"https://medium.com/genesis-media/designing-a-workflow-with-functions-that-are-capable-of-failing-c1fb796aa084\" target=\"_blank\" rel=\"noopener\">Designing a workflow with functions that are capable of failing</a>，主要介绍了更好的错误处理工作流，包括Swift里标准库新加入的Result<t>，以及适配重试网络请求等逻辑。<br>（这两天找个时间翻译一下）</t></p>\n<h1 id=\"Tip\"><a href=\"#Tip\" class=\"headerlink\" title=\"Tip\"></a>Tip</h1><p>这周在写Swift的时候，由于我在一个变量的didSet中加入了一些处理的方式，在某些情况下，需要触发变量的didSet方法，于是就会有这样的代码：<code>self.model = self.model</code>，这个时候Xcode会报警：<code>assign a property to itself</code>。所以在Swift里，是不能把自己赋给自己的。</p>\n<p>怎么解决呢？</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> temp = <span class=\"keyword\">self</span>.model</span><br><span class=\"line\"><span class=\"keyword\">self</span>.model = temp</span><br></pre></td></tr></table></figure>\n<p>这样子就简单解决了。可是这样子其他想 assign a property to itself 的地方就得也这么写一遍，有点繁琐。于是就在思考有没有更好的办法呢？</p>\n<p><strong>可以通过自定义operator</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">prefix</span> <span class=\"keyword\">operator</span> &lt;&lt;</span><br><span class=\"line\"><span class=\"keyword\">prefix</span> <span class=\"function\"><span class=\"keyword\">func</span> &lt;&lt; &lt;T: Any&gt;<span class=\"params\">(t: T)</span></span> -&gt; <span class=\"type\">T</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> temp = t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> temp</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样在想要把自己赋给自己的地方这么写就行了</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">self</span>.model &lt;&lt;= <span class=\"keyword\">self</span>.model</span><br></pre></td></tr></table></figure>\n<h1 id=\"Share\"><a href=\"#Share\" class=\"headerlink\" title=\"Share\"></a>Share</h1><p>这周重温了一下objc的 <a href=\"https://objccn.io/issue-15-1/\" target=\"_blank\" rel=\"noopener\">行为驱动开发</a></p>\n<blockquote>\n<p>有时候改变自己的思维方式真不是一件容易的事，但是当真的能接受新的思考方式并转变的话，一定会有更大的突破的。</p>\n</blockquote>\n"},{"title":"ARTS挑战-第二周","date":"2019-03-29T08:16:23.000Z","_content":"\n# 什么是ARTS？\n\n> 1.Algorithm：每周至少做一个 leetcode 的算法题\n> 2.Review：阅读并点评至少一篇英文技术文章\n> 3.Tip：学习至少一个技术技巧\n> 4.Share：分享一篇有观点和思考的技术文章\n\n# Algorithm\n\n> 一开始以为这道题目挺难的，后来其实慢慢的研究下去发现还好，就是2数相加，需要考虑进位的问题。代码提交后看了一下Solution，发现思路大致也差不多。一开始还怀疑自己，没想到能抓到老鼠的都是好猫。\n\n**Q:**\n\nYou are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.\n\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\n\nExample:\n\n```\nInput: (2 -> 4 -> 3) + (5 -> 6 -> 4)\nOutput: 7 -> 0 -> 8\nExplanation: 342 + 465 = 807.\n```\n\n**A:**\n\n```swift\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.next = nil\n *     }\n * }\n */\nclass Solution {\n    /// 两个数字相加，并返回十位和个位\n    func addNum(_ num1: Int, _ num2: Int) -> (high: Int, low: Int) {\n        var resultH = 0\n        var resultL = 0\n        \n        let sum = num1 + num2\n        \n        if sum >= 10 {\n            resultH = 1\n            resultL = sum - 10\n        } else {\n            resultL = sum\n        }\n        return (resultH, resultL)\n    }\n    \n    func addTwoNumbers(_ l1: ListNode?, _ l2: ListNode?) -> ListNode? {\n        if let l1 = l1, let l2 = l2 {\n            var node1: ListNode? = l1\n            var node2: ListNode? = l2\n            var cursor: ListNode?\n            \n            var waitToAdd: Int = 0\n            var result: ListNode? = ListNode(-1)\n\n            while true {\n                // 当两个node节点均为空了停止循环\n                if node1 == nil, node2 == nil {\n                    break\n                }\n                \n                // 构建空节点\n                if node1 == nil {\n                    node1 = ListNode(0)\n                }\n                \n                if node2 == nil {\n                    node2 = ListNode(0)\n                }\n                \n                let r = addNum(node1!.val, node2!.val)\n                let t = addNum(r.low, waitToAdd)\n                \n                if t.high == 1 {\n                    waitToAdd = t.high\n                } else {\n                    waitToAdd = r.high\n                }\n                \n                if result?.val == -1 {\n                    result?.val = t.low\n                    cursor = result\n                } else {\n                    let node = ListNode(t.low)\n                    cursor?.next = node\n                    cursor = node\n                }\n                \n                node1 = node1!.next\n                node2 = node2!.next\n            }\n            \n            if waitToAdd != 0 {\n                cursor?.next = ListNode(1)\n            }\n            \n            return result\n        }\n        \n        if l1 == nil {\n            return l2\n        }\n        \n        if l2 == nil {\n            return l1\n        }\n        \n        return nil\n    }\n}\n```\n\n# Review\n\n这一篇 [Pro Pattern-Matching in Swift](https://www.bignerdranch.com/blog/pro-pattern-matching-in-swift/) 把 Swift 中的 Pattern[ˈpatərn]-Matching 讲得比较详细了。 Pattern-Matching 是 Swift 中一个能把代码写得整洁又安全的方式，必须掌握。\n \n# Tip\n\nSwift 中部分高阶函数对比（以操作数组为例）：\n`map` vs `flatMap` vs `compactMap` vs `filter` vs `reduce`\n\n### map\n\n将数组中的每个元素进行一次操作\n\n### flatMap\n\n同map，但是不会返回nil，且会对数组中的 `optional` 进行解包\n\n### compactMap\n\n如果 `flatMap` 的回调中可能返回 `optional`，则需要使用 `compactMap`\n\n> 'flatMap' is deprecated: Please use compactMap(_:) for the case where closure returns an optional value\n\n### filter\n\n顾名思义，可以按照 `closure` 中的标准，把数组中的一些元素过滤掉\n\n### reduce\n\n`reduce` 就是可以把数组拍平，比如一个 `[String]`，用 `reduce` 可以让它返回成 `String`\n\n# Share\n\n[Notes to Myself on Software Engineering](https://shixiong.name/2019/03/29/note-to-myself-on-software-engineering/)，这是 Keras 的开发者 François Chollet 整理的笔记，里面有很多思考值得学习。由于写得太好了，我把它翻译了一下。\n\n\n\n","source":"_posts/arts-second-week.md","raw":"---\ntitle: ARTS挑战-第二周\ndate: 2019-03-29 16:16:23\ntags:\n- ARTS\n---\n\n# 什么是ARTS？\n\n> 1.Algorithm：每周至少做一个 leetcode 的算法题\n> 2.Review：阅读并点评至少一篇英文技术文章\n> 3.Tip：学习至少一个技术技巧\n> 4.Share：分享一篇有观点和思考的技术文章\n\n# Algorithm\n\n> 一开始以为这道题目挺难的，后来其实慢慢的研究下去发现还好，就是2数相加，需要考虑进位的问题。代码提交后看了一下Solution，发现思路大致也差不多。一开始还怀疑自己，没想到能抓到老鼠的都是好猫。\n\n**Q:**\n\nYou are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.\n\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\n\nExample:\n\n```\nInput: (2 -> 4 -> 3) + (5 -> 6 -> 4)\nOutput: 7 -> 0 -> 8\nExplanation: 342 + 465 = 807.\n```\n\n**A:**\n\n```swift\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.next = nil\n *     }\n * }\n */\nclass Solution {\n    /// 两个数字相加，并返回十位和个位\n    func addNum(_ num1: Int, _ num2: Int) -> (high: Int, low: Int) {\n        var resultH = 0\n        var resultL = 0\n        \n        let sum = num1 + num2\n        \n        if sum >= 10 {\n            resultH = 1\n            resultL = sum - 10\n        } else {\n            resultL = sum\n        }\n        return (resultH, resultL)\n    }\n    \n    func addTwoNumbers(_ l1: ListNode?, _ l2: ListNode?) -> ListNode? {\n        if let l1 = l1, let l2 = l2 {\n            var node1: ListNode? = l1\n            var node2: ListNode? = l2\n            var cursor: ListNode?\n            \n            var waitToAdd: Int = 0\n            var result: ListNode? = ListNode(-1)\n\n            while true {\n                // 当两个node节点均为空了停止循环\n                if node1 == nil, node2 == nil {\n                    break\n                }\n                \n                // 构建空节点\n                if node1 == nil {\n                    node1 = ListNode(0)\n                }\n                \n                if node2 == nil {\n                    node2 = ListNode(0)\n                }\n                \n                let r = addNum(node1!.val, node2!.val)\n                let t = addNum(r.low, waitToAdd)\n                \n                if t.high == 1 {\n                    waitToAdd = t.high\n                } else {\n                    waitToAdd = r.high\n                }\n                \n                if result?.val == -1 {\n                    result?.val = t.low\n                    cursor = result\n                } else {\n                    let node = ListNode(t.low)\n                    cursor?.next = node\n                    cursor = node\n                }\n                \n                node1 = node1!.next\n                node2 = node2!.next\n            }\n            \n            if waitToAdd != 0 {\n                cursor?.next = ListNode(1)\n            }\n            \n            return result\n        }\n        \n        if l1 == nil {\n            return l2\n        }\n        \n        if l2 == nil {\n            return l1\n        }\n        \n        return nil\n    }\n}\n```\n\n# Review\n\n这一篇 [Pro Pattern-Matching in Swift](https://www.bignerdranch.com/blog/pro-pattern-matching-in-swift/) 把 Swift 中的 Pattern[ˈpatərn]-Matching 讲得比较详细了。 Pattern-Matching 是 Swift 中一个能把代码写得整洁又安全的方式，必须掌握。\n \n# Tip\n\nSwift 中部分高阶函数对比（以操作数组为例）：\n`map` vs `flatMap` vs `compactMap` vs `filter` vs `reduce`\n\n### map\n\n将数组中的每个元素进行一次操作\n\n### flatMap\n\n同map，但是不会返回nil，且会对数组中的 `optional` 进行解包\n\n### compactMap\n\n如果 `flatMap` 的回调中可能返回 `optional`，则需要使用 `compactMap`\n\n> 'flatMap' is deprecated: Please use compactMap(_:) for the case where closure returns an optional value\n\n### filter\n\n顾名思义，可以按照 `closure` 中的标准，把数组中的一些元素过滤掉\n\n### reduce\n\n`reduce` 就是可以把数组拍平，比如一个 `[String]`，用 `reduce` 可以让它返回成 `String`\n\n# Share\n\n[Notes to Myself on Software Engineering](https://shixiong.name/2019/03/29/note-to-myself-on-software-engineering/)，这是 Keras 的开发者 François Chollet 整理的笔记，里面有很多思考值得学习。由于写得太好了，我把它翻译了一下。\n\n\n\n","slug":"arts-second-week","published":1,"updated":"2022-10-25T02:57:42.630Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9nmc48300048wwxhow0ile1","content":"<h1 id=\"什么是ARTS？\"><a href=\"#什么是ARTS？\" class=\"headerlink\" title=\"什么是ARTS？\"></a>什么是ARTS？</h1><blockquote>\n<p>1.Algorithm：每周至少做一个 leetcode 的算法题<br>2.Review：阅读并点评至少一篇英文技术文章<br>3.Tip：学习至少一个技术技巧<br>4.Share：分享一篇有观点和思考的技术文章</p>\n</blockquote>\n<h1 id=\"Algorithm\"><a href=\"#Algorithm\" class=\"headerlink\" title=\"Algorithm\"></a>Algorithm</h1><blockquote>\n<p>一开始以为这道题目挺难的，后来其实慢慢的研究下去发现还好，就是2数相加，需要考虑进位的问题。代码提交后看了一下Solution，发现思路大致也差不多。一开始还怀疑自己，没想到能抓到老鼠的都是好猫。</p>\n</blockquote>\n<p><strong>Q:</strong></p>\n<p>You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p>\n<p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>\n<p>Example:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</span><br><span class=\"line\">Output: 7 -&gt; 0 -&gt; 8</span><br><span class=\"line\">Explanation: 342 + 465 = 807.</span><br></pre></td></tr></table></figure>\n<p><strong>A:</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     public var val: Int</span></span><br><span class=\"line\"><span class=\"comment\"> *     public var next: ListNode?</span></span><br><span class=\"line\"><span class=\"comment\"> *     public init(_ val: Int) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         self.val = val</span></span><br><span class=\"line\"><span class=\"comment\"> *         self.next = nil</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/// 两个数字相加，并返回十位和个位</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">addNum</span><span class=\"params\">(<span class=\"number\">_</span> num1: Int, <span class=\"number\">_</span> num2: Int)</span></span> -&gt; (high: <span class=\"type\">Int</span>, low: <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> resultH = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> resultL = <span class=\"number\">0</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">let</span> sum = num1 + num2</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> sum &gt;= <span class=\"number\">10</span> &#123;</span><br><span class=\"line\">            resultH = <span class=\"number\">1</span></span><br><span class=\"line\">            resultL = sum - <span class=\"number\">10</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            resultL = sum</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (resultH, resultL)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">addTwoNumbers</span><span class=\"params\">(<span class=\"number\">_</span> l1: ListNode?, <span class=\"number\">_</span> l2: ListNode?)</span></span> -&gt; <span class=\"type\">ListNode</span>? &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> l1 = l1, <span class=\"keyword\">let</span> l2 = l2 &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> node1: <span class=\"type\">ListNode</span>? = l1</span><br><span class=\"line\">            <span class=\"keyword\">var</span> node2: <span class=\"type\">ListNode</span>? = l2</span><br><span class=\"line\">            <span class=\"keyword\">var</span> cursor: <span class=\"type\">ListNode</span>?</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">var</span> waitToAdd: <span class=\"type\">Int</span> = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> result: <span class=\"type\">ListNode</span>? = <span class=\"type\">ListNode</span>(-<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">while</span> <span class=\"literal\">true</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 当两个node节点均为空了停止循环</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> node1 == <span class=\"literal\">nil</span>, node2 == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"comment\">// 构建空节点</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> node1 == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">                    node1 = <span class=\"type\">ListNode</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"keyword\">if</span> node2 == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">                    node2 = <span class=\"type\">ListNode</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"keyword\">let</span> r = addNum(node1!.val, node2!.val)</span><br><span class=\"line\">                <span class=\"keyword\">let</span> t = addNum(r.low, waitToAdd)</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"keyword\">if</span> t.high == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">                    waitToAdd = t.high</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    waitToAdd = r.high</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"keyword\">if</span> result?.val == -<span class=\"number\">1</span> &#123;</span><br><span class=\"line\">                    result?.val = t.low</span><br><span class=\"line\">                    cursor = result</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">let</span> node = <span class=\"type\">ListNode</span>(t.low)</span><br><span class=\"line\">                    cursor?.next = node</span><br><span class=\"line\">                    cursor = node</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">                node1 = node1!.next</span><br><span class=\"line\">                node2 = node2!.next</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span> waitToAdd != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">                cursor?.next = <span class=\"type\">ListNode</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">return</span> result</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> l1 == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> l2</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> l2 == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> l1</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Review\"><a href=\"#Review\" class=\"headerlink\" title=\"Review\"></a>Review</h1><p>这一篇 <a href=\"https://www.bignerdranch.com/blog/pro-pattern-matching-in-swift/\" target=\"_blank\" rel=\"noopener\">Pro Pattern-Matching in Swift</a> 把 Swift 中的 Pattern[ˈpatərn]-Matching 讲得比较详细了。 Pattern-Matching 是 Swift 中一个能把代码写得整洁又安全的方式，必须掌握。</p>\n<h1 id=\"Tip\"><a href=\"#Tip\" class=\"headerlink\" title=\"Tip\"></a>Tip</h1><p>Swift 中部分高阶函数对比（以操作数组为例）：<br><code>map</code> vs <code>flatMap</code> vs <code>compactMap</code> vs <code>filter</code> vs <code>reduce</code></p>\n<h3 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h3><p>将数组中的每个元素进行一次操作</p>\n<h3 id=\"flatMap\"><a href=\"#flatMap\" class=\"headerlink\" title=\"flatMap\"></a>flatMap</h3><p>同map，但是不会返回nil，且会对数组中的 <code>optional</code> 进行解包</p>\n<h3 id=\"compactMap\"><a href=\"#compactMap\" class=\"headerlink\" title=\"compactMap\"></a>compactMap</h3><p>如果 <code>flatMap</code> 的回调中可能返回 <code>optional</code>，则需要使用 <code>compactMap</code></p>\n<blockquote>\n<p>‘flatMap’ is deprecated: Please use compactMap(_:) for the case where closure returns an optional value</p>\n</blockquote>\n<h3 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a>filter</h3><p>顾名思义，可以按照 <code>closure</code> 中的标准，把数组中的一些元素过滤掉</p>\n<h3 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"reduce\"></a>reduce</h3><p><code>reduce</code> 就是可以把数组拍平，比如一个 <code>[String]</code>，用 <code>reduce</code> 可以让它返回成 <code>String</code></p>\n<h1 id=\"Share\"><a href=\"#Share\" class=\"headerlink\" title=\"Share\"></a>Share</h1><p><a href=\"https://shixiong.name/2019/03/29/note-to-myself-on-software-engineering/\">Notes to Myself on Software Engineering</a>，这是 Keras 的开发者 François Chollet 整理的笔记，里面有很多思考值得学习。由于写得太好了，我把它翻译了一下。</p>\n","site":{"data":{"links":{"Colin’s Nest":{"link":"http://colin1994.github.io/","avatar":"http://example.com/avatar.png"},"Vong":{"link":"https://vongloo.me/","avatar":"http://example.com/avatar.png"},"Punmy":{"link":"https://punmy.cn/","avatar":"http://example.com/avatar.png"},"细语呢喃":{"link":"https://www.hrwhisper.me/","avatar":"http://example.com/avatar.png"},"栖迟于一丘":{"link":"https://www.hongweipeng.com/","avatar":"http://example.com/avatar.png"},"B1ueW01f":{"link":"https://www.b1uew01f.net/","avatar":"http://example.com/avatar.png"},"忘归":{"link":"http://jalan.space/","avatar":"http://example.com/avatar.png"},"进阶者":{"link":"https://ruphi.cn/","avatar":"http://example.com/avatar.png"},"LIZIMEOW'S BLOG":{"link":"http://lizimeow.cn/","avatar":"http://example.com/avatar.png"},"Saitjr":{"link":"http://www.saitjr.com/","avatar":null}}}},"excerpt":"","more":"<h1 id=\"什么是ARTS？\"><a href=\"#什么是ARTS？\" class=\"headerlink\" title=\"什么是ARTS？\"></a>什么是ARTS？</h1><blockquote>\n<p>1.Algorithm：每周至少做一个 leetcode 的算法题<br>2.Review：阅读并点评至少一篇英文技术文章<br>3.Tip：学习至少一个技术技巧<br>4.Share：分享一篇有观点和思考的技术文章</p>\n</blockquote>\n<h1 id=\"Algorithm\"><a href=\"#Algorithm\" class=\"headerlink\" title=\"Algorithm\"></a>Algorithm</h1><blockquote>\n<p>一开始以为这道题目挺难的，后来其实慢慢的研究下去发现还好，就是2数相加，需要考虑进位的问题。代码提交后看了一下Solution，发现思路大致也差不多。一开始还怀疑自己，没想到能抓到老鼠的都是好猫。</p>\n</blockquote>\n<p><strong>Q:</strong></p>\n<p>You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p>\n<p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>\n<p>Example:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</span><br><span class=\"line\">Output: 7 -&gt; 0 -&gt; 8</span><br><span class=\"line\">Explanation: 342 + 465 = 807.</span><br></pre></td></tr></table></figure>\n<p><strong>A:</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     public var val: Int</span></span><br><span class=\"line\"><span class=\"comment\"> *     public var next: ListNode?</span></span><br><span class=\"line\"><span class=\"comment\"> *     public init(_ val: Int) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         self.val = val</span></span><br><span class=\"line\"><span class=\"comment\"> *         self.next = nil</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/// 两个数字相加，并返回十位和个位</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">addNum</span><span class=\"params\">(<span class=\"number\">_</span> num1: Int, <span class=\"number\">_</span> num2: Int)</span></span> -&gt; (high: <span class=\"type\">Int</span>, low: <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> resultH = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> resultL = <span class=\"number\">0</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">let</span> sum = num1 + num2</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> sum &gt;= <span class=\"number\">10</span> &#123;</span><br><span class=\"line\">            resultH = <span class=\"number\">1</span></span><br><span class=\"line\">            resultL = sum - <span class=\"number\">10</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            resultL = sum</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (resultH, resultL)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">addTwoNumbers</span><span class=\"params\">(<span class=\"number\">_</span> l1: ListNode?, <span class=\"number\">_</span> l2: ListNode?)</span></span> -&gt; <span class=\"type\">ListNode</span>? &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> l1 = l1, <span class=\"keyword\">let</span> l2 = l2 &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> node1: <span class=\"type\">ListNode</span>? = l1</span><br><span class=\"line\">            <span class=\"keyword\">var</span> node2: <span class=\"type\">ListNode</span>? = l2</span><br><span class=\"line\">            <span class=\"keyword\">var</span> cursor: <span class=\"type\">ListNode</span>?</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">var</span> waitToAdd: <span class=\"type\">Int</span> = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> result: <span class=\"type\">ListNode</span>? = <span class=\"type\">ListNode</span>(-<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">while</span> <span class=\"literal\">true</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 当两个node节点均为空了停止循环</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> node1 == <span class=\"literal\">nil</span>, node2 == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"comment\">// 构建空节点</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> node1 == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">                    node1 = <span class=\"type\">ListNode</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"keyword\">if</span> node2 == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">                    node2 = <span class=\"type\">ListNode</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"keyword\">let</span> r = addNum(node1!.val, node2!.val)</span><br><span class=\"line\">                <span class=\"keyword\">let</span> t = addNum(r.low, waitToAdd)</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"keyword\">if</span> t.high == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">                    waitToAdd = t.high</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    waitToAdd = r.high</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"keyword\">if</span> result?.val == -<span class=\"number\">1</span> &#123;</span><br><span class=\"line\">                    result?.val = t.low</span><br><span class=\"line\">                    cursor = result</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">let</span> node = <span class=\"type\">ListNode</span>(t.low)</span><br><span class=\"line\">                    cursor?.next = node</span><br><span class=\"line\">                    cursor = node</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">                node1 = node1!.next</span><br><span class=\"line\">                node2 = node2!.next</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span> waitToAdd != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">                cursor?.next = <span class=\"type\">ListNode</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">return</span> result</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> l1 == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> l2</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> l2 == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> l1</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Review\"><a href=\"#Review\" class=\"headerlink\" title=\"Review\"></a>Review</h1><p>这一篇 <a href=\"https://www.bignerdranch.com/blog/pro-pattern-matching-in-swift/\" target=\"_blank\" rel=\"noopener\">Pro Pattern-Matching in Swift</a> 把 Swift 中的 Pattern[ˈpatərn]-Matching 讲得比较详细了。 Pattern-Matching 是 Swift 中一个能把代码写得整洁又安全的方式，必须掌握。</p>\n<h1 id=\"Tip\"><a href=\"#Tip\" class=\"headerlink\" title=\"Tip\"></a>Tip</h1><p>Swift 中部分高阶函数对比（以操作数组为例）：<br><code>map</code> vs <code>flatMap</code> vs <code>compactMap</code> vs <code>filter</code> vs <code>reduce</code></p>\n<h3 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h3><p>将数组中的每个元素进行一次操作</p>\n<h3 id=\"flatMap\"><a href=\"#flatMap\" class=\"headerlink\" title=\"flatMap\"></a>flatMap</h3><p>同map，但是不会返回nil，且会对数组中的 <code>optional</code> 进行解包</p>\n<h3 id=\"compactMap\"><a href=\"#compactMap\" class=\"headerlink\" title=\"compactMap\"></a>compactMap</h3><p>如果 <code>flatMap</code> 的回调中可能返回 <code>optional</code>，则需要使用 <code>compactMap</code></p>\n<blockquote>\n<p>‘flatMap’ is deprecated: Please use compactMap(_:) for the case where closure returns an optional value</p>\n</blockquote>\n<h3 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a>filter</h3><p>顾名思义，可以按照 <code>closure</code> 中的标准，把数组中的一些元素过滤掉</p>\n<h3 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"reduce\"></a>reduce</h3><p><code>reduce</code> 就是可以把数组拍平，比如一个 <code>[String]</code>，用 <code>reduce</code> 可以让它返回成 <code>String</code></p>\n<h1 id=\"Share\"><a href=\"#Share\" class=\"headerlink\" title=\"Share\"></a>Share</h1><p><a href=\"https://shixiong.name/2019/03/29/note-to-myself-on-software-engineering/\">Notes to Myself on Software Engineering</a>，这是 Keras 的开发者 François Chollet 整理的笔记，里面有很多思考值得学习。由于写得太好了，我把它翻译了一下。</p>\n"},{"title":"断点调试 autolayout","date":"2016-09-16T05:59:15.000Z","_content":"\n**对于 iOS 和 OS X 开发者来说，Autolayout已经逐渐变成一个至关重要的开发工具。它让多屏幕适配变得小菜一碟(peasy)，但是有些时候它还是会把我们搞疯掉，因为它总是会出现那些啰嗦又没啥用处的错误警告。**\n\n就像这样:\n\n```objc\nUnable to simultaneously satisfy constraints.\nProbably at least one of the constraints in the following list is one you don't want.\nTry this:\n\n(1) look at each constraint and try to figure out which you don't expect;\n(2) find the code that added the unwanted constraint or constraints and fix it.\n(Note: If you're seeing NSAutoresizingMaskLayoutConstraints that you don't understand, refer to the documentation for the UIView property translatesAutoresizingMaskIntoConstraints)\n\n(...........)\n\n\nMake a symbolic breakpoint at UIViewAlertForUnsatisfiableConstraints to catch this in the debugger.\nThe methods in the UIConstraintBasedLayoutDebugging category on UIView listed in <UIKit/UIView.h> may also be helpful.\n```\n\n**这么长的错误日志！！！！尼玛让谁看！！！** \n \n但是我们仔细看一下，观察 `NSLayoutConstraint` 部分。发现它倒数第二行还是有给我们点希望去解决这个错误的。在 `UIViewAlertForUnsatisfiableConstraints` 添加一个Symbolic breakpoint 断点。  \n既然这样，我们就去试一下...  \n\n![](http://upload-images.jianshu.io/upload_images/56030-030886b7b8cca75d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) \n\n尼玛！！ 毛用都没有啊！！它停在了线程堆栈上，然而LLDB依旧一片黑暗...  \n\n**于是这里就有一个小技巧(Trick)，**来让你的symbolic breakpoint变得更加有用。为你的ObjC项目添加 `po [[UIWindow keyWindow] _autolayoutTrace]`\n   \n或者为你的Swift项目添加 `expr -l objc++ -O -- [[UIWindow keyWindow] _autolayoutTrace]`  \n\n![](http://upload-images.jianshu.io/upload_images/56030-b6505c77c0923c08.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n现在你就会在命令控制台看到你的UIView 的层次结构还有出现错误的地方。\n  \n```objc\nUIWindow:0x7f9481c93360\n|   •UIView:0x7f9481c9d680\n|   |   *UIView:0x7f9481c9d990- AMBIGUOUS LAYOUT for UIView:0x7f9481c9d990.minX{id: 13}, UIView:0x7f9481c9d990.minY{id: 16}\n|   |   *_UILayoutGuide:0x7f9481c9e160- AMBIGUOUS LAYOUT for _UILayoutGuide:0x7f9481c9e160.minY{id: 17}\n|   |   *_UILayoutGuide:0x7f9481c9ebb0- AMBIGUOUS LAYOUT for _UILayoutGuide:0x7f9481c9ebb0.minY{id: 27}\n\n```\n\n而当你在这个地方继续向下执行，它就会停在下一个你可能出现错误的地方。但是如果这样子你还是很难发现你的错误的话，你可以执行下面这个语句\n\n```\n(lldb) e id $myView = (id) 0x7f9ea3d43410\n(lldb) e (void)[$myView setBackgroundColor:[UIColor blueColor]] \n```\n\n先获取UIView，然后改变它的背景色\n\n你就会看到出错误的视图主动显示出来了~\n\n**ps: 如果是手写Autolayout，推荐 [Mansory](https://github.com/SnapKit/Masonry)，实在是好用！！**\n\n**关键是它的错误提示**  \n\n```objc\nUnable to simultaneously satisfy constraints......blah blah blah....\n(\n    \"<NSAutoresizingMaskLayoutConstraint:0x8887740 MASExampleDebuggingView:superview.height == 416>\",\n    \"<MASLayoutConstraint:ConstantConstraint UILabel:messageLabel.height >= 5000>\",\n    \"<MASLayoutConstraint:BottomConstraint UILabel:messageLabel.bottom == MASExampleDebuggingView:superview.bottom - 10>\",\n    \"<MASLayoutConstraint:ConflictingConstraint[0] UILabel:messageLabel.top == MASExampleDebuggingView:superview.top + 1>\"\n)\n\nWill attempt to recover by breaking constraint\n<MASLayoutConstraint:ConstantConstraint UILabel:messageLabel.height >= 5000>\n```\n\n已经把出现错误的约束显示出来了，完全不需要我们去茫茫去偶遇~\n\n\n\n\n","source":"_posts/breakpoint-debug-autolayout.md","raw":"---\ntitle: 断点调试 autolayout\ndate: 2016-09-16 13:59:15\ntags:\n- iOS\n---\n\n**对于 iOS 和 OS X 开发者来说，Autolayout已经逐渐变成一个至关重要的开发工具。它让多屏幕适配变得小菜一碟(peasy)，但是有些时候它还是会把我们搞疯掉，因为它总是会出现那些啰嗦又没啥用处的错误警告。**\n\n就像这样:\n\n```objc\nUnable to simultaneously satisfy constraints.\nProbably at least one of the constraints in the following list is one you don't want.\nTry this:\n\n(1) look at each constraint and try to figure out which you don't expect;\n(2) find the code that added the unwanted constraint or constraints and fix it.\n(Note: If you're seeing NSAutoresizingMaskLayoutConstraints that you don't understand, refer to the documentation for the UIView property translatesAutoresizingMaskIntoConstraints)\n\n(...........)\n\n\nMake a symbolic breakpoint at UIViewAlertForUnsatisfiableConstraints to catch this in the debugger.\nThe methods in the UIConstraintBasedLayoutDebugging category on UIView listed in <UIKit/UIView.h> may also be helpful.\n```\n\n**这么长的错误日志！！！！尼玛让谁看！！！** \n \n但是我们仔细看一下，观察 `NSLayoutConstraint` 部分。发现它倒数第二行还是有给我们点希望去解决这个错误的。在 `UIViewAlertForUnsatisfiableConstraints` 添加一个Symbolic breakpoint 断点。  \n既然这样，我们就去试一下...  \n\n![](http://upload-images.jianshu.io/upload_images/56030-030886b7b8cca75d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) \n\n尼玛！！ 毛用都没有啊！！它停在了线程堆栈上，然而LLDB依旧一片黑暗...  \n\n**于是这里就有一个小技巧(Trick)，**来让你的symbolic breakpoint变得更加有用。为你的ObjC项目添加 `po [[UIWindow keyWindow] _autolayoutTrace]`\n   \n或者为你的Swift项目添加 `expr -l objc++ -O -- [[UIWindow keyWindow] _autolayoutTrace]`  \n\n![](http://upload-images.jianshu.io/upload_images/56030-b6505c77c0923c08.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n现在你就会在命令控制台看到你的UIView 的层次结构还有出现错误的地方。\n  \n```objc\nUIWindow:0x7f9481c93360\n|   •UIView:0x7f9481c9d680\n|   |   *UIView:0x7f9481c9d990- AMBIGUOUS LAYOUT for UIView:0x7f9481c9d990.minX{id: 13}, UIView:0x7f9481c9d990.minY{id: 16}\n|   |   *_UILayoutGuide:0x7f9481c9e160- AMBIGUOUS LAYOUT for _UILayoutGuide:0x7f9481c9e160.minY{id: 17}\n|   |   *_UILayoutGuide:0x7f9481c9ebb0- AMBIGUOUS LAYOUT for _UILayoutGuide:0x7f9481c9ebb0.minY{id: 27}\n\n```\n\n而当你在这个地方继续向下执行，它就会停在下一个你可能出现错误的地方。但是如果这样子你还是很难发现你的错误的话，你可以执行下面这个语句\n\n```\n(lldb) e id $myView = (id) 0x7f9ea3d43410\n(lldb) e (void)[$myView setBackgroundColor:[UIColor blueColor]] \n```\n\n先获取UIView，然后改变它的背景色\n\n你就会看到出错误的视图主动显示出来了~\n\n**ps: 如果是手写Autolayout，推荐 [Mansory](https://github.com/SnapKit/Masonry)，实在是好用！！**\n\n**关键是它的错误提示**  \n\n```objc\nUnable to simultaneously satisfy constraints......blah blah blah....\n(\n    \"<NSAutoresizingMaskLayoutConstraint:0x8887740 MASExampleDebuggingView:superview.height == 416>\",\n    \"<MASLayoutConstraint:ConstantConstraint UILabel:messageLabel.height >= 5000>\",\n    \"<MASLayoutConstraint:BottomConstraint UILabel:messageLabel.bottom == MASExampleDebuggingView:superview.bottom - 10>\",\n    \"<MASLayoutConstraint:ConflictingConstraint[0] UILabel:messageLabel.top == MASExampleDebuggingView:superview.top + 1>\"\n)\n\nWill attempt to recover by breaking constraint\n<MASLayoutConstraint:ConstantConstraint UILabel:messageLabel.height >= 5000>\n```\n\n已经把出现错误的约束显示出来了，完全不需要我们去茫茫去偶遇~\n\n\n\n\n","slug":"breakpoint-debug-autolayout","published":1,"updated":"2022-10-25T02:57:42.645Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9nmc48500058wwxhz7nrmf3","content":"<p><strong>对于 iOS 和 OS X 开发者来说，Autolayout已经逐渐变成一个至关重要的开发工具。它让多屏幕适配变得小菜一碟(peasy)，但是有些时候它还是会把我们搞疯掉，因为它总是会出现那些啰嗦又没啥用处的错误警告。</strong></p>\n<p>就像这样:</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Unable to simultaneously satisfy constraints.</span><br><span class=\"line\">Probably at least one of the constraints in the following list is one you don't want.</span><br><span class=\"line\">Try <span class=\"keyword\">this</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">(1) look at each constraint and try to figure out which you don't expect;</span><br><span class=\"line\">(<span class=\"number\">2</span>) find the code that added the unwanted constraint or constraints and fix it.</span><br><span class=\"line\">(Note: If you're seeing NSAutoresizingMaskLayoutConstraints that you don't understand, refer to the documentation for the UIView property translatesAutoresizingMaskIntoConstraints)</span><br><span class=\"line\"></span><br><span class=\"line\">(...........)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Make a symbolic breakpoint at <span class=\"built_in\">UIViewAlertForUnsatisfiableConstraints</span> to catch <span class=\"keyword\">this</span> <span class=\"keyword\">in</span> the debugger.</span><br><span class=\"line\">The methods <span class=\"keyword\">in</span> the <span class=\"built_in\">UIConstraintBasedLayoutDebugging</span> category on <span class=\"built_in\">UIView</span> listed <span class=\"keyword\">in</span> &lt;<span class=\"built_in\">UIKit</span>/<span class=\"built_in\">UIView</span>.h&gt; may also be helpful.</span><br></pre></td></tr></table></figure>\n<p><strong>这么长的错误日志！！！！尼玛让谁看！！！</strong> </p>\n<p>但是我们仔细看一下，观察 <code>NSLayoutConstraint</code> 部分。发现它倒数第二行还是有给我们点希望去解决这个错误的。在 <code>UIViewAlertForUnsatisfiableConstraints</code> 添加一个Symbolic breakpoint 断点。<br>既然这样，我们就去试一下…  </p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/56030-030886b7b8cca75d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"> </p>\n<p>尼玛！！ 毛用都没有啊！！它停在了线程堆栈上，然而LLDB依旧一片黑暗…  </p>\n<p><strong>于是这里就有一个小技巧(Trick)，</strong>来让你的symbolic breakpoint变得更加有用。为你的ObjC项目添加 <code>po [[UIWindow keyWindow] _autolayoutTrace]</code></p>\n<p>或者为你的Swift项目添加 <code>expr -l objc++ -O -- [[UIWindow keyWindow] _autolayoutTrace]</code>  </p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/56030-b6505c77c0923c08.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>现在你就会在命令控制台看到你的UIView 的层次结构还有出现错误的地方。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">UIWindow</span>:<span class=\"number\">0x7f9481c93360</span></span><br><span class=\"line\">|   •<span class=\"built_in\">UIView</span>:<span class=\"number\">0x7f9481c9d680</span></span><br><span class=\"line\">|   |   *<span class=\"built_in\">UIView</span>:<span class=\"number\">0x7f9481c9d990</span>- AMBIGUOUS LAYOUT <span class=\"keyword\">for</span> <span class=\"built_in\">UIView</span>:<span class=\"number\">0x7f9481c9d990</span>.minX&#123;<span class=\"keyword\">id</span>: <span class=\"number\">13</span>&#125;, <span class=\"built_in\">UIView</span>:<span class=\"number\">0x7f9481c9d990</span>.minY&#123;<span class=\"keyword\">id</span>: <span class=\"number\">16</span>&#125;</span><br><span class=\"line\">|   |   *_UILayoutGuide:<span class=\"number\">0x7f9481c9e160</span>- AMBIGUOUS LAYOUT <span class=\"keyword\">for</span> _UILayoutGuide:<span class=\"number\">0x7f9481c9e160</span>.minY&#123;<span class=\"keyword\">id</span>: <span class=\"number\">17</span>&#125;</span><br><span class=\"line\">|   |   *_UILayoutGuide:<span class=\"number\">0x7f9481c9ebb0</span>- AMBIGUOUS LAYOUT <span class=\"keyword\">for</span> _UILayoutGuide:<span class=\"number\">0x7f9481c9ebb0</span>.minY&#123;<span class=\"keyword\">id</span>: <span class=\"number\">27</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>而当你在这个地方继续向下执行，它就会停在下一个你可能出现错误的地方。但是如果这样子你还是很难发现你的错误的话，你可以执行下面这个语句</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(lldb) e id $myView = (id) 0x7f9ea3d43410</span><br><span class=\"line\">(lldb) e (void)[$myView setBackgroundColor:[UIColor blueColor]]</span><br></pre></td></tr></table></figure>\n<p>先获取UIView，然后改变它的背景色</p>\n<p>你就会看到出错误的视图主动显示出来了~</p>\n<p><strong>ps: 如果是手写Autolayout，推荐 <a href=\"https://github.com/SnapKit/Masonry\" target=\"_blank\" rel=\"noopener\">Mansory</a>，实在是好用！！</strong></p>\n<p><strong>关键是它的错误提示</strong>  </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Unable to simultaneously satisfy constraints......blah blah blah....</span><br><span class=\"line\">(</span><br><span class=\"line\">    <span class=\"string\">\"&lt;NSAutoresizingMaskLayoutConstraint:0x8887740 MASExampleDebuggingView:superview.height == 416&gt;\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"&lt;MASLayoutConstraint:ConstantConstraint UILabel:messageLabel.height &gt;= 5000&gt;\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"&lt;MASLayoutConstraint:BottomConstraint UILabel:messageLabel.bottom == MASExampleDebuggingView:superview.bottom - 10&gt;\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"&lt;MASLayoutConstraint:ConflictingConstraint[0] UILabel:messageLabel.top == MASExampleDebuggingView:superview.top + 1&gt;\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">Will attempt to recover by breaking constraint</span><br><span class=\"line\">&lt;MASLayoutConstraint:ConstantConstraint <span class=\"built_in\">UILabel</span>:messageLabel.height &gt;= <span class=\"number\">5000</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>已经把出现错误的约束显示出来了，完全不需要我们去茫茫去偶遇~</p>\n","site":{"data":{"links":{"Colin’s Nest":{"link":"http://colin1994.github.io/","avatar":"http://example.com/avatar.png"},"Vong":{"link":"https://vongloo.me/","avatar":"http://example.com/avatar.png"},"Punmy":{"link":"https://punmy.cn/","avatar":"http://example.com/avatar.png"},"细语呢喃":{"link":"https://www.hrwhisper.me/","avatar":"http://example.com/avatar.png"},"栖迟于一丘":{"link":"https://www.hongweipeng.com/","avatar":"http://example.com/avatar.png"},"B1ueW01f":{"link":"https://www.b1uew01f.net/","avatar":"http://example.com/avatar.png"},"忘归":{"link":"http://jalan.space/","avatar":"http://example.com/avatar.png"},"进阶者":{"link":"https://ruphi.cn/","avatar":"http://example.com/avatar.png"},"LIZIMEOW'S BLOG":{"link":"http://lizimeow.cn/","avatar":"http://example.com/avatar.png"},"Saitjr":{"link":"http://www.saitjr.com/","avatar":null}}}},"excerpt":"","more":"<p><strong>对于 iOS 和 OS X 开发者来说，Autolayout已经逐渐变成一个至关重要的开发工具。它让多屏幕适配变得小菜一碟(peasy)，但是有些时候它还是会把我们搞疯掉，因为它总是会出现那些啰嗦又没啥用处的错误警告。</strong></p>\n<p>就像这样:</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Unable to simultaneously satisfy constraints.</span><br><span class=\"line\">Probably at least one of the constraints in the following list is one you don't want.</span><br><span class=\"line\">Try <span class=\"keyword\">this</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">(1) look at each constraint and try to figure out which you don't expect;</span><br><span class=\"line\">(<span class=\"number\">2</span>) find the code that added the unwanted constraint or constraints and fix it.</span><br><span class=\"line\">(Note: If you're seeing NSAutoresizingMaskLayoutConstraints that you don't understand, refer to the documentation for the UIView property translatesAutoresizingMaskIntoConstraints)</span><br><span class=\"line\"></span><br><span class=\"line\">(...........)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Make a symbolic breakpoint at <span class=\"built_in\">UIViewAlertForUnsatisfiableConstraints</span> to catch <span class=\"keyword\">this</span> <span class=\"keyword\">in</span> the debugger.</span><br><span class=\"line\">The methods <span class=\"keyword\">in</span> the <span class=\"built_in\">UIConstraintBasedLayoutDebugging</span> category on <span class=\"built_in\">UIView</span> listed <span class=\"keyword\">in</span> &lt;<span class=\"built_in\">UIKit</span>/<span class=\"built_in\">UIView</span>.h&gt; may also be helpful.</span><br></pre></td></tr></table></figure>\n<p><strong>这么长的错误日志！！！！尼玛让谁看！！！</strong> </p>\n<p>但是我们仔细看一下，观察 <code>NSLayoutConstraint</code> 部分。发现它倒数第二行还是有给我们点希望去解决这个错误的。在 <code>UIViewAlertForUnsatisfiableConstraints</code> 添加一个Symbolic breakpoint 断点。<br>既然这样，我们就去试一下…  </p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/56030-030886b7b8cca75d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"> </p>\n<p>尼玛！！ 毛用都没有啊！！它停在了线程堆栈上，然而LLDB依旧一片黑暗…  </p>\n<p><strong>于是这里就有一个小技巧(Trick)，</strong>来让你的symbolic breakpoint变得更加有用。为你的ObjC项目添加 <code>po [[UIWindow keyWindow] _autolayoutTrace]</code></p>\n<p>或者为你的Swift项目添加 <code>expr -l objc++ -O -- [[UIWindow keyWindow] _autolayoutTrace]</code>  </p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/56030-b6505c77c0923c08.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>现在你就会在命令控制台看到你的UIView 的层次结构还有出现错误的地方。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">UIWindow</span>:<span class=\"number\">0x7f9481c93360</span></span><br><span class=\"line\">|   •<span class=\"built_in\">UIView</span>:<span class=\"number\">0x7f9481c9d680</span></span><br><span class=\"line\">|   |   *<span class=\"built_in\">UIView</span>:<span class=\"number\">0x7f9481c9d990</span>- AMBIGUOUS LAYOUT <span class=\"keyword\">for</span> <span class=\"built_in\">UIView</span>:<span class=\"number\">0x7f9481c9d990</span>.minX&#123;<span class=\"keyword\">id</span>: <span class=\"number\">13</span>&#125;, <span class=\"built_in\">UIView</span>:<span class=\"number\">0x7f9481c9d990</span>.minY&#123;<span class=\"keyword\">id</span>: <span class=\"number\">16</span>&#125;</span><br><span class=\"line\">|   |   *_UILayoutGuide:<span class=\"number\">0x7f9481c9e160</span>- AMBIGUOUS LAYOUT <span class=\"keyword\">for</span> _UILayoutGuide:<span class=\"number\">0x7f9481c9e160</span>.minY&#123;<span class=\"keyword\">id</span>: <span class=\"number\">17</span>&#125;</span><br><span class=\"line\">|   |   *_UILayoutGuide:<span class=\"number\">0x7f9481c9ebb0</span>- AMBIGUOUS LAYOUT <span class=\"keyword\">for</span> _UILayoutGuide:<span class=\"number\">0x7f9481c9ebb0</span>.minY&#123;<span class=\"keyword\">id</span>: <span class=\"number\">27</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>而当你在这个地方继续向下执行，它就会停在下一个你可能出现错误的地方。但是如果这样子你还是很难发现你的错误的话，你可以执行下面这个语句</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(lldb) e id $myView = (id) 0x7f9ea3d43410</span><br><span class=\"line\">(lldb) e (void)[$myView setBackgroundColor:[UIColor blueColor]]</span><br></pre></td></tr></table></figure>\n<p>先获取UIView，然后改变它的背景色</p>\n<p>你就会看到出错误的视图主动显示出来了~</p>\n<p><strong>ps: 如果是手写Autolayout，推荐 <a href=\"https://github.com/SnapKit/Masonry\" target=\"_blank\" rel=\"noopener\">Mansory</a>，实在是好用！！</strong></p>\n<p><strong>关键是它的错误提示</strong>  </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Unable to simultaneously satisfy constraints......blah blah blah....</span><br><span class=\"line\">(</span><br><span class=\"line\">    <span class=\"string\">\"&lt;NSAutoresizingMaskLayoutConstraint:0x8887740 MASExampleDebuggingView:superview.height == 416&gt;\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"&lt;MASLayoutConstraint:ConstantConstraint UILabel:messageLabel.height &gt;= 5000&gt;\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"&lt;MASLayoutConstraint:BottomConstraint UILabel:messageLabel.bottom == MASExampleDebuggingView:superview.bottom - 10&gt;\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"&lt;MASLayoutConstraint:ConflictingConstraint[0] UILabel:messageLabel.top == MASExampleDebuggingView:superview.top + 1&gt;\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">Will attempt to recover by breaking constraint</span><br><span class=\"line\">&lt;MASLayoutConstraint:ConstantConstraint <span class=\"built_in\">UILabel</span>:messageLabel.height &gt;= <span class=\"number\">5000</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>已经把出现错误的约束显示出来了，完全不需要我们去茫茫去偶遇~</p>\n"},{"title":"与Cocoapods抗战的一天","date":"2018-05-22T14:43:54.000Z","_content":"\n> 在升级Mac系统到macOS High Sierra（10.13.4）的时候，出现升级失败导致开不了机，所有的数据全没了。\n> 🌶🐔🍎💊\n> 之前的系统环境都要全部重新配置，在配置cocoapods的时候遇到了一些问题，特此记录。\n\n## 安装cocoapods依赖的环境\n\n这步网上有很多[教程](https://www.google.com.hk/search?q=%E5%AE%89%E8%A3%85cocoapods&oq=%E5%AE%89%E8%A3%85cocoapods&aqs=chrome..69i57j69i61j0.3420j0j4&sourceid=chrome&ie=UTF-8)，就不再赘述。\n然而安装完后，在执行 `pod install` 或 `pod update` 时，就会出现如下错误：\n\n```\nArgumentError - Malformed version number string\n/Library/Ruby/Site/2.3.0/rubygems/version.rb:209:in `initialize'\n/Library/Ruby/Site/2.3.0/rubygems/version.rb:200:in `new'\n/Library/Ruby/Site/2.3.0/rubygems/version.rb:200:in `new'\n/Library/Ruby/Gems/2.3.0/gems/cocoapods-1.5.2/lib/cocoapods/generator/xcconfig/aggregate_xcconfig.rb:123:in `embedded_content_settings'\n/Library/Ruby/Gems/2.3.0/gems/cocoapods-1.5.2/lib/cocoapods/generator/xcconfig/aggregate_xcconfig.rb:68:in `generate'\n/Library/Ruby/Gems/2.3.0/gems/cocoapods-1.5.2/lib/cocoapods/generator/xcconfig/aggregate_xcconfig.rb:39:in `save_as'\n...\n/Library/Ruby/Gems/2.3.0/gems/cocoapods-1.5.2/lib/cocoapods/installer.rb:183:in `generate_pods_project'\n/Library/Ruby/Gems/2.3.0/gems/cocoapods-1.5.2/lib/cocoapods/installer.rb:119:in `install!'\n/Library/Ruby/Gems/2.3.0/gems/cocoapods-1.5.2/lib/cocoapods/command/install.rb:41:in `run'\n/Library/Ruby/Gems/2.3.0/gems/claide-1.0.2/lib/claide/command.rb:334:in `run'\n/Library/Ruby/Gems/2.3.0/gems/cocoapods-1.5.2/lib/cocoapods/command.rb:52:in `run'\n/Library/Ruby/Gems/2.3.0/gems/cocoapods-1.5.2/bin/pod:55:in `<top (required)>'\n/usr/bin/pod:23:in `load'\n/usr/bin/pod:23:in `<main>'\n```\n\n（一脸懵逼...）\n\nGoogle搜了一堆也没找到解决办法，后来在Cocoapods的issues里找到[一个解决方案](https://github.com/CocoaPods/CocoaPods/issues/7756):\n\n> jcharr1: I came across this issue today, too, when trying to run \"pod install.\" What version of Rubygems are you running? For me, I had updated with `gem update --system` which brought me up to v2.7.7. Downgrading to 2.7.6 with `gem update --system 2.7.6` fixed this for me.\n\n这位 `jcharr1` 说gem版本太高了导致的，他降级到2.7.6就可以了。于是我也尝试着降级了一下，果然解决了！不过其中缘由不得而知，有时间再研究一下。\n\n## Pod install\n\n现在可以正常 `pod install` 和 `pod update` 了吗？并不。\n当我按下回车键之后，又出现了一个小问题：\n\n```\nAnalyzing dependencies\nPre-downloading: `XXXX` from `http://xxx.com/xxx/xxx.git`, tag `xxx_6.9.5`\nUsername for 'http://xxx.com': aaa\nPassword for 'http://aaa@xxx.com':\n```\n\n其实这个输入账号密码就能解决问题了，但是我比较好奇的是我已经有添加了 `SSH Key`，为什么还会要我输入账号密码呢？原来，当我们的pod组件的地址使用的是 `http/https` 地址的时候，就会使用账号密码验证，当使用ssh地址的时候，就会用 `SSH Key` 验证。\n所以当我们不想输入账号密码的时候，可以在 `~/.gitconfig` 中加入如下代码：\n\n```\n[url \"git@github.com:\"]\n  insteadOf = https://github.com/\n[url \"git@github.com:\"]\n  pushInsteadOf = \"git://github.com/\"\n[url \"git@github.com:\"]\n  pushInsteadOf = \"https://github.com/\"\n```\n\n相关地址可以根据具体情况具体修改，修改完之后就会强制使用 `ssh` 验证了。\n\n然后 `pod install`，可以了吗？不！它又出错了。\n\n```\n[!] Error installing MTCameraAR\n[!] Failed to download 'MTCameraAR'\n```\n\n（一脸懵逼again...）\n\n后来尝试卸载重装cocoapods，都不行。正当无可奈何之际，突然想起来，pod有 `--verbose` 这个参数啊，说不定会有帮助。\n于是 `pod install --verbose`\n\n![](http://7viin1.com1.z0.glb.clouddn.com/pic.png)\n\n关键的错误就出现了， `git-lfs: command not found`\n由于这个库的文件都很大，没有使用git-lfs的话会超时，无法成功拉取。所以只要[安装git-lfs](https://github.com/git-lfs/git-lfs/wiki/Installation)就好了。\n\nbingo！问题都解决了。\n\n\n\n\n","source":"_posts/fight-with-cocoapods.md","raw":"---\ntitle: 与Cocoapods抗战的一天\ndate: 2018-05-22 22:43:54\ntag:\n- iOS\n---\n\n> 在升级Mac系统到macOS High Sierra（10.13.4）的时候，出现升级失败导致开不了机，所有的数据全没了。\n> 🌶🐔🍎💊\n> 之前的系统环境都要全部重新配置，在配置cocoapods的时候遇到了一些问题，特此记录。\n\n## 安装cocoapods依赖的环境\n\n这步网上有很多[教程](https://www.google.com.hk/search?q=%E5%AE%89%E8%A3%85cocoapods&oq=%E5%AE%89%E8%A3%85cocoapods&aqs=chrome..69i57j69i61j0.3420j0j4&sourceid=chrome&ie=UTF-8)，就不再赘述。\n然而安装完后，在执行 `pod install` 或 `pod update` 时，就会出现如下错误：\n\n```\nArgumentError - Malformed version number string\n/Library/Ruby/Site/2.3.0/rubygems/version.rb:209:in `initialize'\n/Library/Ruby/Site/2.3.0/rubygems/version.rb:200:in `new'\n/Library/Ruby/Site/2.3.0/rubygems/version.rb:200:in `new'\n/Library/Ruby/Gems/2.3.0/gems/cocoapods-1.5.2/lib/cocoapods/generator/xcconfig/aggregate_xcconfig.rb:123:in `embedded_content_settings'\n/Library/Ruby/Gems/2.3.0/gems/cocoapods-1.5.2/lib/cocoapods/generator/xcconfig/aggregate_xcconfig.rb:68:in `generate'\n/Library/Ruby/Gems/2.3.0/gems/cocoapods-1.5.2/lib/cocoapods/generator/xcconfig/aggregate_xcconfig.rb:39:in `save_as'\n...\n/Library/Ruby/Gems/2.3.0/gems/cocoapods-1.5.2/lib/cocoapods/installer.rb:183:in `generate_pods_project'\n/Library/Ruby/Gems/2.3.0/gems/cocoapods-1.5.2/lib/cocoapods/installer.rb:119:in `install!'\n/Library/Ruby/Gems/2.3.0/gems/cocoapods-1.5.2/lib/cocoapods/command/install.rb:41:in `run'\n/Library/Ruby/Gems/2.3.0/gems/claide-1.0.2/lib/claide/command.rb:334:in `run'\n/Library/Ruby/Gems/2.3.0/gems/cocoapods-1.5.2/lib/cocoapods/command.rb:52:in `run'\n/Library/Ruby/Gems/2.3.0/gems/cocoapods-1.5.2/bin/pod:55:in `<top (required)>'\n/usr/bin/pod:23:in `load'\n/usr/bin/pod:23:in `<main>'\n```\n\n（一脸懵逼...）\n\nGoogle搜了一堆也没找到解决办法，后来在Cocoapods的issues里找到[一个解决方案](https://github.com/CocoaPods/CocoaPods/issues/7756):\n\n> jcharr1: I came across this issue today, too, when trying to run \"pod install.\" What version of Rubygems are you running? For me, I had updated with `gem update --system` which brought me up to v2.7.7. Downgrading to 2.7.6 with `gem update --system 2.7.6` fixed this for me.\n\n这位 `jcharr1` 说gem版本太高了导致的，他降级到2.7.6就可以了。于是我也尝试着降级了一下，果然解决了！不过其中缘由不得而知，有时间再研究一下。\n\n## Pod install\n\n现在可以正常 `pod install` 和 `pod update` 了吗？并不。\n当我按下回车键之后，又出现了一个小问题：\n\n```\nAnalyzing dependencies\nPre-downloading: `XXXX` from `http://xxx.com/xxx/xxx.git`, tag `xxx_6.9.5`\nUsername for 'http://xxx.com': aaa\nPassword for 'http://aaa@xxx.com':\n```\n\n其实这个输入账号密码就能解决问题了，但是我比较好奇的是我已经有添加了 `SSH Key`，为什么还会要我输入账号密码呢？原来，当我们的pod组件的地址使用的是 `http/https` 地址的时候，就会使用账号密码验证，当使用ssh地址的时候，就会用 `SSH Key` 验证。\n所以当我们不想输入账号密码的时候，可以在 `~/.gitconfig` 中加入如下代码：\n\n```\n[url \"git@github.com:\"]\n  insteadOf = https://github.com/\n[url \"git@github.com:\"]\n  pushInsteadOf = \"git://github.com/\"\n[url \"git@github.com:\"]\n  pushInsteadOf = \"https://github.com/\"\n```\n\n相关地址可以根据具体情况具体修改，修改完之后就会强制使用 `ssh` 验证了。\n\n然后 `pod install`，可以了吗？不！它又出错了。\n\n```\n[!] Error installing MTCameraAR\n[!] Failed to download 'MTCameraAR'\n```\n\n（一脸懵逼again...）\n\n后来尝试卸载重装cocoapods，都不行。正当无可奈何之际，突然想起来，pod有 `--verbose` 这个参数啊，说不定会有帮助。\n于是 `pod install --verbose`\n\n![](http://7viin1.com1.z0.glb.clouddn.com/pic.png)\n\n关键的错误就出现了， `git-lfs: command not found`\n由于这个库的文件都很大，没有使用git-lfs的话会超时，无法成功拉取。所以只要[安装git-lfs](https://github.com/git-lfs/git-lfs/wiki/Installation)就好了。\n\nbingo！问题都解决了。\n\n\n\n\n","slug":"fight-with-cocoapods","published":1,"updated":"2022-10-25T02:57:42.645Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9nmc48700068wwxrddovz3b","content":"<blockquote>\n<p>在升级Mac系统到macOS High Sierra（10.13.4）的时候，出现升级失败导致开不了机，所有的数据全没了。<br>🌶🐔🍎💊<br>之前的系统环境都要全部重新配置，在配置cocoapods的时候遇到了一些问题，特此记录。</p>\n</blockquote>\n<h2 id=\"安装cocoapods依赖的环境\"><a href=\"#安装cocoapods依赖的环境\" class=\"headerlink\" title=\"安装cocoapods依赖的环境\"></a>安装cocoapods依赖的环境</h2><p>这步网上有很多<a href=\"https://www.google.com.hk/search?q=%E5%AE%89%E8%A3%85cocoapods&amp;oq=%E5%AE%89%E8%A3%85cocoapods&amp;aqs=chrome..69i57j69i61j0.3420j0j4&amp;sourceid=chrome&amp;ie=UTF-8\" target=\"_blank\" rel=\"noopener\">教程</a>，就不再赘述。<br>然而安装完后，在执行 <code>pod install</code> 或 <code>pod update</code> 时，就会出现如下错误：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArgumentError - Malformed version number string</span><br><span class=\"line\">/Library/Ruby/Site/2.3.0/rubygems/version.rb:209:in `initialize&apos;</span><br><span class=\"line\">/Library/Ruby/Site/2.3.0/rubygems/version.rb:200:in `new&apos;</span><br><span class=\"line\">/Library/Ruby/Site/2.3.0/rubygems/version.rb:200:in `new&apos;</span><br><span class=\"line\">/Library/Ruby/Gems/2.3.0/gems/cocoapods-1.5.2/lib/cocoapods/generator/xcconfig/aggregate_xcconfig.rb:123:in `embedded_content_settings&apos;</span><br><span class=\"line\">/Library/Ruby/Gems/2.3.0/gems/cocoapods-1.5.2/lib/cocoapods/generator/xcconfig/aggregate_xcconfig.rb:68:in `generate&apos;</span><br><span class=\"line\">/Library/Ruby/Gems/2.3.0/gems/cocoapods-1.5.2/lib/cocoapods/generator/xcconfig/aggregate_xcconfig.rb:39:in `save_as&apos;</span><br><span class=\"line\">...</span><br><span class=\"line\">/Library/Ruby/Gems/2.3.0/gems/cocoapods-1.5.2/lib/cocoapods/installer.rb:183:in `generate_pods_project&apos;</span><br><span class=\"line\">/Library/Ruby/Gems/2.3.0/gems/cocoapods-1.5.2/lib/cocoapods/installer.rb:119:in `install!&apos;</span><br><span class=\"line\">/Library/Ruby/Gems/2.3.0/gems/cocoapods-1.5.2/lib/cocoapods/command/install.rb:41:in `run&apos;</span><br><span class=\"line\">/Library/Ruby/Gems/2.3.0/gems/claide-1.0.2/lib/claide/command.rb:334:in `run&apos;</span><br><span class=\"line\">/Library/Ruby/Gems/2.3.0/gems/cocoapods-1.5.2/lib/cocoapods/command.rb:52:in `run&apos;</span><br><span class=\"line\">/Library/Ruby/Gems/2.3.0/gems/cocoapods-1.5.2/bin/pod:55:in `&lt;top (required)&gt;&apos;</span><br><span class=\"line\">/usr/bin/pod:23:in `load&apos;</span><br><span class=\"line\">/usr/bin/pod:23:in `&lt;main&gt;&apos;</span><br></pre></td></tr></table></figure>\n<p>（一脸懵逼…）</p>\n<p>Google搜了一堆也没找到解决办法，后来在Cocoapods的issues里找到<a href=\"https://github.com/CocoaPods/CocoaPods/issues/7756\" target=\"_blank\" rel=\"noopener\">一个解决方案</a>:</p>\n<blockquote>\n<p>jcharr1: I came across this issue today, too, when trying to run “pod install.” What version of Rubygems are you running? For me, I had updated with <code>gem update --system</code> which brought me up to v2.7.7. Downgrading to 2.7.6 with <code>gem update --system 2.7.6</code> fixed this for me.</p>\n</blockquote>\n<p>这位 <code>jcharr1</code> 说gem版本太高了导致的，他降级到2.7.6就可以了。于是我也尝试着降级了一下，果然解决了！不过其中缘由不得而知，有时间再研究一下。</p>\n<h2 id=\"Pod-install\"><a href=\"#Pod-install\" class=\"headerlink\" title=\"Pod install\"></a>Pod install</h2><p>现在可以正常 <code>pod install</code> 和 <code>pod update</code> 了吗？并不。<br>当我按下回车键之后，又出现了一个小问题：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Analyzing dependencies</span><br><span class=\"line\">Pre-downloading: `XXXX` from `http://xxx.com/xxx/xxx.git`, tag `xxx_6.9.5`</span><br><span class=\"line\">Username for &apos;http://xxx.com&apos;: aaa</span><br><span class=\"line\">Password for &apos;http://aaa@xxx.com&apos;:</span><br></pre></td></tr></table></figure>\n<p>其实这个输入账号密码就能解决问题了，但是我比较好奇的是我已经有添加了 <code>SSH Key</code>，为什么还会要我输入账号密码呢？原来，当我们的pod组件的地址使用的是 <code>http/https</code> 地址的时候，就会使用账号密码验证，当使用ssh地址的时候，就会用 <code>SSH Key</code> 验证。<br>所以当我们不想输入账号密码的时候，可以在 <code>~/.gitconfig</code> 中加入如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[url &quot;git@github.com:&quot;]</span><br><span class=\"line\">  insteadOf = https://github.com/</span><br><span class=\"line\">[url &quot;git@github.com:&quot;]</span><br><span class=\"line\">  pushInsteadOf = &quot;git://github.com/&quot;</span><br><span class=\"line\">[url &quot;git@github.com:&quot;]</span><br><span class=\"line\">  pushInsteadOf = &quot;https://github.com/&quot;</span><br></pre></td></tr></table></figure>\n<p>相关地址可以根据具体情况具体修改，修改完之后就会强制使用 <code>ssh</code> 验证了。</p>\n<p>然后 <code>pod install</code>，可以了吗？不！它又出错了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[!] Error installing MTCameraAR</span><br><span class=\"line\">[!] Failed to download &apos;MTCameraAR&apos;</span><br></pre></td></tr></table></figure>\n<p>（一脸懵逼again…）</p>\n<p>后来尝试卸载重装cocoapods，都不行。正当无可奈何之际，突然想起来，pod有 <code>--verbose</code> 这个参数啊，说不定会有帮助。<br>于是 <code>pod install --verbose</code></p>\n<p><img src=\"http://7viin1.com1.z0.glb.clouddn.com/pic.png\" alt=\"\"></p>\n<p>关键的错误就出现了， <code>git-lfs: command not found</code><br>由于这个库的文件都很大，没有使用git-lfs的话会超时，无法成功拉取。所以只要<a href=\"https://github.com/git-lfs/git-lfs/wiki/Installation\" target=\"_blank\" rel=\"noopener\">安装git-lfs</a>就好了。</p>\n<p>bingo！问题都解决了。</p>\n","site":{"data":{"links":{"Colin’s Nest":{"link":"http://colin1994.github.io/","avatar":"http://example.com/avatar.png"},"Vong":{"link":"https://vongloo.me/","avatar":"http://example.com/avatar.png"},"Punmy":{"link":"https://punmy.cn/","avatar":"http://example.com/avatar.png"},"细语呢喃":{"link":"https://www.hrwhisper.me/","avatar":"http://example.com/avatar.png"},"栖迟于一丘":{"link":"https://www.hongweipeng.com/","avatar":"http://example.com/avatar.png"},"B1ueW01f":{"link":"https://www.b1uew01f.net/","avatar":"http://example.com/avatar.png"},"忘归":{"link":"http://jalan.space/","avatar":"http://example.com/avatar.png"},"进阶者":{"link":"https://ruphi.cn/","avatar":"http://example.com/avatar.png"},"LIZIMEOW'S BLOG":{"link":"http://lizimeow.cn/","avatar":"http://example.com/avatar.png"},"Saitjr":{"link":"http://www.saitjr.com/","avatar":null}}}},"excerpt":"","more":"<blockquote>\n<p>在升级Mac系统到macOS High Sierra（10.13.4）的时候，出现升级失败导致开不了机，所有的数据全没了。<br>🌶🐔🍎💊<br>之前的系统环境都要全部重新配置，在配置cocoapods的时候遇到了一些问题，特此记录。</p>\n</blockquote>\n<h2 id=\"安装cocoapods依赖的环境\"><a href=\"#安装cocoapods依赖的环境\" class=\"headerlink\" title=\"安装cocoapods依赖的环境\"></a>安装cocoapods依赖的环境</h2><p>这步网上有很多<a href=\"https://www.google.com.hk/search?q=%E5%AE%89%E8%A3%85cocoapods&amp;oq=%E5%AE%89%E8%A3%85cocoapods&amp;aqs=chrome..69i57j69i61j0.3420j0j4&amp;sourceid=chrome&amp;ie=UTF-8\" target=\"_blank\" rel=\"noopener\">教程</a>，就不再赘述。<br>然而安装完后，在执行 <code>pod install</code> 或 <code>pod update</code> 时，就会出现如下错误：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArgumentError - Malformed version number string</span><br><span class=\"line\">/Library/Ruby/Site/2.3.0/rubygems/version.rb:209:in `initialize&apos;</span><br><span class=\"line\">/Library/Ruby/Site/2.3.0/rubygems/version.rb:200:in `new&apos;</span><br><span class=\"line\">/Library/Ruby/Site/2.3.0/rubygems/version.rb:200:in `new&apos;</span><br><span class=\"line\">/Library/Ruby/Gems/2.3.0/gems/cocoapods-1.5.2/lib/cocoapods/generator/xcconfig/aggregate_xcconfig.rb:123:in `embedded_content_settings&apos;</span><br><span class=\"line\">/Library/Ruby/Gems/2.3.0/gems/cocoapods-1.5.2/lib/cocoapods/generator/xcconfig/aggregate_xcconfig.rb:68:in `generate&apos;</span><br><span class=\"line\">/Library/Ruby/Gems/2.3.0/gems/cocoapods-1.5.2/lib/cocoapods/generator/xcconfig/aggregate_xcconfig.rb:39:in `save_as&apos;</span><br><span class=\"line\">...</span><br><span class=\"line\">/Library/Ruby/Gems/2.3.0/gems/cocoapods-1.5.2/lib/cocoapods/installer.rb:183:in `generate_pods_project&apos;</span><br><span class=\"line\">/Library/Ruby/Gems/2.3.0/gems/cocoapods-1.5.2/lib/cocoapods/installer.rb:119:in `install!&apos;</span><br><span class=\"line\">/Library/Ruby/Gems/2.3.0/gems/cocoapods-1.5.2/lib/cocoapods/command/install.rb:41:in `run&apos;</span><br><span class=\"line\">/Library/Ruby/Gems/2.3.0/gems/claide-1.0.2/lib/claide/command.rb:334:in `run&apos;</span><br><span class=\"line\">/Library/Ruby/Gems/2.3.0/gems/cocoapods-1.5.2/lib/cocoapods/command.rb:52:in `run&apos;</span><br><span class=\"line\">/Library/Ruby/Gems/2.3.0/gems/cocoapods-1.5.2/bin/pod:55:in `&lt;top (required)&gt;&apos;</span><br><span class=\"line\">/usr/bin/pod:23:in `load&apos;</span><br><span class=\"line\">/usr/bin/pod:23:in `&lt;main&gt;&apos;</span><br></pre></td></tr></table></figure>\n<p>（一脸懵逼…）</p>\n<p>Google搜了一堆也没找到解决办法，后来在Cocoapods的issues里找到<a href=\"https://github.com/CocoaPods/CocoaPods/issues/7756\" target=\"_blank\" rel=\"noopener\">一个解决方案</a>:</p>\n<blockquote>\n<p>jcharr1: I came across this issue today, too, when trying to run “pod install.” What version of Rubygems are you running? For me, I had updated with <code>gem update --system</code> which brought me up to v2.7.7. Downgrading to 2.7.6 with <code>gem update --system 2.7.6</code> fixed this for me.</p>\n</blockquote>\n<p>这位 <code>jcharr1</code> 说gem版本太高了导致的，他降级到2.7.6就可以了。于是我也尝试着降级了一下，果然解决了！不过其中缘由不得而知，有时间再研究一下。</p>\n<h2 id=\"Pod-install\"><a href=\"#Pod-install\" class=\"headerlink\" title=\"Pod install\"></a>Pod install</h2><p>现在可以正常 <code>pod install</code> 和 <code>pod update</code> 了吗？并不。<br>当我按下回车键之后，又出现了一个小问题：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Analyzing dependencies</span><br><span class=\"line\">Pre-downloading: `XXXX` from `http://xxx.com/xxx/xxx.git`, tag `xxx_6.9.5`</span><br><span class=\"line\">Username for &apos;http://xxx.com&apos;: aaa</span><br><span class=\"line\">Password for &apos;http://aaa@xxx.com&apos;:</span><br></pre></td></tr></table></figure>\n<p>其实这个输入账号密码就能解决问题了，但是我比较好奇的是我已经有添加了 <code>SSH Key</code>，为什么还会要我输入账号密码呢？原来，当我们的pod组件的地址使用的是 <code>http/https</code> 地址的时候，就会使用账号密码验证，当使用ssh地址的时候，就会用 <code>SSH Key</code> 验证。<br>所以当我们不想输入账号密码的时候，可以在 <code>~/.gitconfig</code> 中加入如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[url &quot;git@github.com:&quot;]</span><br><span class=\"line\">  insteadOf = https://github.com/</span><br><span class=\"line\">[url &quot;git@github.com:&quot;]</span><br><span class=\"line\">  pushInsteadOf = &quot;git://github.com/&quot;</span><br><span class=\"line\">[url &quot;git@github.com:&quot;]</span><br><span class=\"line\">  pushInsteadOf = &quot;https://github.com/&quot;</span><br></pre></td></tr></table></figure>\n<p>相关地址可以根据具体情况具体修改，修改完之后就会强制使用 <code>ssh</code> 验证了。</p>\n<p>然后 <code>pod install</code>，可以了吗？不！它又出错了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[!] Error installing MTCameraAR</span><br><span class=\"line\">[!] Failed to download &apos;MTCameraAR&apos;</span><br></pre></td></tr></table></figure>\n<p>（一脸懵逼again…）</p>\n<p>后来尝试卸载重装cocoapods，都不行。正当无可奈何之际，突然想起来，pod有 <code>--verbose</code> 这个参数啊，说不定会有帮助。<br>于是 <code>pod install --verbose</code></p>\n<p><img src=\"http://7viin1.com1.z0.glb.clouddn.com/pic.png\" alt=\"\"></p>\n<p>关键的错误就出现了， <code>git-lfs: command not found</code><br>由于这个库的文件都很大，没有使用git-lfs的话会超时，无法成功拉取。所以只要<a href=\"https://github.com/git-lfs/git-lfs/wiki/Installation\" target=\"_blank\" rel=\"noopener\">安装git-lfs</a>就好了。</p>\n<p>bingo！问题都解决了。</p>\n"},{"title":"一个奇怪的旋转问题","date":"2019-07-30T02:24:32.000Z","_content":"\n## 现象\n\n最近发现一个很神奇的bug，加入某个会议之后然后退出，重复3次，界面就无法旋转了。\n\n## 猜测\n\n### 猜测1⃣️\n无法旋转，在确认旋转锁定关闭的情况下，第一个想法是，看看support orientation 相关的函数返回值是否正确。\n\n```\nfunc application(_ application: UIApplication, supportedInterfaceOrientationsFor window: UIWindow?) -> UIInterfaceOrientationMask\n\nopen override var shouldAutorotate: Bool \n\nopen override var supportedInterfaceOrientations: UIInterfaceOrientationMask\n```\n\n于是打了三个全局断点，一个一个调试...\n\n果不其然...\n都**没什么问题**...\n\n但是这里有个现象，当出现bug（即无法旋转）的时候，这些函数都不会被调用了。\n\n### 猜测2⃣️\n\n如果不是支持方向不对的话，回头看了一下现象：重复三次...\n于是继续猜测，会不会跟内存泄漏有关，之前有遇到过内存相关问题的现象也是重复操作n次出现。\n\n于是调试了一下...\n\n果不其然...\n还是**没什么问题**...\n\n## 寻找思路\n\n前面的猜测都不对，一下子就懵逼了，毫无头绪。后来仔细想了想，要不试试从系统接口找找问题，既然要旋转，最后肯定会落地到系统层面的某个方法上。\n\n于是打了个断点在 `-[UIViewController shouldAutorotate]`\n\n当设备可以旋转的时候，调用栈如下:\n\n```c\n* thread #1, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1\n  * frame #0: 0x00000001d039de80 UIKitCore`-[UIViewController shouldAutorotate]\n    frame #1: 0x00000001d039f8b8 UIKitCore`-[UIViewController _updateLastKnownInterfaceOrientationOnPresentionStack:] + 144\n    frame #2: 0x00000001d03a0e84 UIKitCore`-[UIViewController window:willAnimateRotationToInterfaceOrientation:duration:newSize:] + 92\n    frame #3: 0x00000001d03a8270 UIKitCore`__95-[UIViewController(AdaptiveSizing) _window:viewWillTransitionToSize:withTransitionCoordinator:]_block_invoke.3392 + 48\n    frame #4: 0x00000001d03af570 UIKitCore`-[_UIViewControllerTransitionCoordinator _applyBlocks:releaseBlocks:] + 264\n    frame #5: 0x00000001d03abb64 UIKitCore`-[_UIViewControllerTransitionContext __runAlongsideAnimations] + 176\n    frame #6: 0x00000001d0da7f40 UIKitCore`+[UIView(UIViewAnimationWithBlocks) _setupAnimationWithDuration:delay:view:options:factory:animations:start:animationStateGenerator:completion:] + 608\n    frame #7: 0x00000001d0da8480 UIKitCore`+[UIView(UIViewAnimationWithBlocks) animateWithDuration:delay:options:animations:completion:] + 108\n    frame #8: 0x000000010710a74c Glip`+[UIView(instrumentation) ADEumAnimateWithDuration:delay:options:animations:completion:] + 300\n    frame #9: 0x00000001d03c29e8 UIKitCore`__58-[_UIWindowRotationAnimationController animateTransition:]_block_invoke_2 + 308\n    frame #10: 0x00000001d0dac560 UIKitCore`+[UIView(Internal) _performBlockDelayingTriggeringResponderEvents:] + 220\n    frame #11: 0x00000001d03c2778 UIKitCore`__58-[_UIWindowRotationAnimationController animateTransition:]_block_invoke + 128\n    frame #12: 0x00000001d0da7f40 UIKitCore`+[UIView(UIViewAnimationWithBlocks) _setupAnimationWithDuration:delay:view:options:factory:animations:start:animationStateGenerator:completion:] + 608\n    frame #13: 0x00000001d0da8480 UIKitCore`+[UIView(UIViewAnimationWithBlocks) animateWithDuration:delay:options:animations:completion:] + 108\n    frame #14: 0x000000010710a74c Glip`+[UIView(instrumentation) ADEumAnimateWithDuration:delay:options:animations:completion:] + 300\n    frame #15: 0x00000001d03c2650 UIKitCore`-[_UIWindowRotationAnimationController animateTransition:] + 456\n    frame #16: 0x00000001d0968398 UIKitCore`-[UIWindow _rotateToBounds:withAnimator:transitionContext:] + 580\n    frame #17: 0x00000001d096aafc UIKitCore`-[UIWindow _rotateWindowToOrientation:updateStatusBar:duration:skipCallbacks:] + 1184\n    frame #18: 0x00000001d096b1b0 UIKitCore`-[UIWindow _setRotatableClient:toOrientation:updateStatusBar:duration:force:isRotating:] + 516\n    frame #19: 0x00000001d096a5b0 UIKitCore`-[UIWindow _setRotatableViewOrientation:updateStatusBar:duration:force:] + 128\n    frame #20: 0x00000001d096925c UIKitCore`__57-[UIWindow _updateToInterfaceOrientation:duration:force:]_block_invoke + 124\n    frame #21: 0x00000001d0969160 UIKitCore`-[UIWindow _updateToInterfaceOrientation:duration:force:] + 560\n    frame #22: 0x00000001a43595bc CoreFoundation`__CFNOTIFICATIONCENTER_IS_CALLING_OUT_TO_AN_OBSERVER__ + 20\n    frame #23: 0x00000001a4359588 CoreFoundation`___CFXRegistrationPost_block_invoke + 64\n    frame #24: 0x00000001a4358a7c CoreFoundation`_CFXRegistrationPost + 392\n    frame #25: 0x00000001a4358728 CoreFoundation`___CFXNotificationPost_block_invoke + 96\n    frame #26: 0x00000001a42d2524 CoreFoundation`-[_CFXNotificationRegistrar find:object:observer:enumerator:] + 1496\n    frame #27: 0x00000001a43581d8 CoreFoundation`_CFXNotificationPost + 696\n    frame #28: 0x00000001a4d40814 Foundation`-[NSNotificationCenter postNotificationName:object:userInfo:] + 68\n    frame #29: 0x00000001d05c2030 UIKitCore`-[UIDevice setOrientation:animated:] + 328\n    frame #30: 0x00000001d01f071c UIKitCore`__124-[_UICanvasDeviceOrientationSettingsDiffAction _updateDeviceOrientationWithSettingObserverContext:canvas:transitionContext:]_block_invoke + 88\n    frame #31: 0x00000001d01f2304 UIKitCore`_performChangesWithTransitionContext + 836\n    frame #32: 0x00000001d01f0688 UIKitCore`-[_UICanvasDeviceOrientationSettingsDiffAction _updateDeviceOrientationWithSettingObserverContext:canvas:transitionContext:] + 236\n    frame #33: 0x00000001d01f058c UIKitCore`__133-[_UICanvasDeviceOrientationSettingsDiffAction performActionsForCanvas:withUpdatedScene:settingsDiff:fromSettings:transitionContext:]_block_invoke + 104\n    frame #34: 0x00000001d01f1fb0 UIKitCore`_performActionsWithDelayForTransitionContext + 112\n    frame #35: 0x00000001d01f04e0 UIKitCore`-[_UICanvasDeviceOrientationSettingsDiffAction performActionsForCanvas:withUpdatedScene:settingsDiff:fromSettings:transitionContext:] + 172\n    frame #36: 0x00000001d01f5d84 UIKitCore`-[_UICanvas scene:didUpdateWithDiff:transitionContext:completion:] + 360\n    frame #37: 0x00000001d05253b8 UIKitCore`-[UIApplicationSceneClientAgent scene:handleEvent:withCompletion:] + 464\n    frame #38: 0x00000001a6d63920 FrontBoardServices`__80-[FBSSceneImpl updater:didUpdateSettings:withDiff:transitionContext:completion:]_block_invoke_3 + 224\n    frame #39: 0x00000001356e4c74 libdispatch.dylib`_dispatch_client_callout + 16\n    frame #40: 0x00000001356e8840 libdispatch.dylib`_dispatch_block_invoke_direct + 232\n    frame #41: 0x00000001a6d9d0bc FrontBoardServices`__FBSSERIALQUEUE_IS_CALLING_OUT_TO_A_BLOCK__ + 40\n    frame #42: 0x00000001a6d9cd58 FrontBoardServices`-[FBSSerialQueue _performNext] + 408\n    frame #43: 0x00000001a6d9d310 FrontBoardServices`-[FBSSerialQueue _performNextFromRunLoopSource] + 52\n    frame #44: 0x00000001a437a2bc CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__ + 24\n    frame #45: 0x00000001a437a23c CoreFoundation`__CFRunLoopDoSource0 + 88\n    frame #46: 0x00000001a4379b24 CoreFoundation`__CFRunLoopDoSources0 + 176\n    frame #47: 0x00000001a4374a60 CoreFoundation`__CFRunLoopRun + 1004\n    frame #48: 0x00000001a4374354 CoreFoundation`CFRunLoopRunSpecific + 436\n    frame #49: 0x00000001a657479c GraphicsServices`GSEventRunModal + 104\n    frame #50: 0x00000001d092bb68 UIKitCore`UIApplicationMain + 212\n    frame #51: 0x000000010525d370 Glip`main at AppDelegate.swift:67:7\n    frame #52: 0x00000001a3e3a8e0 libdyld.dylib`start + 4\n```\n\n最后通过断点定位，发现问题出在\n\n```c\nframe #22: 0x00000001a43595bc CoreFoundation`__CFNOTIFICATIONCENTER_IS_CALLING_OUT_TO_AN_OBSERVER__ + 20\nframe #23: 0x00000001a4359588 CoreFoundation`___CFXRegistrationPost_block_invoke + 64\nframe #24: 0x00000001a4358a7c CoreFoundation`_CFXRegistrationPost + 392\nframe #25: 0x00000001a4358728 CoreFoundation`___CFXNotificationPost_block_invoke + 96\nframe #26: 0x00000001a42d2524 CoreFoundation`-[_CFXNotificationRegistrar find:object:observer:enumerator:] + 1496\nframe #27: 0x00000001a43581d8 CoreFoundation`_CFXNotificationPost + 696\nframe #28: 0x00000001a4d40814 Foundation`-[NSNotificationCenter postNotificationName:object:userInfo:] + 68\nframe #29: 0x00000001d05c2030 UIKitCore`-[UIDevice setOrientation:animated:] + 328\n```\n\n不论APP是否支持旋转，`[UIDevice setOrientation:animated:]` 都会调用，且参数值也是对的。关键在于下一步，当APP支持旋转的时候，会发出一个`UIDeviceOrientationDidChangeNotification` 通知，不支持旋转的时候就不会。\n\n于是问题就转化成了：什么情况下，系统有可能会不发出 `UIDeviceOrientationDidChangeNotification` 通知呢？\n\n遇事不决，看文档。\n\n在 `UIDevice.h` 中找到这三个玩意儿\n\n```objc\n@property(nonatomic,readonly,getter=isGeneratingDeviceOrientationNotifications) BOOL generatesDeviceOrientationNotifications __TVOS_PROHIBITED;\n- (void)beginGeneratingDeviceOrientationNotifications __TVOS_PROHIBITED;      // nestable\n- (void)endGeneratingDeviceOrientationNotifications __TVOS_PROHIBITED;\n```\n\n看着应该就是罪魁祸首了。\n\n## 定位问题\n\n调试发现，在APP支持旋转时 `isGeneratingDeviceOrientationNotifications = true`；\n不支持时  `isGeneratingDeviceOrientationNotifications=false`。\n\n查看 `generatesDeviceOrientationNotifications` 文档：\n> If the value of this property is YES, the shared UIDevice object posts a UIDeviceOrientationDidChangeNotification notification when the device changes orientation. If the value is NO, it generates no orientation notifications. Device orientation notifications can only be generated between calls to the beginGeneratingDeviceOrientationNotifications and endGeneratingDeviceOrientationNotifications methods.\n\n查看 `beginGeneratingDeviceOrientationNotifications` 文档：\n> You must call this method before attempting to get orientation data from the receiver. This method enables the device’s accelerometer hardware and begins the delivery of acceleration events to the receiver. The receiver subsequently uses these events to post UIDeviceOrientationDidChangeNotification notifications when the device orientation changes and to update the orientation property.\nYou may nest calls to this method safely, but you should always match each call with a corresponding call to the endGeneratingDeviceOrientationNotifications method.\n\n所以 `isGeneratingDeviceOrientationNotifications` 的值是受另外两个方法影响的。\n\n**看来已经找到原因了**\n\n继续调试发现，项目代码内部并没有调用到 `beginGeneratingDeviceOrientationNotifications` 和 `endGeneratingDeviceOrientationNotifications`。\n\n## 结论\n\n当 `-[UIWindow setRootViewController:]`的时候，系统会调用 `beginGeneratingDeviceOrientationNotifications`，当 `-[UIWindow dealloc]` 时，会调用 `endGeneratingDeviceOrientationNotifications`，这么看系统的这个逻辑是没什么问题的。\n问题出在于 WebRTC 中，在 start video session 的时候有调用 `beginGeneratingDeviceOrientationNotifications`，stop video session 的时候有调用 `endGeneratingDeviceOrientationNotifications`。但是CoreLib里的代码有点问题，start video session 的时候并没有调用 `beginGeneratingDeviceOrientationNotifications` ，导致这两个没有成对出现，从而出错。\n\n\n以前没有特别关注过这三者：\n\n```objc\n@property(nonatomic,readonly,getter=isGeneratingDeviceOrientationNotifications) BOOL generatesDeviceOrientationNotifications __TVOS_PROHIBITED;\n- (void)beginGeneratingDeviceOrientationNotifications __TVOS_PROHIBITED;      // nestable\n- (void)endGeneratingDeviceOrientationNotifications __TVOS_PROHIBITED;\n```\n\n以后遇到旋转问题，又多了一条思路了..","source":"_posts/find-a-wierd-bug.md","raw":"---\ntitle: 一个奇怪的旋转问题\ndate: 2019-07-30 10:24:32\ntags:\n- iOS\n- Orientation\n---\n\n## 现象\n\n最近发现一个很神奇的bug，加入某个会议之后然后退出，重复3次，界面就无法旋转了。\n\n## 猜测\n\n### 猜测1⃣️\n无法旋转，在确认旋转锁定关闭的情况下，第一个想法是，看看support orientation 相关的函数返回值是否正确。\n\n```\nfunc application(_ application: UIApplication, supportedInterfaceOrientationsFor window: UIWindow?) -> UIInterfaceOrientationMask\n\nopen override var shouldAutorotate: Bool \n\nopen override var supportedInterfaceOrientations: UIInterfaceOrientationMask\n```\n\n于是打了三个全局断点，一个一个调试...\n\n果不其然...\n都**没什么问题**...\n\n但是这里有个现象，当出现bug（即无法旋转）的时候，这些函数都不会被调用了。\n\n### 猜测2⃣️\n\n如果不是支持方向不对的话，回头看了一下现象：重复三次...\n于是继续猜测，会不会跟内存泄漏有关，之前有遇到过内存相关问题的现象也是重复操作n次出现。\n\n于是调试了一下...\n\n果不其然...\n还是**没什么问题**...\n\n## 寻找思路\n\n前面的猜测都不对，一下子就懵逼了，毫无头绪。后来仔细想了想，要不试试从系统接口找找问题，既然要旋转，最后肯定会落地到系统层面的某个方法上。\n\n于是打了个断点在 `-[UIViewController shouldAutorotate]`\n\n当设备可以旋转的时候，调用栈如下:\n\n```c\n* thread #1, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1\n  * frame #0: 0x00000001d039de80 UIKitCore`-[UIViewController shouldAutorotate]\n    frame #1: 0x00000001d039f8b8 UIKitCore`-[UIViewController _updateLastKnownInterfaceOrientationOnPresentionStack:] + 144\n    frame #2: 0x00000001d03a0e84 UIKitCore`-[UIViewController window:willAnimateRotationToInterfaceOrientation:duration:newSize:] + 92\n    frame #3: 0x00000001d03a8270 UIKitCore`__95-[UIViewController(AdaptiveSizing) _window:viewWillTransitionToSize:withTransitionCoordinator:]_block_invoke.3392 + 48\n    frame #4: 0x00000001d03af570 UIKitCore`-[_UIViewControllerTransitionCoordinator _applyBlocks:releaseBlocks:] + 264\n    frame #5: 0x00000001d03abb64 UIKitCore`-[_UIViewControllerTransitionContext __runAlongsideAnimations] + 176\n    frame #6: 0x00000001d0da7f40 UIKitCore`+[UIView(UIViewAnimationWithBlocks) _setupAnimationWithDuration:delay:view:options:factory:animations:start:animationStateGenerator:completion:] + 608\n    frame #7: 0x00000001d0da8480 UIKitCore`+[UIView(UIViewAnimationWithBlocks) animateWithDuration:delay:options:animations:completion:] + 108\n    frame #8: 0x000000010710a74c Glip`+[UIView(instrumentation) ADEumAnimateWithDuration:delay:options:animations:completion:] + 300\n    frame #9: 0x00000001d03c29e8 UIKitCore`__58-[_UIWindowRotationAnimationController animateTransition:]_block_invoke_2 + 308\n    frame #10: 0x00000001d0dac560 UIKitCore`+[UIView(Internal) _performBlockDelayingTriggeringResponderEvents:] + 220\n    frame #11: 0x00000001d03c2778 UIKitCore`__58-[_UIWindowRotationAnimationController animateTransition:]_block_invoke + 128\n    frame #12: 0x00000001d0da7f40 UIKitCore`+[UIView(UIViewAnimationWithBlocks) _setupAnimationWithDuration:delay:view:options:factory:animations:start:animationStateGenerator:completion:] + 608\n    frame #13: 0x00000001d0da8480 UIKitCore`+[UIView(UIViewAnimationWithBlocks) animateWithDuration:delay:options:animations:completion:] + 108\n    frame #14: 0x000000010710a74c Glip`+[UIView(instrumentation) ADEumAnimateWithDuration:delay:options:animations:completion:] + 300\n    frame #15: 0x00000001d03c2650 UIKitCore`-[_UIWindowRotationAnimationController animateTransition:] + 456\n    frame #16: 0x00000001d0968398 UIKitCore`-[UIWindow _rotateToBounds:withAnimator:transitionContext:] + 580\n    frame #17: 0x00000001d096aafc UIKitCore`-[UIWindow _rotateWindowToOrientation:updateStatusBar:duration:skipCallbacks:] + 1184\n    frame #18: 0x00000001d096b1b0 UIKitCore`-[UIWindow _setRotatableClient:toOrientation:updateStatusBar:duration:force:isRotating:] + 516\n    frame #19: 0x00000001d096a5b0 UIKitCore`-[UIWindow _setRotatableViewOrientation:updateStatusBar:duration:force:] + 128\n    frame #20: 0x00000001d096925c UIKitCore`__57-[UIWindow _updateToInterfaceOrientation:duration:force:]_block_invoke + 124\n    frame #21: 0x00000001d0969160 UIKitCore`-[UIWindow _updateToInterfaceOrientation:duration:force:] + 560\n    frame #22: 0x00000001a43595bc CoreFoundation`__CFNOTIFICATIONCENTER_IS_CALLING_OUT_TO_AN_OBSERVER__ + 20\n    frame #23: 0x00000001a4359588 CoreFoundation`___CFXRegistrationPost_block_invoke + 64\n    frame #24: 0x00000001a4358a7c CoreFoundation`_CFXRegistrationPost + 392\n    frame #25: 0x00000001a4358728 CoreFoundation`___CFXNotificationPost_block_invoke + 96\n    frame #26: 0x00000001a42d2524 CoreFoundation`-[_CFXNotificationRegistrar find:object:observer:enumerator:] + 1496\n    frame #27: 0x00000001a43581d8 CoreFoundation`_CFXNotificationPost + 696\n    frame #28: 0x00000001a4d40814 Foundation`-[NSNotificationCenter postNotificationName:object:userInfo:] + 68\n    frame #29: 0x00000001d05c2030 UIKitCore`-[UIDevice setOrientation:animated:] + 328\n    frame #30: 0x00000001d01f071c UIKitCore`__124-[_UICanvasDeviceOrientationSettingsDiffAction _updateDeviceOrientationWithSettingObserverContext:canvas:transitionContext:]_block_invoke + 88\n    frame #31: 0x00000001d01f2304 UIKitCore`_performChangesWithTransitionContext + 836\n    frame #32: 0x00000001d01f0688 UIKitCore`-[_UICanvasDeviceOrientationSettingsDiffAction _updateDeviceOrientationWithSettingObserverContext:canvas:transitionContext:] + 236\n    frame #33: 0x00000001d01f058c UIKitCore`__133-[_UICanvasDeviceOrientationSettingsDiffAction performActionsForCanvas:withUpdatedScene:settingsDiff:fromSettings:transitionContext:]_block_invoke + 104\n    frame #34: 0x00000001d01f1fb0 UIKitCore`_performActionsWithDelayForTransitionContext + 112\n    frame #35: 0x00000001d01f04e0 UIKitCore`-[_UICanvasDeviceOrientationSettingsDiffAction performActionsForCanvas:withUpdatedScene:settingsDiff:fromSettings:transitionContext:] + 172\n    frame #36: 0x00000001d01f5d84 UIKitCore`-[_UICanvas scene:didUpdateWithDiff:transitionContext:completion:] + 360\n    frame #37: 0x00000001d05253b8 UIKitCore`-[UIApplicationSceneClientAgent scene:handleEvent:withCompletion:] + 464\n    frame #38: 0x00000001a6d63920 FrontBoardServices`__80-[FBSSceneImpl updater:didUpdateSettings:withDiff:transitionContext:completion:]_block_invoke_3 + 224\n    frame #39: 0x00000001356e4c74 libdispatch.dylib`_dispatch_client_callout + 16\n    frame #40: 0x00000001356e8840 libdispatch.dylib`_dispatch_block_invoke_direct + 232\n    frame #41: 0x00000001a6d9d0bc FrontBoardServices`__FBSSERIALQUEUE_IS_CALLING_OUT_TO_A_BLOCK__ + 40\n    frame #42: 0x00000001a6d9cd58 FrontBoardServices`-[FBSSerialQueue _performNext] + 408\n    frame #43: 0x00000001a6d9d310 FrontBoardServices`-[FBSSerialQueue _performNextFromRunLoopSource] + 52\n    frame #44: 0x00000001a437a2bc CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__ + 24\n    frame #45: 0x00000001a437a23c CoreFoundation`__CFRunLoopDoSource0 + 88\n    frame #46: 0x00000001a4379b24 CoreFoundation`__CFRunLoopDoSources0 + 176\n    frame #47: 0x00000001a4374a60 CoreFoundation`__CFRunLoopRun + 1004\n    frame #48: 0x00000001a4374354 CoreFoundation`CFRunLoopRunSpecific + 436\n    frame #49: 0x00000001a657479c GraphicsServices`GSEventRunModal + 104\n    frame #50: 0x00000001d092bb68 UIKitCore`UIApplicationMain + 212\n    frame #51: 0x000000010525d370 Glip`main at AppDelegate.swift:67:7\n    frame #52: 0x00000001a3e3a8e0 libdyld.dylib`start + 4\n```\n\n最后通过断点定位，发现问题出在\n\n```c\nframe #22: 0x00000001a43595bc CoreFoundation`__CFNOTIFICATIONCENTER_IS_CALLING_OUT_TO_AN_OBSERVER__ + 20\nframe #23: 0x00000001a4359588 CoreFoundation`___CFXRegistrationPost_block_invoke + 64\nframe #24: 0x00000001a4358a7c CoreFoundation`_CFXRegistrationPost + 392\nframe #25: 0x00000001a4358728 CoreFoundation`___CFXNotificationPost_block_invoke + 96\nframe #26: 0x00000001a42d2524 CoreFoundation`-[_CFXNotificationRegistrar find:object:observer:enumerator:] + 1496\nframe #27: 0x00000001a43581d8 CoreFoundation`_CFXNotificationPost + 696\nframe #28: 0x00000001a4d40814 Foundation`-[NSNotificationCenter postNotificationName:object:userInfo:] + 68\nframe #29: 0x00000001d05c2030 UIKitCore`-[UIDevice setOrientation:animated:] + 328\n```\n\n不论APP是否支持旋转，`[UIDevice setOrientation:animated:]` 都会调用，且参数值也是对的。关键在于下一步，当APP支持旋转的时候，会发出一个`UIDeviceOrientationDidChangeNotification` 通知，不支持旋转的时候就不会。\n\n于是问题就转化成了：什么情况下，系统有可能会不发出 `UIDeviceOrientationDidChangeNotification` 通知呢？\n\n遇事不决，看文档。\n\n在 `UIDevice.h` 中找到这三个玩意儿\n\n```objc\n@property(nonatomic,readonly,getter=isGeneratingDeviceOrientationNotifications) BOOL generatesDeviceOrientationNotifications __TVOS_PROHIBITED;\n- (void)beginGeneratingDeviceOrientationNotifications __TVOS_PROHIBITED;      // nestable\n- (void)endGeneratingDeviceOrientationNotifications __TVOS_PROHIBITED;\n```\n\n看着应该就是罪魁祸首了。\n\n## 定位问题\n\n调试发现，在APP支持旋转时 `isGeneratingDeviceOrientationNotifications = true`；\n不支持时  `isGeneratingDeviceOrientationNotifications=false`。\n\n查看 `generatesDeviceOrientationNotifications` 文档：\n> If the value of this property is YES, the shared UIDevice object posts a UIDeviceOrientationDidChangeNotification notification when the device changes orientation. If the value is NO, it generates no orientation notifications. Device orientation notifications can only be generated between calls to the beginGeneratingDeviceOrientationNotifications and endGeneratingDeviceOrientationNotifications methods.\n\n查看 `beginGeneratingDeviceOrientationNotifications` 文档：\n> You must call this method before attempting to get orientation data from the receiver. This method enables the device’s accelerometer hardware and begins the delivery of acceleration events to the receiver. The receiver subsequently uses these events to post UIDeviceOrientationDidChangeNotification notifications when the device orientation changes and to update the orientation property.\nYou may nest calls to this method safely, but you should always match each call with a corresponding call to the endGeneratingDeviceOrientationNotifications method.\n\n所以 `isGeneratingDeviceOrientationNotifications` 的值是受另外两个方法影响的。\n\n**看来已经找到原因了**\n\n继续调试发现，项目代码内部并没有调用到 `beginGeneratingDeviceOrientationNotifications` 和 `endGeneratingDeviceOrientationNotifications`。\n\n## 结论\n\n当 `-[UIWindow setRootViewController:]`的时候，系统会调用 `beginGeneratingDeviceOrientationNotifications`，当 `-[UIWindow dealloc]` 时，会调用 `endGeneratingDeviceOrientationNotifications`，这么看系统的这个逻辑是没什么问题的。\n问题出在于 WebRTC 中，在 start video session 的时候有调用 `beginGeneratingDeviceOrientationNotifications`，stop video session 的时候有调用 `endGeneratingDeviceOrientationNotifications`。但是CoreLib里的代码有点问题，start video session 的时候并没有调用 `beginGeneratingDeviceOrientationNotifications` ，导致这两个没有成对出现，从而出错。\n\n\n以前没有特别关注过这三者：\n\n```objc\n@property(nonatomic,readonly,getter=isGeneratingDeviceOrientationNotifications) BOOL generatesDeviceOrientationNotifications __TVOS_PROHIBITED;\n- (void)beginGeneratingDeviceOrientationNotifications __TVOS_PROHIBITED;      // nestable\n- (void)endGeneratingDeviceOrientationNotifications __TVOS_PROHIBITED;\n```\n\n以后遇到旋转问题，又多了一条思路了..","slug":"find-a-wierd-bug","published":1,"updated":"2022-10-25T02:57:42.645Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9nmc48800088wwxhxrjxqrt","content":"<h2 id=\"现象\"><a href=\"#现象\" class=\"headerlink\" title=\"现象\"></a>现象</h2><p>最近发现一个很神奇的bug，加入某个会议之后然后退出，重复3次，界面就无法旋转了。</p>\n<h2 id=\"猜测\"><a href=\"#猜测\" class=\"headerlink\" title=\"猜测\"></a>猜测</h2><h3 id=\"猜测1⃣️\"><a href=\"#猜测1⃣️\" class=\"headerlink\" title=\"猜测1⃣️\"></a>猜测1⃣️</h3><p>无法旋转，在确认旋转锁定关闭的情况下，第一个想法是，看看support orientation 相关的函数返回值是否正确。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func application(_ application: UIApplication, supportedInterfaceOrientationsFor window: UIWindow?) -&gt; UIInterfaceOrientationMask</span><br><span class=\"line\"></span><br><span class=\"line\">open override var shouldAutorotate: Bool </span><br><span class=\"line\"></span><br><span class=\"line\">open override var supportedInterfaceOrientations: UIInterfaceOrientationMask</span><br></pre></td></tr></table></figure>\n<p>于是打了三个全局断点，一个一个调试…</p>\n<p>果不其然…<br>都<strong>没什么问题</strong>…</p>\n<p>但是这里有个现象，当出现bug（即无法旋转）的时候，这些函数都不会被调用了。</p>\n<h3 id=\"猜测2⃣️\"><a href=\"#猜测2⃣️\" class=\"headerlink\" title=\"猜测2⃣️\"></a>猜测2⃣️</h3><p>如果不是支持方向不对的话，回头看了一下现象：重复三次…<br>于是继续猜测，会不会跟内存泄漏有关，之前有遇到过内存相关问题的现象也是重复操作n次出现。</p>\n<p>于是调试了一下…</p>\n<p>果不其然…<br>还是<strong>没什么问题</strong>…</p>\n<h2 id=\"寻找思路\"><a href=\"#寻找思路\" class=\"headerlink\" title=\"寻找思路\"></a>寻找思路</h2><p>前面的猜测都不对，一下子就懵逼了，毫无头绪。后来仔细想了想，要不试试从系统接口找找问题，既然要旋转，最后肯定会落地到系统层面的某个方法上。</p>\n<p>于是打了个断点在 <code>-[UIViewController shouldAutorotate]</code></p>\n<p>当设备可以旋转的时候，调用栈如下:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* thread #1, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1</span><br><span class=\"line\">  * frame #<span class=\"number\">0</span>: <span class=\"number\">0x00000001d039de80</span> UIKitCore`-[UIViewController shouldAutorotate]</span><br><span class=\"line\">    frame #<span class=\"number\">1</span>: <span class=\"number\">0x00000001d039f8b8</span> UIKitCore`-[UIViewController _updateLastKnownInterfaceOrientationOnPresentionStack:] + <span class=\"number\">144</span></span><br><span class=\"line\">    frame #<span class=\"number\">2</span>: <span class=\"number\">0x00000001d03a0e84</span> UIKitCore`-[UIViewController window:willAnimateRotationToInterfaceOrientation:duration:newSize:] + <span class=\"number\">92</span></span><br><span class=\"line\">    frame #<span class=\"number\">3</span>: <span class=\"number\">0x00000001d03a8270</span> UIKitCore`__95-[UIViewController(AdaptiveSizing) _window:viewWillTransitionToSize:withTransitionCoordinator:]_block_invoke<span class=\"number\">.3392</span> + <span class=\"number\">48</span></span><br><span class=\"line\">    frame #<span class=\"number\">4</span>: <span class=\"number\">0x00000001d03af570</span> UIKitCore`-[_UIViewControllerTransitionCoordinator _applyBlocks:releaseBlocks:] + <span class=\"number\">264</span></span><br><span class=\"line\">    frame #<span class=\"number\">5</span>: <span class=\"number\">0x00000001d03abb64</span> UIKitCore`-[_UIViewControllerTransitionContext __runAlongsideAnimations] + <span class=\"number\">176</span></span><br><span class=\"line\">    frame #<span class=\"number\">6</span>: <span class=\"number\">0x00000001d0da7f40</span> UIKitCore`+[UIView(UIViewAnimationWithBlocks) _setupAnimationWithDuration:delay:view:options:factory:animations:start:animationStateGenerator:completion:] + <span class=\"number\">608</span></span><br><span class=\"line\">    frame #<span class=\"number\">7</span>: <span class=\"number\">0x00000001d0da8480</span> UIKitCore`+[UIView(UIViewAnimationWithBlocks) animateWithDuration:delay:options:animations:completion:] + <span class=\"number\">108</span></span><br><span class=\"line\">    frame #<span class=\"number\">8</span>: <span class=\"number\">0x000000010710a74c</span> Glip`+[UIView(instrumentation) ADEumAnimateWithDuration:delay:options:animations:completion:] + <span class=\"number\">300</span></span><br><span class=\"line\">    frame #<span class=\"number\">9</span>: <span class=\"number\">0x00000001d03c29e8</span> UIKitCore`__58-[_UIWindowRotationAnimationController animateTransition:]_block_invoke_2 + <span class=\"number\">308</span></span><br><span class=\"line\">    frame #<span class=\"number\">10</span>: <span class=\"number\">0x00000001d0dac560</span> UIKitCore`+[UIView(Internal) _performBlockDelayingTriggeringResponderEvents:] + <span class=\"number\">220</span></span><br><span class=\"line\">    frame #<span class=\"number\">11</span>: <span class=\"number\">0x00000001d03c2778</span> UIKitCore`__58-[_UIWindowRotationAnimationController animateTransition:]_block_invoke + <span class=\"number\">128</span></span><br><span class=\"line\">    frame #<span class=\"number\">12</span>: <span class=\"number\">0x00000001d0da7f40</span> UIKitCore`+[UIView(UIViewAnimationWithBlocks) _setupAnimationWithDuration:delay:view:options:factory:animations:start:animationStateGenerator:completion:] + <span class=\"number\">608</span></span><br><span class=\"line\">    frame #<span class=\"number\">13</span>: <span class=\"number\">0x00000001d0da8480</span> UIKitCore`+[UIView(UIViewAnimationWithBlocks) animateWithDuration:delay:options:animations:completion:] + <span class=\"number\">108</span></span><br><span class=\"line\">    frame #<span class=\"number\">14</span>: <span class=\"number\">0x000000010710a74c</span> Glip`+[UIView(instrumentation) ADEumAnimateWithDuration:delay:options:animations:completion:] + <span class=\"number\">300</span></span><br><span class=\"line\">    frame #<span class=\"number\">15</span>: <span class=\"number\">0x00000001d03c2650</span> UIKitCore`-[_UIWindowRotationAnimationController animateTransition:] + <span class=\"number\">456</span></span><br><span class=\"line\">    frame #<span class=\"number\">16</span>: <span class=\"number\">0x00000001d0968398</span> UIKitCore`-[UIWindow _rotateToBounds:withAnimator:transitionContext:] + <span class=\"number\">580</span></span><br><span class=\"line\">    frame #<span class=\"number\">17</span>: <span class=\"number\">0x00000001d096aafc</span> UIKitCore`-[UIWindow _rotateWindowToOrientation:updateStatusBar:duration:skipCallbacks:] + <span class=\"number\">1184</span></span><br><span class=\"line\">    frame #<span class=\"number\">18</span>: <span class=\"number\">0x00000001d096b1b0</span> UIKitCore`-[UIWindow _setRotatableClient:toOrientation:updateStatusBar:duration:force:isRotating:] + <span class=\"number\">516</span></span><br><span class=\"line\">    frame #<span class=\"number\">19</span>: <span class=\"number\">0x00000001d096a5b0</span> UIKitCore`-[UIWindow _setRotatableViewOrientation:updateStatusBar:duration:force:] + <span class=\"number\">128</span></span><br><span class=\"line\">    frame #<span class=\"number\">20</span>: <span class=\"number\">0x00000001d096925c</span> UIKitCore`__57-[UIWindow _updateToInterfaceOrientation:duration:force:]_block_invoke + <span class=\"number\">124</span></span><br><span class=\"line\">    frame #<span class=\"number\">21</span>: <span class=\"number\">0x00000001d0969160</span> UIKitCore`-[UIWindow _updateToInterfaceOrientation:duration:force:] + <span class=\"number\">560</span></span><br><span class=\"line\">    frame #<span class=\"number\">22</span>: <span class=\"number\">0x00000001a43595bc</span> CoreFoundation`__CFNOTIFICATIONCENTER_IS_CALLING_OUT_TO_AN_OBSERVER__ + <span class=\"number\">20</span></span><br><span class=\"line\">    frame #<span class=\"number\">23</span>: <span class=\"number\">0x00000001a4359588</span> CoreFoundation`___CFXRegistrationPost_block_invoke + <span class=\"number\">64</span></span><br><span class=\"line\">    frame #<span class=\"number\">24</span>: <span class=\"number\">0x00000001a4358a7c</span> CoreFoundation`_CFXRegistrationPost + <span class=\"number\">392</span></span><br><span class=\"line\">    frame #<span class=\"number\">25</span>: <span class=\"number\">0x00000001a4358728</span> CoreFoundation`___CFXNotificationPost_block_invoke + <span class=\"number\">96</span></span><br><span class=\"line\">    frame #<span class=\"number\">26</span>: <span class=\"number\">0x00000001a42d2524</span> CoreFoundation`-[_CFXNotificationRegistrar find:object:observer:enumerator:] + <span class=\"number\">1496</span></span><br><span class=\"line\">    frame #<span class=\"number\">27</span>: <span class=\"number\">0x00000001a43581d8</span> CoreFoundation`_CFXNotificationPost + <span class=\"number\">696</span></span><br><span class=\"line\">    frame #<span class=\"number\">28</span>: <span class=\"number\">0x00000001a4d40814</span> Foundation`-[NSNotificationCenter postNotificationName:object:userInfo:] + <span class=\"number\">68</span></span><br><span class=\"line\">    frame #<span class=\"number\">29</span>: <span class=\"number\">0x00000001d05c2030</span> UIKitCore`-[UIDevice setOrientation:animated:] + <span class=\"number\">328</span></span><br><span class=\"line\">    frame #<span class=\"number\">30</span>: <span class=\"number\">0x00000001d01f071c</span> UIKitCore`__124-[_UICanvasDeviceOrientationSettingsDiffAction _updateDeviceOrientationWithSettingObserverContext:canvas:transitionContext:]_block_invoke + <span class=\"number\">88</span></span><br><span class=\"line\">    frame #<span class=\"number\">31</span>: <span class=\"number\">0x00000001d01f2304</span> UIKitCore`_performChangesWithTransitionContext + <span class=\"number\">836</span></span><br><span class=\"line\">    frame #<span class=\"number\">32</span>: <span class=\"number\">0x00000001d01f0688</span> UIKitCore`-[_UICanvasDeviceOrientationSettingsDiffAction _updateDeviceOrientationWithSettingObserverContext:canvas:transitionContext:] + <span class=\"number\">236</span></span><br><span class=\"line\">    frame #<span class=\"number\">33</span>: <span class=\"number\">0x00000001d01f058c</span> UIKitCore`__133-[_UICanvasDeviceOrientationSettingsDiffAction performActionsForCanvas:withUpdatedScene:settingsDiff:fromSettings:transitionContext:]_block_invoke + <span class=\"number\">104</span></span><br><span class=\"line\">    frame #<span class=\"number\">34</span>: <span class=\"number\">0x00000001d01f1fb0</span> UIKitCore`_performActionsWithDelayForTransitionContext + <span class=\"number\">112</span></span><br><span class=\"line\">    frame #<span class=\"number\">35</span>: <span class=\"number\">0x00000001d01f04e0</span> UIKitCore`-[_UICanvasDeviceOrientationSettingsDiffAction performActionsForCanvas:withUpdatedScene:settingsDiff:fromSettings:transitionContext:] + <span class=\"number\">172</span></span><br><span class=\"line\">    frame #<span class=\"number\">36</span>: <span class=\"number\">0x00000001d01f5d84</span> UIKitCore`-[_UICanvas scene:didUpdateWithDiff:transitionContext:completion:] + <span class=\"number\">360</span></span><br><span class=\"line\">    frame #<span class=\"number\">37</span>: <span class=\"number\">0x00000001d05253b8</span> UIKitCore`-[UIApplicationSceneClientAgent scene:handleEvent:withCompletion:] + <span class=\"number\">464</span></span><br><span class=\"line\">    frame #<span class=\"number\">38</span>: <span class=\"number\">0x00000001a6d63920</span> FrontBoardServices`__80-[FBSSceneImpl updater:didUpdateSettings:withDiff:transitionContext:completion:]_block_invoke_3 + <span class=\"number\">224</span></span><br><span class=\"line\">    frame #<span class=\"number\">39</span>: <span class=\"number\">0x00000001356e4c74</span> libdispatch.dylib`_dispatch_client_callout + <span class=\"number\">16</span></span><br><span class=\"line\">    frame #<span class=\"number\">40</span>: <span class=\"number\">0x00000001356e8840</span> libdispatch.dylib`_dispatch_block_invoke_direct + <span class=\"number\">232</span></span><br><span class=\"line\">    frame #<span class=\"number\">41</span>: <span class=\"number\">0x00000001a6d9d0bc</span> FrontBoardServices`__FBSSERIALQUEUE_IS_CALLING_OUT_TO_A_BLOCK__ + <span class=\"number\">40</span></span><br><span class=\"line\">    frame #<span class=\"number\">42</span>: <span class=\"number\">0x00000001a6d9cd58</span> FrontBoardServices`-[FBSSerialQueue _performNext] + <span class=\"number\">408</span></span><br><span class=\"line\">    frame #<span class=\"number\">43</span>: <span class=\"number\">0x00000001a6d9d310</span> FrontBoardServices`-[FBSSerialQueue _performNextFromRunLoopSource] + <span class=\"number\">52</span></span><br><span class=\"line\">    frame #<span class=\"number\">44</span>: <span class=\"number\">0x00000001a437a2bc</span> CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__ + <span class=\"number\">24</span></span><br><span class=\"line\">    frame #<span class=\"number\">45</span>: <span class=\"number\">0x00000001a437a23c</span> CoreFoundation`__CFRunLoopDoSource0 + <span class=\"number\">88</span></span><br><span class=\"line\">    frame #<span class=\"number\">46</span>: <span class=\"number\">0x00000001a4379b24</span> CoreFoundation`__CFRunLoopDoSources0 + <span class=\"number\">176</span></span><br><span class=\"line\">    frame #<span class=\"number\">47</span>: <span class=\"number\">0x00000001a4374a60</span> CoreFoundation`__CFRunLoopRun + <span class=\"number\">1004</span></span><br><span class=\"line\">    frame #<span class=\"number\">48</span>: <span class=\"number\">0x00000001a4374354</span> CoreFoundation`CFRunLoopRunSpecific + <span class=\"number\">436</span></span><br><span class=\"line\">    frame #<span class=\"number\">49</span>: <span class=\"number\">0x00000001a657479c</span> GraphicsServices`GSEventRunModal + <span class=\"number\">104</span></span><br><span class=\"line\">    frame #<span class=\"number\">50</span>: <span class=\"number\">0x00000001d092bb68</span> UIKitCore`UIApplicationMain + <span class=\"number\">212</span></span><br><span class=\"line\">    frame #<span class=\"number\">51</span>: <span class=\"number\">0x000000010525d370</span> Glip`main at AppDelegate.swift:<span class=\"number\">67</span>:<span class=\"number\">7</span></span><br><span class=\"line\">    frame #<span class=\"number\">52</span>: <span class=\"number\">0x00000001a3e3a8e0</span> libdyld.dylib`start + <span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n<p>最后通过断点定位，发现问题出在</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">frame #<span class=\"number\">22</span>: <span class=\"number\">0x00000001a43595bc</span> CoreFoundation`__CFNOTIFICATIONCENTER_IS_CALLING_OUT_TO_AN_OBSERVER__ + <span class=\"number\">20</span></span><br><span class=\"line\">frame #<span class=\"number\">23</span>: <span class=\"number\">0x00000001a4359588</span> CoreFoundation`___CFXRegistrationPost_block_invoke + <span class=\"number\">64</span></span><br><span class=\"line\">frame #<span class=\"number\">24</span>: <span class=\"number\">0x00000001a4358a7c</span> CoreFoundation`_CFXRegistrationPost + <span class=\"number\">392</span></span><br><span class=\"line\">frame #<span class=\"number\">25</span>: <span class=\"number\">0x00000001a4358728</span> CoreFoundation`___CFXNotificationPost_block_invoke + <span class=\"number\">96</span></span><br><span class=\"line\">frame #<span class=\"number\">26</span>: <span class=\"number\">0x00000001a42d2524</span> CoreFoundation`-[_CFXNotificationRegistrar find:object:observer:enumerator:] + <span class=\"number\">1496</span></span><br><span class=\"line\">frame #<span class=\"number\">27</span>: <span class=\"number\">0x00000001a43581d8</span> CoreFoundation`_CFXNotificationPost + <span class=\"number\">696</span></span><br><span class=\"line\">frame #<span class=\"number\">28</span>: <span class=\"number\">0x00000001a4d40814</span> Foundation`-[NSNotificationCenter postNotificationName:object:userInfo:] + <span class=\"number\">68</span></span><br><span class=\"line\">frame #<span class=\"number\">29</span>: <span class=\"number\">0x00000001d05c2030</span> UIKitCore`-[UIDevice setOrientation:animated:] + <span class=\"number\">328</span></span><br></pre></td></tr></table></figure>\n<p>不论APP是否支持旋转，<code>[UIDevice setOrientation:animated:]</code> 都会调用，且参数值也是对的。关键在于下一步，当APP支持旋转的时候，会发出一个<code>UIDeviceOrientationDidChangeNotification</code> 通知，不支持旋转的时候就不会。</p>\n<p>于是问题就转化成了：什么情况下，系统有可能会不发出 <code>UIDeviceOrientationDidChangeNotification</code> 通知呢？</p>\n<p>遇事不决，看文档。</p>\n<p>在 <code>UIDevice.h</code> 中找到这三个玩意儿</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">readonly</span>,<span class=\"keyword\">getter</span>=isGeneratingDeviceOrientationNotifications) <span class=\"built_in\">BOOL</span> generatesDeviceOrientationNotifications __TVOS_PROHIBITED;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)beginGeneratingDeviceOrientationNotifications __TVOS_PROHIBITED;      <span class=\"comment\">// nestable</span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)endGeneratingDeviceOrientationNotifications __TVOS_PROHIBITED;</span><br></pre></td></tr></table></figure>\n<p>看着应该就是罪魁祸首了。</p>\n<h2 id=\"定位问题\"><a href=\"#定位问题\" class=\"headerlink\" title=\"定位问题\"></a>定位问题</h2><p>调试发现，在APP支持旋转时 <code>isGeneratingDeviceOrientationNotifications = true</code>；<br>不支持时  <code>isGeneratingDeviceOrientationNotifications=false</code>。</p>\n<p>查看 <code>generatesDeviceOrientationNotifications</code> 文档：</p>\n<blockquote>\n<p>If the value of this property is YES, the shared UIDevice object posts a UIDeviceOrientationDidChangeNotification notification when the device changes orientation. If the value is NO, it generates no orientation notifications. Device orientation notifications can only be generated between calls to the beginGeneratingDeviceOrientationNotifications and endGeneratingDeviceOrientationNotifications methods.</p>\n</blockquote>\n<p>查看 <code>beginGeneratingDeviceOrientationNotifications</code> 文档：</p>\n<blockquote>\n<p>You must call this method before attempting to get orientation data from the receiver. This method enables the device’s accelerometer hardware and begins the delivery of acceleration events to the receiver. The receiver subsequently uses these events to post UIDeviceOrientationDidChangeNotification notifications when the device orientation changes and to update the orientation property.<br>You may nest calls to this method safely, but you should always match each call with a corresponding call to the endGeneratingDeviceOrientationNotifications method.</p>\n</blockquote>\n<p>所以 <code>isGeneratingDeviceOrientationNotifications</code> 的值是受另外两个方法影响的。</p>\n<p><strong>看来已经找到原因了</strong></p>\n<p>继续调试发现，项目代码内部并没有调用到 <code>beginGeneratingDeviceOrientationNotifications</code> 和 <code>endGeneratingDeviceOrientationNotifications</code>。</p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>当 <code>-[UIWindow setRootViewController:]</code>的时候，系统会调用 <code>beginGeneratingDeviceOrientationNotifications</code>，当 <code>-[UIWindow dealloc]</code> 时，会调用 <code>endGeneratingDeviceOrientationNotifications</code>，这么看系统的这个逻辑是没什么问题的。<br>问题出在于 WebRTC 中，在 start video session 的时候有调用 <code>beginGeneratingDeviceOrientationNotifications</code>，stop video session 的时候有调用 <code>endGeneratingDeviceOrientationNotifications</code>。但是CoreLib里的代码有点问题，start video session 的时候并没有调用 <code>beginGeneratingDeviceOrientationNotifications</code> ，导致这两个没有成对出现，从而出错。</p>\n<p>以前没有特别关注过这三者：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">readonly</span>,<span class=\"keyword\">getter</span>=isGeneratingDeviceOrientationNotifications) <span class=\"built_in\">BOOL</span> generatesDeviceOrientationNotifications __TVOS_PROHIBITED;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)beginGeneratingDeviceOrientationNotifications __TVOS_PROHIBITED;      <span class=\"comment\">// nestable</span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)endGeneratingDeviceOrientationNotifications __TVOS_PROHIBITED;</span><br></pre></td></tr></table></figure>\n<p>以后遇到旋转问题，又多了一条思路了..</p>\n","site":{"data":{"links":{"Colin’s Nest":{"link":"http://colin1994.github.io/","avatar":"http://example.com/avatar.png"},"Vong":{"link":"https://vongloo.me/","avatar":"http://example.com/avatar.png"},"Punmy":{"link":"https://punmy.cn/","avatar":"http://example.com/avatar.png"},"细语呢喃":{"link":"https://www.hrwhisper.me/","avatar":"http://example.com/avatar.png"},"栖迟于一丘":{"link":"https://www.hongweipeng.com/","avatar":"http://example.com/avatar.png"},"B1ueW01f":{"link":"https://www.b1uew01f.net/","avatar":"http://example.com/avatar.png"},"忘归":{"link":"http://jalan.space/","avatar":"http://example.com/avatar.png"},"进阶者":{"link":"https://ruphi.cn/","avatar":"http://example.com/avatar.png"},"LIZIMEOW'S BLOG":{"link":"http://lizimeow.cn/","avatar":"http://example.com/avatar.png"},"Saitjr":{"link":"http://www.saitjr.com/","avatar":null}}}},"excerpt":"","more":"<h2 id=\"现象\"><a href=\"#现象\" class=\"headerlink\" title=\"现象\"></a>现象</h2><p>最近发现一个很神奇的bug，加入某个会议之后然后退出，重复3次，界面就无法旋转了。</p>\n<h2 id=\"猜测\"><a href=\"#猜测\" class=\"headerlink\" title=\"猜测\"></a>猜测</h2><h3 id=\"猜测1⃣️\"><a href=\"#猜测1⃣️\" class=\"headerlink\" title=\"猜测1⃣️\"></a>猜测1⃣️</h3><p>无法旋转，在确认旋转锁定关闭的情况下，第一个想法是，看看support orientation 相关的函数返回值是否正确。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func application(_ application: UIApplication, supportedInterfaceOrientationsFor window: UIWindow?) -&gt; UIInterfaceOrientationMask</span><br><span class=\"line\"></span><br><span class=\"line\">open override var shouldAutorotate: Bool </span><br><span class=\"line\"></span><br><span class=\"line\">open override var supportedInterfaceOrientations: UIInterfaceOrientationMask</span><br></pre></td></tr></table></figure>\n<p>于是打了三个全局断点，一个一个调试…</p>\n<p>果不其然…<br>都<strong>没什么问题</strong>…</p>\n<p>但是这里有个现象，当出现bug（即无法旋转）的时候，这些函数都不会被调用了。</p>\n<h3 id=\"猜测2⃣️\"><a href=\"#猜测2⃣️\" class=\"headerlink\" title=\"猜测2⃣️\"></a>猜测2⃣️</h3><p>如果不是支持方向不对的话，回头看了一下现象：重复三次…<br>于是继续猜测，会不会跟内存泄漏有关，之前有遇到过内存相关问题的现象也是重复操作n次出现。</p>\n<p>于是调试了一下…</p>\n<p>果不其然…<br>还是<strong>没什么问题</strong>…</p>\n<h2 id=\"寻找思路\"><a href=\"#寻找思路\" class=\"headerlink\" title=\"寻找思路\"></a>寻找思路</h2><p>前面的猜测都不对，一下子就懵逼了，毫无头绪。后来仔细想了想，要不试试从系统接口找找问题，既然要旋转，最后肯定会落地到系统层面的某个方法上。</p>\n<p>于是打了个断点在 <code>-[UIViewController shouldAutorotate]</code></p>\n<p>当设备可以旋转的时候，调用栈如下:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* thread #1, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1</span><br><span class=\"line\">  * frame #<span class=\"number\">0</span>: <span class=\"number\">0x00000001d039de80</span> UIKitCore`-[UIViewController shouldAutorotate]</span><br><span class=\"line\">    frame #<span class=\"number\">1</span>: <span class=\"number\">0x00000001d039f8b8</span> UIKitCore`-[UIViewController _updateLastKnownInterfaceOrientationOnPresentionStack:] + <span class=\"number\">144</span></span><br><span class=\"line\">    frame #<span class=\"number\">2</span>: <span class=\"number\">0x00000001d03a0e84</span> UIKitCore`-[UIViewController window:willAnimateRotationToInterfaceOrientation:duration:newSize:] + <span class=\"number\">92</span></span><br><span class=\"line\">    frame #<span class=\"number\">3</span>: <span class=\"number\">0x00000001d03a8270</span> UIKitCore`__95-[UIViewController(AdaptiveSizing) _window:viewWillTransitionToSize:withTransitionCoordinator:]_block_invoke<span class=\"number\">.3392</span> + <span class=\"number\">48</span></span><br><span class=\"line\">    frame #<span class=\"number\">4</span>: <span class=\"number\">0x00000001d03af570</span> UIKitCore`-[_UIViewControllerTransitionCoordinator _applyBlocks:releaseBlocks:] + <span class=\"number\">264</span></span><br><span class=\"line\">    frame #<span class=\"number\">5</span>: <span class=\"number\">0x00000001d03abb64</span> UIKitCore`-[_UIViewControllerTransitionContext __runAlongsideAnimations] + <span class=\"number\">176</span></span><br><span class=\"line\">    frame #<span class=\"number\">6</span>: <span class=\"number\">0x00000001d0da7f40</span> UIKitCore`+[UIView(UIViewAnimationWithBlocks) _setupAnimationWithDuration:delay:view:options:factory:animations:start:animationStateGenerator:completion:] + <span class=\"number\">608</span></span><br><span class=\"line\">    frame #<span class=\"number\">7</span>: <span class=\"number\">0x00000001d0da8480</span> UIKitCore`+[UIView(UIViewAnimationWithBlocks) animateWithDuration:delay:options:animations:completion:] + <span class=\"number\">108</span></span><br><span class=\"line\">    frame #<span class=\"number\">8</span>: <span class=\"number\">0x000000010710a74c</span> Glip`+[UIView(instrumentation) ADEumAnimateWithDuration:delay:options:animations:completion:] + <span class=\"number\">300</span></span><br><span class=\"line\">    frame #<span class=\"number\">9</span>: <span class=\"number\">0x00000001d03c29e8</span> UIKitCore`__58-[_UIWindowRotationAnimationController animateTransition:]_block_invoke_2 + <span class=\"number\">308</span></span><br><span class=\"line\">    frame #<span class=\"number\">10</span>: <span class=\"number\">0x00000001d0dac560</span> UIKitCore`+[UIView(Internal) _performBlockDelayingTriggeringResponderEvents:] + <span class=\"number\">220</span></span><br><span class=\"line\">    frame #<span class=\"number\">11</span>: <span class=\"number\">0x00000001d03c2778</span> UIKitCore`__58-[_UIWindowRotationAnimationController animateTransition:]_block_invoke + <span class=\"number\">128</span></span><br><span class=\"line\">    frame #<span class=\"number\">12</span>: <span class=\"number\">0x00000001d0da7f40</span> UIKitCore`+[UIView(UIViewAnimationWithBlocks) _setupAnimationWithDuration:delay:view:options:factory:animations:start:animationStateGenerator:completion:] + <span class=\"number\">608</span></span><br><span class=\"line\">    frame #<span class=\"number\">13</span>: <span class=\"number\">0x00000001d0da8480</span> UIKitCore`+[UIView(UIViewAnimationWithBlocks) animateWithDuration:delay:options:animations:completion:] + <span class=\"number\">108</span></span><br><span class=\"line\">    frame #<span class=\"number\">14</span>: <span class=\"number\">0x000000010710a74c</span> Glip`+[UIView(instrumentation) ADEumAnimateWithDuration:delay:options:animations:completion:] + <span class=\"number\">300</span></span><br><span class=\"line\">    frame #<span class=\"number\">15</span>: <span class=\"number\">0x00000001d03c2650</span> UIKitCore`-[_UIWindowRotationAnimationController animateTransition:] + <span class=\"number\">456</span></span><br><span class=\"line\">    frame #<span class=\"number\">16</span>: <span class=\"number\">0x00000001d0968398</span> UIKitCore`-[UIWindow _rotateToBounds:withAnimator:transitionContext:] + <span class=\"number\">580</span></span><br><span class=\"line\">    frame #<span class=\"number\">17</span>: <span class=\"number\">0x00000001d096aafc</span> UIKitCore`-[UIWindow _rotateWindowToOrientation:updateStatusBar:duration:skipCallbacks:] + <span class=\"number\">1184</span></span><br><span class=\"line\">    frame #<span class=\"number\">18</span>: <span class=\"number\">0x00000001d096b1b0</span> UIKitCore`-[UIWindow _setRotatableClient:toOrientation:updateStatusBar:duration:force:isRotating:] + <span class=\"number\">516</span></span><br><span class=\"line\">    frame #<span class=\"number\">19</span>: <span class=\"number\">0x00000001d096a5b0</span> UIKitCore`-[UIWindow _setRotatableViewOrientation:updateStatusBar:duration:force:] + <span class=\"number\">128</span></span><br><span class=\"line\">    frame #<span class=\"number\">20</span>: <span class=\"number\">0x00000001d096925c</span> UIKitCore`__57-[UIWindow _updateToInterfaceOrientation:duration:force:]_block_invoke + <span class=\"number\">124</span></span><br><span class=\"line\">    frame #<span class=\"number\">21</span>: <span class=\"number\">0x00000001d0969160</span> UIKitCore`-[UIWindow _updateToInterfaceOrientation:duration:force:] + <span class=\"number\">560</span></span><br><span class=\"line\">    frame #<span class=\"number\">22</span>: <span class=\"number\">0x00000001a43595bc</span> CoreFoundation`__CFNOTIFICATIONCENTER_IS_CALLING_OUT_TO_AN_OBSERVER__ + <span class=\"number\">20</span></span><br><span class=\"line\">    frame #<span class=\"number\">23</span>: <span class=\"number\">0x00000001a4359588</span> CoreFoundation`___CFXRegistrationPost_block_invoke + <span class=\"number\">64</span></span><br><span class=\"line\">    frame #<span class=\"number\">24</span>: <span class=\"number\">0x00000001a4358a7c</span> CoreFoundation`_CFXRegistrationPost + <span class=\"number\">392</span></span><br><span class=\"line\">    frame #<span class=\"number\">25</span>: <span class=\"number\">0x00000001a4358728</span> CoreFoundation`___CFXNotificationPost_block_invoke + <span class=\"number\">96</span></span><br><span class=\"line\">    frame #<span class=\"number\">26</span>: <span class=\"number\">0x00000001a42d2524</span> CoreFoundation`-[_CFXNotificationRegistrar find:object:observer:enumerator:] + <span class=\"number\">1496</span></span><br><span class=\"line\">    frame #<span class=\"number\">27</span>: <span class=\"number\">0x00000001a43581d8</span> CoreFoundation`_CFXNotificationPost + <span class=\"number\">696</span></span><br><span class=\"line\">    frame #<span class=\"number\">28</span>: <span class=\"number\">0x00000001a4d40814</span> Foundation`-[NSNotificationCenter postNotificationName:object:userInfo:] + <span class=\"number\">68</span></span><br><span class=\"line\">    frame #<span class=\"number\">29</span>: <span class=\"number\">0x00000001d05c2030</span> UIKitCore`-[UIDevice setOrientation:animated:] + <span class=\"number\">328</span></span><br><span class=\"line\">    frame #<span class=\"number\">30</span>: <span class=\"number\">0x00000001d01f071c</span> UIKitCore`__124-[_UICanvasDeviceOrientationSettingsDiffAction _updateDeviceOrientationWithSettingObserverContext:canvas:transitionContext:]_block_invoke + <span class=\"number\">88</span></span><br><span class=\"line\">    frame #<span class=\"number\">31</span>: <span class=\"number\">0x00000001d01f2304</span> UIKitCore`_performChangesWithTransitionContext + <span class=\"number\">836</span></span><br><span class=\"line\">    frame #<span class=\"number\">32</span>: <span class=\"number\">0x00000001d01f0688</span> UIKitCore`-[_UICanvasDeviceOrientationSettingsDiffAction _updateDeviceOrientationWithSettingObserverContext:canvas:transitionContext:] + <span class=\"number\">236</span></span><br><span class=\"line\">    frame #<span class=\"number\">33</span>: <span class=\"number\">0x00000001d01f058c</span> UIKitCore`__133-[_UICanvasDeviceOrientationSettingsDiffAction performActionsForCanvas:withUpdatedScene:settingsDiff:fromSettings:transitionContext:]_block_invoke + <span class=\"number\">104</span></span><br><span class=\"line\">    frame #<span class=\"number\">34</span>: <span class=\"number\">0x00000001d01f1fb0</span> UIKitCore`_performActionsWithDelayForTransitionContext + <span class=\"number\">112</span></span><br><span class=\"line\">    frame #<span class=\"number\">35</span>: <span class=\"number\">0x00000001d01f04e0</span> UIKitCore`-[_UICanvasDeviceOrientationSettingsDiffAction performActionsForCanvas:withUpdatedScene:settingsDiff:fromSettings:transitionContext:] + <span class=\"number\">172</span></span><br><span class=\"line\">    frame #<span class=\"number\">36</span>: <span class=\"number\">0x00000001d01f5d84</span> UIKitCore`-[_UICanvas scene:didUpdateWithDiff:transitionContext:completion:] + <span class=\"number\">360</span></span><br><span class=\"line\">    frame #<span class=\"number\">37</span>: <span class=\"number\">0x00000001d05253b8</span> UIKitCore`-[UIApplicationSceneClientAgent scene:handleEvent:withCompletion:] + <span class=\"number\">464</span></span><br><span class=\"line\">    frame #<span class=\"number\">38</span>: <span class=\"number\">0x00000001a6d63920</span> FrontBoardServices`__80-[FBSSceneImpl updater:didUpdateSettings:withDiff:transitionContext:completion:]_block_invoke_3 + <span class=\"number\">224</span></span><br><span class=\"line\">    frame #<span class=\"number\">39</span>: <span class=\"number\">0x00000001356e4c74</span> libdispatch.dylib`_dispatch_client_callout + <span class=\"number\">16</span></span><br><span class=\"line\">    frame #<span class=\"number\">40</span>: <span class=\"number\">0x00000001356e8840</span> libdispatch.dylib`_dispatch_block_invoke_direct + <span class=\"number\">232</span></span><br><span class=\"line\">    frame #<span class=\"number\">41</span>: <span class=\"number\">0x00000001a6d9d0bc</span> FrontBoardServices`__FBSSERIALQUEUE_IS_CALLING_OUT_TO_A_BLOCK__ + <span class=\"number\">40</span></span><br><span class=\"line\">    frame #<span class=\"number\">42</span>: <span class=\"number\">0x00000001a6d9cd58</span> FrontBoardServices`-[FBSSerialQueue _performNext] + <span class=\"number\">408</span></span><br><span class=\"line\">    frame #<span class=\"number\">43</span>: <span class=\"number\">0x00000001a6d9d310</span> FrontBoardServices`-[FBSSerialQueue _performNextFromRunLoopSource] + <span class=\"number\">52</span></span><br><span class=\"line\">    frame #<span class=\"number\">44</span>: <span class=\"number\">0x00000001a437a2bc</span> CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__ + <span class=\"number\">24</span></span><br><span class=\"line\">    frame #<span class=\"number\">45</span>: <span class=\"number\">0x00000001a437a23c</span> CoreFoundation`__CFRunLoopDoSource0 + <span class=\"number\">88</span></span><br><span class=\"line\">    frame #<span class=\"number\">46</span>: <span class=\"number\">0x00000001a4379b24</span> CoreFoundation`__CFRunLoopDoSources0 + <span class=\"number\">176</span></span><br><span class=\"line\">    frame #<span class=\"number\">47</span>: <span class=\"number\">0x00000001a4374a60</span> CoreFoundation`__CFRunLoopRun + <span class=\"number\">1004</span></span><br><span class=\"line\">    frame #<span class=\"number\">48</span>: <span class=\"number\">0x00000001a4374354</span> CoreFoundation`CFRunLoopRunSpecific + <span class=\"number\">436</span></span><br><span class=\"line\">    frame #<span class=\"number\">49</span>: <span class=\"number\">0x00000001a657479c</span> GraphicsServices`GSEventRunModal + <span class=\"number\">104</span></span><br><span class=\"line\">    frame #<span class=\"number\">50</span>: <span class=\"number\">0x00000001d092bb68</span> UIKitCore`UIApplicationMain + <span class=\"number\">212</span></span><br><span class=\"line\">    frame #<span class=\"number\">51</span>: <span class=\"number\">0x000000010525d370</span> Glip`main at AppDelegate.swift:<span class=\"number\">67</span>:<span class=\"number\">7</span></span><br><span class=\"line\">    frame #<span class=\"number\">52</span>: <span class=\"number\">0x00000001a3e3a8e0</span> libdyld.dylib`start + <span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n<p>最后通过断点定位，发现问题出在</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">frame #<span class=\"number\">22</span>: <span class=\"number\">0x00000001a43595bc</span> CoreFoundation`__CFNOTIFICATIONCENTER_IS_CALLING_OUT_TO_AN_OBSERVER__ + <span class=\"number\">20</span></span><br><span class=\"line\">frame #<span class=\"number\">23</span>: <span class=\"number\">0x00000001a4359588</span> CoreFoundation`___CFXRegistrationPost_block_invoke + <span class=\"number\">64</span></span><br><span class=\"line\">frame #<span class=\"number\">24</span>: <span class=\"number\">0x00000001a4358a7c</span> CoreFoundation`_CFXRegistrationPost + <span class=\"number\">392</span></span><br><span class=\"line\">frame #<span class=\"number\">25</span>: <span class=\"number\">0x00000001a4358728</span> CoreFoundation`___CFXNotificationPost_block_invoke + <span class=\"number\">96</span></span><br><span class=\"line\">frame #<span class=\"number\">26</span>: <span class=\"number\">0x00000001a42d2524</span> CoreFoundation`-[_CFXNotificationRegistrar find:object:observer:enumerator:] + <span class=\"number\">1496</span></span><br><span class=\"line\">frame #<span class=\"number\">27</span>: <span class=\"number\">0x00000001a43581d8</span> CoreFoundation`_CFXNotificationPost + <span class=\"number\">696</span></span><br><span class=\"line\">frame #<span class=\"number\">28</span>: <span class=\"number\">0x00000001a4d40814</span> Foundation`-[NSNotificationCenter postNotificationName:object:userInfo:] + <span class=\"number\">68</span></span><br><span class=\"line\">frame #<span class=\"number\">29</span>: <span class=\"number\">0x00000001d05c2030</span> UIKitCore`-[UIDevice setOrientation:animated:] + <span class=\"number\">328</span></span><br></pre></td></tr></table></figure>\n<p>不论APP是否支持旋转，<code>[UIDevice setOrientation:animated:]</code> 都会调用，且参数值也是对的。关键在于下一步，当APP支持旋转的时候，会发出一个<code>UIDeviceOrientationDidChangeNotification</code> 通知，不支持旋转的时候就不会。</p>\n<p>于是问题就转化成了：什么情况下，系统有可能会不发出 <code>UIDeviceOrientationDidChangeNotification</code> 通知呢？</p>\n<p>遇事不决，看文档。</p>\n<p>在 <code>UIDevice.h</code> 中找到这三个玩意儿</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">readonly</span>,<span class=\"keyword\">getter</span>=isGeneratingDeviceOrientationNotifications) <span class=\"built_in\">BOOL</span> generatesDeviceOrientationNotifications __TVOS_PROHIBITED;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)beginGeneratingDeviceOrientationNotifications __TVOS_PROHIBITED;      <span class=\"comment\">// nestable</span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)endGeneratingDeviceOrientationNotifications __TVOS_PROHIBITED;</span><br></pre></td></tr></table></figure>\n<p>看着应该就是罪魁祸首了。</p>\n<h2 id=\"定位问题\"><a href=\"#定位问题\" class=\"headerlink\" title=\"定位问题\"></a>定位问题</h2><p>调试发现，在APP支持旋转时 <code>isGeneratingDeviceOrientationNotifications = true</code>；<br>不支持时  <code>isGeneratingDeviceOrientationNotifications=false</code>。</p>\n<p>查看 <code>generatesDeviceOrientationNotifications</code> 文档：</p>\n<blockquote>\n<p>If the value of this property is YES, the shared UIDevice object posts a UIDeviceOrientationDidChangeNotification notification when the device changes orientation. If the value is NO, it generates no orientation notifications. Device orientation notifications can only be generated between calls to the beginGeneratingDeviceOrientationNotifications and endGeneratingDeviceOrientationNotifications methods.</p>\n</blockquote>\n<p>查看 <code>beginGeneratingDeviceOrientationNotifications</code> 文档：</p>\n<blockquote>\n<p>You must call this method before attempting to get orientation data from the receiver. This method enables the device’s accelerometer hardware and begins the delivery of acceleration events to the receiver. The receiver subsequently uses these events to post UIDeviceOrientationDidChangeNotification notifications when the device orientation changes and to update the orientation property.<br>You may nest calls to this method safely, but you should always match each call with a corresponding call to the endGeneratingDeviceOrientationNotifications method.</p>\n</blockquote>\n<p>所以 <code>isGeneratingDeviceOrientationNotifications</code> 的值是受另外两个方法影响的。</p>\n<p><strong>看来已经找到原因了</strong></p>\n<p>继续调试发现，项目代码内部并没有调用到 <code>beginGeneratingDeviceOrientationNotifications</code> 和 <code>endGeneratingDeviceOrientationNotifications</code>。</p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>当 <code>-[UIWindow setRootViewController:]</code>的时候，系统会调用 <code>beginGeneratingDeviceOrientationNotifications</code>，当 <code>-[UIWindow dealloc]</code> 时，会调用 <code>endGeneratingDeviceOrientationNotifications</code>，这么看系统的这个逻辑是没什么问题的。<br>问题出在于 WebRTC 中，在 start video session 的时候有调用 <code>beginGeneratingDeviceOrientationNotifications</code>，stop video session 的时候有调用 <code>endGeneratingDeviceOrientationNotifications</code>。但是CoreLib里的代码有点问题，start video session 的时候并没有调用 <code>beginGeneratingDeviceOrientationNotifications</code> ，导致这两个没有成对出现，从而出错。</p>\n<p>以前没有特别关注过这三者：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">readonly</span>,<span class=\"keyword\">getter</span>=isGeneratingDeviceOrientationNotifications) <span class=\"built_in\">BOOL</span> generatesDeviceOrientationNotifications __TVOS_PROHIBITED;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)beginGeneratingDeviceOrientationNotifications __TVOS_PROHIBITED;      <span class=\"comment\">// nestable</span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)endGeneratingDeviceOrientationNotifications __TVOS_PROHIBITED;</span><br></pre></td></tr></table></figure>\n<p>以后遇到旋转问题，又多了一条思路了..</p>\n"},{"title":"贝塞尔曲线指北","date":"2016-11-03T09:37:01.000Z","_content":"\n最近在做项目的时候，需要用到一个动画，非常简单的动画，简单到就是直接对一个View做平移... 然而虽然动画简单，但是却很不自然，尝试了UIView Animation提供的各类参数，都无法达到想要的动画效果。这时候，我的脑子里突然想起一个词... “贝塞尔曲线”.... 这个词经常看到，但却从没有去了解过，这次就趁着有求于它的雅兴，好好做个入门了解好了。\n## 什么是贝塞尔曲线？  \n  显而易见的是，贝塞尔曲线，应该就是是一个叫贝塞尔的人发明的曲线吧，然而历史剧本却不是这么写的。贝塞尔曲线所依据的最原始的数学公式，是早在1912年就广为人知的伯恩斯坦多项式。OK，now，What is boensitan duoxiangshi？！简单来说，伯恩斯坦多项式可以用来证明，在\\[ a, b ] 区间上所有的连续函数都可以用多项式来逼近，并且收敛性很强，也就是一致收敛。再简单点，就是一个连续函数，你可以将它写成若干个伯恩斯坦多项式相加的形式，并且，随着 n→∞，这个多项式将一致收敛到原函数，这个就是伯恩斯坦斯的逼近性质。  \n  不知道在说什么鬼？没关系，接着说..  \n  到了1959年，当时就职于雪铁龙的法国数学家 Paul de Casteljau 开始对伯恩斯坦多项式进行了图形化的尝试，并且提供了一种数值稳定的德卡斯特里奥（de Casteljau） 算法。根据这个算法，就可以只通过很少的控制点，去生成复杂的平滑曲线，也就是贝塞尔曲线。     \n  而贝塞尔曲线的得名，得归功于1962年就职于雷诺的法国工程师皮埃尔·贝塞尔（Pierre Bézier），他使用这种方法来辅助汽车的车体工业设计，并且广泛宣传，因此大家才都称他为贝塞尔曲线  。\n## 贝塞尔曲线是怎么画出来的？\n首先，我们在平面内选3个不同线的点并且依次用线段连接。如下所示..  \n![](56030-48977fcfcd8cd57e.png)\n接着，我们在AB和BC线段上找出点D和点E，使得AD/AB = BE/BC。\n![](56030-5d3e252f34e657c9.jpg)\n再接着，连接DE，并在DE上找出一点F，使得DF/DE =  AD/AB = BE/BC。\n![](56030-5175f6c03d4990b2.jpg)\n然后，根据我们高中所学的极限的知识，让选取的点D在第一条线段上从起点A，移动到终点B，找出所有点F，并将它们连起来。最后你会发现，你得到了一条非常光滑的曲线，这条就是传说中的，贝塞尔曲线。  \n看这里…  \n\n![](56030-bb6b8c6a46f12135.gif)\n \n这是二阶贝塞尔曲线。  \n\n下面是三阶四阶和五阶。  \n\n![](56030-f3e69b487f4e37c8.gif)  \n\n![](56030-2d2fb8989e10f177.gif)  \n\n![](56030-390b7b874ddd5d3d.gif)  \n\n最后是... 一阶....  \n\n![](56030-b65e3dd8196f4da5.gif)  \n\n所以贝塞尔曲线的厉害之处就在这里，从1-n阶的连续函数，他都可以计算得到一条光滑曲线。\n## 贝塞尔曲线有什么用？为什么经常会听到这个名称？\n由于贝塞尔曲线控制简便，而且它具有很强的描述能力，因此它在工业设计上已经被广泛使用了。不仅如此，在计算机图形学领域（特别是矢量图形学），贝塞尔曲线也有着举足轻重的地位。而作为程序猿，我们经常会用贝塞尔曲线来绘图（由贝塞尔曲线画出来的图很光滑\\~），来做动画（很自然的动画）等等。也就是由于它可以发挥的作用领域太广了，因此我们时不时都会听到这个名字。\n## 如何使用贝塞尔曲线？\n首先，要明确的一点是，对于贝塞尔曲线来说，最重要的点是，数据点和控制点。  \n数据点： 指一条路径的起始点和终止点。  \n控制点：控制点决定了一条路径的弯曲轨迹，根据控制点的个数，贝塞尔曲线被分为一阶贝塞尔曲线（0个控制点）、二阶贝塞尔曲线（1个控制点）、三阶贝塞尔曲线（2个控制点）等等。\n而系统给我们提供了一个叫做UIBezierPath类，用它可以画简单的圆形，椭圆，矩形，圆角矩形，也可以通过添加点去生成任意的图形，还可以简单的创建一条二阶贝塞尔曲线和三阶贝塞尔曲线。\n### 用法1：简单地画图形\n这里的简单用法就不细讲，虽然类名叫UIBezierPath，但画圆形啥的跟贝塞尔也没啥关系，直接贴代码。  \n  \n* 画圆形      \n\n```objc\n\t UIBezierPath *bPath = [UIBezierPath bezierPathWithArcCenter:CGPointMake(300, 300) radius:50\n                                              startAngle: DEGREES_TO_RADIANS(135) endAngle:M_PI*2 clockwise:YES];\n     [bPath setLineWidth:5];\n     //绘制\n     [bPath stroke];\n```\n\n*  画椭圆\n\n```objc\n\t UIBezierPath *ovalPath = [UIBezierPath bezierPathWithOvalInRect:CGRectMake(200, 150, 100, 200)];\n     [ovalPath setLineWidth:5];\n     [ovalPath stroke];\n```\n     \n*  画矩形\n\n```objc\n\t UIBezierPath *myBezierPath = [UIBezierPath bezierPathWithRect:CGRectMake(20, 20, 100, 50)];\n    \n     [[UIColor blackColor]setStroke];\n     [myBezierPath setLineWidth:5];\n     [myBezierPath stroke];\n```\n\n* 画圆角矩形\n\n```objc\n//UIRectCorner可以设置 哪几个角是圆角，其他不变  \n\t UIBezierPath *tBPath = [UIBezierPath bezierPathWithRoundedRect:CGRectMake(220, 20, 100, 100)                                                 \n\t byRoundingCorners:UIRectCornerTopLeft | UIRectCornerBottomLeft cornerRadii:CGSizeMake(20, 20)];\n     \n     [[UIColor greenColor]setStroke];\n     [tBPath setLineWidth:5];\n     [tBPath stroke];\n```\n\n*  通过任意点画任意图形\n\n```objc\n\t UIBezierPath* aPath = [UIBezierPath bezierPath];\n\t aPath.lineWidth = 15.0;\n   \n     aPath.lineCapStyle = kCGLineCapButt;  //线条终点\n     //round 圆形\n     //butt 平的 默认值 把线连接到精准的终点\n     //Square 平的，会把线延伸到终点再加上线宽的一半  \n     aPath.lineJoinStyle = kCGLineJoinBevel;  //拐点处理\n     //bevel 斜角斜面，角的外侧是平的不圆滑\n     //miter 斜接 角的外侧是尖的\n     //round 圆角\n     \n     //这是起点  \n     [aPath moveToPoint:CGPointMake(100.0, 200.0)];\n     \n     //添加点  \n     [aPath addLineToPoint:CGPointMake(200.0, 240.0)];\n     [aPath addLineToPoint:CGPointMake(160, 340)];\n     [aPath addLineToPoint:CGPointMake(40.0, 340)];\n     [aPath addLineToPoint:CGPointMake(10.0, 240.0)];\n     [aPath closePath]; //第五条线通过调用closePath方法得到的\n       \n     [aPath stroke]; //Draws line 根据坐标点连线\n```\n* 画二阶贝塞尔\n\n```objc\n\t UIBezierPath* twoPath = [UIBezierPath bezierPath];\n     twoPath.lineWidth = 5.0;//宽度\n     twoPath.lineCapStyle = kCGLineCapRound;  //线条拐角\n     twoPath.lineJoinStyle = kCGLineJoinRound;  //终点处理\n     //起始点\n     [twoPath moveToPoint:CGPointMake(20, 100)];\n     //添加两个控制点\n     [twoPath addQuadCurveToPoint:CGPointMake(220, 100) controlPoint:CGPointMake(170, 0)];\n     //划线\n     [twoPath stroke];\n```\n* 画三阶贝塞尔\n````objc\n\t UIBezierPath* bPath = [UIBezierPath bezierPath];\n     \n     bPath.lineWidth = 5.0;\n     bPath.lineCapStyle = kCGLineCapRound;  //线条拐角\n     bPath.lineJoinStyle = kCGLineCapRound;  //终点处理\n     //起始点\n     [bPath moveToPoint:CGPointMake(20, 250)];\n     \n     //添加两个控制点\n     [bPath addCurveToPoint:CGPointMake(350, 250) controlPoint1:CGPointMake(310, 200) controlPoint2:CGPointMake(210, 400)];\n     [bPath stroke];\n```\n### 用法2：用贝塞尔曲线圆滑绘图\n这个用法可以说是处女座的福音。  \n假设这么一个场景：产品提了个需求，来吧，咱们来做一个你画我猜的APP。你画我猜？肯定是要先有画了。简单！新建个UIView的子类，然后在它的初始化方法中创建Path和手势。  \n\n```objc\n // Create a path to connect lines\n path = [UIBezierPath bezierPath];\n // Capture touches\n UIPanGestureRecognizer *pan = [[UIPanGestureRecognizer alloc] initWithTarget:self action:@selector(pan:)];\n pan.maximumNumberOfTouches = pan.minimumNumberOfTouches = 1;\n [self addGestureRecognizer:pan];\n```\n再将捕获到的pan事件location数据依次加入到path中，并且用直线连接两点。 \n \n```objc\n - (void)pan:(UIPanGestureRecognizer *)pan {\n     CGPoint currentPoint = [pan locationInView:self];\n     if (pan.state == UIGestureRecognizerStateBegan) {\n         [path moveToPoint:currentPoint];\n     } else if (pan.state == UIGestureRecognizerStateChanged) {\n         [path addLineToPoint:currentPoint];\n     }\n     [self setNeedsDisplay];\n }\n```\n最后画出轨迹。\n\n```objc\n- (void)drawRect:(CGRect)rect {\n     [[UIColor blackColor] setStroke];\n     [path stroke];\n }\n```\n\n最后将这个view添加到控制器上，很开心的Command + R，让程序跑起来。\n\n开始画\\~  \n然后你就会发现，画出来的曲线是这样的。。  \n![](56030-c2894a2979862cd1.png)\n\nWHAT THE FXXK!!  \n怎么可以有这么多锯齿。。  \n所以这个时候，贝塞尔曲线就很有用了。它的定义是可以找到两点之间的光滑曲线，因为我们之前手势移动的时候，两点之间都是使用直线连接，如果我们可以使用贝塞尔曲线连接，那应该就不会出现这个问题了。  \n试一下。  \n首先写一个计算中点的方法，我们到时会使用这个中点作为控制点。  \n\n```objc\nstatic CGPoint midpoint(CGPoint p0, CGPoint p1) {\n     return (CGPoint) {\n         (p0.x + p1.x) / 2.0,\n         (p0.y + p1.y) / 2.0\n     };\n }\n```\n\n最后将手势处理中的连接方式替换成使用贝塞尔曲线。\n\n```objc\n- (void)pan:(UIPanGestureRecognizer *)pan {\n     CGPoint currentPoint = [pan locationInView:self];\n     CGPoint midPoint = midpoint(previousPoint, currentPoint);\n \n     if (pan.state == UIGestureRecognizerStateBegan) {\n         [path moveToPoint:currentPoint];\n     } else if (pan.state == UIGestureRecognizerStateChanged) {\n         [path addQuadCurveToPoint:midPoint controlPoint:previousPoint];\n     }\n     previousPoint = currentPoint;\n     [self setNeedsDisplay];\n }\n```\n再Run一次…  \n![](56030-de6fcb447ec49b87.png)\n\n看，光滑多了\\~  \n**所以很多时候，当我们遇到画出的图形太不自然的时候，就可以试着用贝塞尔曲线解决这些问题，用到越高阶的曲线，画出的图形越光滑。** \n\n### 用法3：用贝塞尔曲线做变形\n网上看到的大多数比较酷炫的动画，都是通过修改曲线的控制点，对曲线进行变形而做的。  \n比如，我们要实现如下一个动画。  \n![](56030-8fb7008726c62987.gif)\n\n这个动画最难地方就是手势拖拽的时候，直线的变形，可以首先的想到的是使用贝塞尔。通过创建path，添加控制点画出曲线，然后通过更改控制点的位置来达到让曲线进行变形的目的。  \n![](56030-9b189370ffbf5aec.gif)\n\n如上图所示，这里添加了7个点，从左到右依次为l3、l2、l1、c、 r1、 r2、 r3。屏幕最左和最右两边的l3和r3没有在图中显示出来，然后我们就可以以l3和l2为控制点，从l3到l1建立一条二阶贝塞尔曲线，再以c和r1为控制点建一条从l3到r1的曲线，最后以r1和r2为控制点建一条从r1到r3的曲线。   主要代码如下：  \n\n```objc\n- (CGPathRef)currentPath {\n     CGFloat width = self.view.bounds.size.width;\n     UIBezierPath *path = [UIBezierPath bezierPath];\n     \n     [path moveToPoint:CGPointMake(0, 0)];\n     [path addLineToPoint:CGPointMake(0, self.l3ControlPointView.center.y)];\n     [path addCurveToPoint:self.l1ControlPointView.center\n             controlPoint1:self.l3ControlPointView.center\n             controlPoint2:self.l2ControlPointView.center];\n     [path addCurveToPoint:self.r1ControlPointView.center\n             controlPoint1:self.cControlPointView.center\n             controlPoint2:self.r1ControlPointView.center];\n     [path addCurveToPoint:self.r3ControlPointView.center\n             controlPoint1:self.r1ControlPointView.center\n             controlPoint2:self.r2ControlPointView.center];\n     [path addLineToPoint:CGPointMake(width, 0)];\n     [path closePath];\n     return path.CGPath;\n }\n```\n\n建立好路径之后，就可以通过手势操作来修改控制点的坐标达到我们的目的了。  \n在这里也就是修改l3到r3的中心点坐标。主要代码如下：  \n\n```objc\n- (void)panDidMove:(UIPanGestureRecognizer *)gesture {\n     if (gesture.state == UIGestureRecognizerStateEnded ||\n         gesture.state == UIGestureRecognizerStateFailed ||\n         gesture.state == UIGestureRecognizerStateCancelled) {\n         \n     } else {\n         CGFloat additionalHeight = MAX([gesture translationInView:self.view].y, 0);\n         CGFloat waveHeight = MIN(additionalHeight*0.6, kMaxWaveHeight);\n         CGFloat baseHeight = kMiniHeight + additionalHeight - waveHeight;\n         CGFloat locationX = [gesture locationInView:gesture.view].x;\n         \n         [self layoutControlPoints:baseHeight waveHeight:waveHeight locationX:locationX];\n         [self updateShapeLayer];\n     }\n }\n \n - (void)layoutControlPoints:(CGFloat)baseHeight\n                  waveHeight:(CGFloat)waveHeight\n                   locationX:(CGFloat)locationX {\n     CGFloat width = self.view.bounds.size.width;\n     CGFloat minLeftX = MIN(locationX-width/2*0.28, 0);\n     CGFloat maxRightX = MAX(width+(locationX-width)/2 *0.28, width);\n     CGFloat leftPartWidth = locationX - minLeftX;\n     CGFloat rightPartWidth = maxRightX - locationX;\n     \n     self.l3ControlPointView.center = CGPointMake(minLeftX, baseHeight);\n     self.l2ControlPointView.center = CGPointMake(minLeftX+leftPartWidth*0.44, baseHeight);\n     self.l1ControlPointView.center = CGPointMake(minLeftX+leftPartWidth*0.71, baseHeight+waveHeight*0.64);\n     self.cControlPointView.center = CGPointMake(locationX, baseHeight+waveHeight*1.36);\n     self.r1ControlPointView.center = CGPointMake(maxRightX-rightPartWidth*0.71, baseHeight+waveHeight*0.64);\n     self.r2ControlPointView.center = CGPointMake(maxRightX-(rightPartWidth*0.44), baseHeight);\n     self.r3ControlPointView.center = CGPointMake(maxRightX, baseHeight);\n }\n \n - (void)updateShapeLayer {\n     self.shapeLayer.path = [self currentPath];\n }\n```\n\n通过这个思路，我们可以做出很多有意思而且有生命力的动画，这里一般还会经常和 `CADisplayLink` 一起用，先留个坑。 \n \n### 用法4：用贝塞尔曲线做缓冲动画\n做动画最主要的一点，就是要让动画达到很自然的效果。这就要涉及到一些现实中的物理知识，比如重力弹力和速度等等，所以有时候，我们需要对动画的速度进行控制，有时候需要先快再慢，有时候需要先慢再快然后再慢，有时候又需要快慢超慢非常慢...  \n这个时候就不得不提到 `CAMediaTimingFunction` 。  \n`CAMediaTimingFunction ` 的主要用法可以理解为我们在一个二维坐标系上建议一条或曲线或直线的函数，这个函数的斜率就是动画的速度，斜率的改变量也就是导数则为加速度。理论上来说，这个坐标系上的任何曲线都可以用来当做加速动画。然而`CAMediaTimingFunction ` 只给我们提供了一个三次贝塞尔曲线的函数，它可以生成三次贝塞尔曲线所能生成的所有缓冲函数。  \n这里刚好可以介绍 ~~一个~~ 两个好用的网站：  [http://www.roblaplaca.com/examples/bezierBuilder](http://www.roblaplaca.com/examples/bezierBuilder)   \n这个网站可以做到可视化的修改两个控制点，来达到生成一条三阶贝塞尔曲线，并且还会给出两个控制点的具体坐标，以及右边还可以看到这条曲线产生的动画会做怎样的速度改变。也就是说，只要我们能拿到两个控制点的坐标，就可以用来控制动画了。  \n[http://easings.net](http://easings.net/#)   \n这个网站提供了丰富的曲线类型可供选择，图表旁还有一个小动画预览，非常直观。\n比如下面这段代码，就可以让我们把相册从4：3 切换到1：1 的时候，展示一个先快后慢的过渡效果，这个效果跟系统相机的还是蛮接近的。  \n\n```objc\n     CABasicAnimation *animation = [CABasicAnimation animation];\n     animation.keyPath = @\"borderWidth\";\n     animation.repeatCount = 1;\n     animation.duration = 0.4;\n     animation.removedOnCompletion = NO;\n     animation.timingFunction = [CAMediaTimingFunction functionWithControlPoints:0 :1 :1 :1];\n     animation.fillMode = kCAFillModeForwards;\n     animation.fromValue = 0.f;\n     animation.toValue = 40.f;\n     [self.previewMask addAnimation:animation forKey:@\"changeBorderWith\"];\n```\n\n效果如下：\n![](56030-61f16deba712d8ac.gif)\n\n### 用法5：用贝塞尔曲线做拟合计算  \n贝塞尔曲线有个非常常用的动画效果，叫MetaBall算法。什么是MetaBall？就是我们平时看到的QQ的小红点消除啦\\~ 像下面这样。  \n  \n![](56030-88174468ef9870e3.png)\n\n这个是怎么实现的？\n\n#### 矩形拟合\n首先我们需要了解一下简单的矩形拟合原理  \n\n![](56030-c2aa8094cd0a6004.png)\n\n如图所示的两个圆，我们通过给它添加一个矩形（绿色部分），矩形较短的两边分别顶住两个圆各自的一条直径上，然后通过改变矩形较长的两边的弧度（红色部分），达到拟合的效果。  \n\n![](56030-9e2c8e268d676528.png)\n\n这种做法当两个圆较小的时候，几乎是没有问题的。但是当圆稍微大点的时候，就会出现很明显的相交区域，拟合效果非常不好。  \n\n![](56030-4ad6b01ea2c03caa.png)\n\n所以这种简单的矩形拟合在圆较大的时候是很不严格的。这个时候就需要更严谨的切线拟合。  \n#### 切线拟合\n我们知道，之前的矩形拟合之所以才圆大的时候会出现拟合不严谨的情况。为什么？\n\n![](56030-86bc9a9afdb15e48.png)\n\n正如上图所示，两条曲线的画法都是由A1和B1为起点和终点，C点为控制点和A1、B2为起点和终点，C为控制点画出的二阶贝塞尔曲线。\n而要做到完美的拟合，必须达到的一点要求就是，贝塞尔曲线与圆的连接点，也就是A1、B1、A2、B2，他们与控制点C的连线，一定要是圆的切线。这样就不管圆大小怎么变，都不会出现明显的相交区域了。\n\n![](56030-8c56a1e98f432000.jpg)  \n> 图片引用: http://www.jianshu.com/p/55c721887568\n\n于是，现在解决问题的关键就转变成了：如何计算这些拟合的关键点？\n\n![](56030-6700ecb2811dcac4.jpg)  \n> 图片引用: http://pandara.xyz/2015/10/27/ios_slime\n\n \n我们现在要做的，就是求出点ABCDMN这六个点的坐标，就可以实现完美拟合了。   \n结合上面两张图，通过三角函数的各种计算，我们最终可以得到如下代码：\n\n```objc\n- (void)reloadBezierPath {\n     CGFloat r1 = self.trailDot.frame.size.width / 2.0f;\n     CGFloat r2 = self.headDot.frame.size.width / 2.0f;\n     \n     CGFloat x1 = self.trailDot.center.x;\n     CGFloat y1 = self.trailDot.center.y;\n     CGFloat x2 = self.headDot.center.x;\n     CGFloat y2 = self.headDot.center.y;\n     \n     CGFloat distance = sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n     \n     CGFloat sinDegree = (x2 - x1) / distance;\n     CGFloat cosDegree = (y2 - y1) / distance;\n     \n     CGPoint pointA = CGPointMake(x1 - r1 * cosDegree, y1 + r1 * sinDegree);\n     CGPoint pointB = CGPointMake(x1 + r1 * cosDegree, y1 - r1 * sinDegree);\n     CGPoint pointC = CGPointMake(x2 + r2 * cosDegree, y2 - r2 * sinDegree);\n     CGPoint pointD = CGPointMake(x2 - r2 * cosDegree, y2 + r2 * sinDegree);\n     CGPoint pointN = CGPointMake(pointB.x + (distance / 2) * sinDegree, pointB.y + (distance / 2) * cosDegree);\n     CGPoint pointM = CGPointMake(pointA.x + (distance / 2) * sinDegree, pointA.y + (distance / 2) * cosDegree);\n     \n     UIBezierPath *path = [UIBezierPath bezierPath];\n     [path moveToPoint:pointA];\n     [path addLineToPoint:pointB];\n     [path addQuadCurveToPoint:pointC controlPoint:pointN];\n     [path addLineToPoint:pointD];\n     [path addQuadCurveToPoint:pointA controlPoint:pointM];\n     \n     self.shapeLayer.path = path.CGPath;\n }\n```\n\n现在我们已经可以做到非常完美拟合的时候了，这时候再结合前面的通过修改控制点来实现图形曲线变换，我们就可以做到类似QQ小红点消除一样的效果了，具体做法不再赘述。\n\n## Ending\n至此，我们已基本了解了贝塞尔曲线的历史出处公式性质及各种用法。在不断学习的过程中，我发现一些比较牛逼的实现方法，都涉及到了较多较复杂的数学公式，奈何大学高数没有好好学，导致需要回头去看很多东西，这也是这篇博客耗费了较多时间的原因之一。不过在掌握了这些基础和基本用法之后，就可以再去研究一下比较高级和酷炫的用法了，也留下了很多坑，会在以后慢慢填补的…   \n如果以后还想补的话....  \n文中如果有什么不足之处欢迎指正，这也是Share的目的之一。  \nHave fun \\~  \n\n## 参考链接\n[贝塞尔曲线维基百科](https://zh.wikipedia.org/wiki/%E8%B2%9D%E8%8C%B2%E6%9B%B2%E7%B7%9A)  \n[UIBezierPath Class Reference](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIBezierPath_class/)  \n[贝塞尔曲线扫盲](http://www.html-js.com/article/1628)  \n[自定义缓冲函数](https://zsisme.gitbooks.io/ios-/content/chapter10/custom-easing-functions.html)  \n[iOS-UI进阶13 - 贝塞尔曲线和帧动画结合](http://www.jianshu.com/p/5dbdd1ee47aa)  \n[贝塞尔曲线开发的艺术](http://www.jianshu.com/p/55c721887568)\n\n\n\n\n\n\n\n\n","source":"_posts/bezier-zhibei.md","raw":"---\ntitle: 贝塞尔曲线指北\ndate: 2016-11-03 17:37:01\ntags:\n- 贝塞尔\n- iOS\n- 动画\n---\n\n最近在做项目的时候，需要用到一个动画，非常简单的动画，简单到就是直接对一个View做平移... 然而虽然动画简单，但是却很不自然，尝试了UIView Animation提供的各类参数，都无法达到想要的动画效果。这时候，我的脑子里突然想起一个词... “贝塞尔曲线”.... 这个词经常看到，但却从没有去了解过，这次就趁着有求于它的雅兴，好好做个入门了解好了。\n## 什么是贝塞尔曲线？  \n  显而易见的是，贝塞尔曲线，应该就是是一个叫贝塞尔的人发明的曲线吧，然而历史剧本却不是这么写的。贝塞尔曲线所依据的最原始的数学公式，是早在1912年就广为人知的伯恩斯坦多项式。OK，now，What is boensitan duoxiangshi？！简单来说，伯恩斯坦多项式可以用来证明，在\\[ a, b ] 区间上所有的连续函数都可以用多项式来逼近，并且收敛性很强，也就是一致收敛。再简单点，就是一个连续函数，你可以将它写成若干个伯恩斯坦多项式相加的形式，并且，随着 n→∞，这个多项式将一致收敛到原函数，这个就是伯恩斯坦斯的逼近性质。  \n  不知道在说什么鬼？没关系，接着说..  \n  到了1959年，当时就职于雪铁龙的法国数学家 Paul de Casteljau 开始对伯恩斯坦多项式进行了图形化的尝试，并且提供了一种数值稳定的德卡斯特里奥（de Casteljau） 算法。根据这个算法，就可以只通过很少的控制点，去生成复杂的平滑曲线，也就是贝塞尔曲线。     \n  而贝塞尔曲线的得名，得归功于1962年就职于雷诺的法国工程师皮埃尔·贝塞尔（Pierre Bézier），他使用这种方法来辅助汽车的车体工业设计，并且广泛宣传，因此大家才都称他为贝塞尔曲线  。\n## 贝塞尔曲线是怎么画出来的？\n首先，我们在平面内选3个不同线的点并且依次用线段连接。如下所示..  \n![](56030-48977fcfcd8cd57e.png)\n接着，我们在AB和BC线段上找出点D和点E，使得AD/AB = BE/BC。\n![](56030-5d3e252f34e657c9.jpg)\n再接着，连接DE，并在DE上找出一点F，使得DF/DE =  AD/AB = BE/BC。\n![](56030-5175f6c03d4990b2.jpg)\n然后，根据我们高中所学的极限的知识，让选取的点D在第一条线段上从起点A，移动到终点B，找出所有点F，并将它们连起来。最后你会发现，你得到了一条非常光滑的曲线，这条就是传说中的，贝塞尔曲线。  \n看这里…  \n\n![](56030-bb6b8c6a46f12135.gif)\n \n这是二阶贝塞尔曲线。  \n\n下面是三阶四阶和五阶。  \n\n![](56030-f3e69b487f4e37c8.gif)  \n\n![](56030-2d2fb8989e10f177.gif)  \n\n![](56030-390b7b874ddd5d3d.gif)  \n\n最后是... 一阶....  \n\n![](56030-b65e3dd8196f4da5.gif)  \n\n所以贝塞尔曲线的厉害之处就在这里，从1-n阶的连续函数，他都可以计算得到一条光滑曲线。\n## 贝塞尔曲线有什么用？为什么经常会听到这个名称？\n由于贝塞尔曲线控制简便，而且它具有很强的描述能力，因此它在工业设计上已经被广泛使用了。不仅如此，在计算机图形学领域（特别是矢量图形学），贝塞尔曲线也有着举足轻重的地位。而作为程序猿，我们经常会用贝塞尔曲线来绘图（由贝塞尔曲线画出来的图很光滑\\~），来做动画（很自然的动画）等等。也就是由于它可以发挥的作用领域太广了，因此我们时不时都会听到这个名字。\n## 如何使用贝塞尔曲线？\n首先，要明确的一点是，对于贝塞尔曲线来说，最重要的点是，数据点和控制点。  \n数据点： 指一条路径的起始点和终止点。  \n控制点：控制点决定了一条路径的弯曲轨迹，根据控制点的个数，贝塞尔曲线被分为一阶贝塞尔曲线（0个控制点）、二阶贝塞尔曲线（1个控制点）、三阶贝塞尔曲线（2个控制点）等等。\n而系统给我们提供了一个叫做UIBezierPath类，用它可以画简单的圆形，椭圆，矩形，圆角矩形，也可以通过添加点去生成任意的图形，还可以简单的创建一条二阶贝塞尔曲线和三阶贝塞尔曲线。\n### 用法1：简单地画图形\n这里的简单用法就不细讲，虽然类名叫UIBezierPath，但画圆形啥的跟贝塞尔也没啥关系，直接贴代码。  \n  \n* 画圆形      \n\n```objc\n\t UIBezierPath *bPath = [UIBezierPath bezierPathWithArcCenter:CGPointMake(300, 300) radius:50\n                                              startAngle: DEGREES_TO_RADIANS(135) endAngle:M_PI*2 clockwise:YES];\n     [bPath setLineWidth:5];\n     //绘制\n     [bPath stroke];\n```\n\n*  画椭圆\n\n```objc\n\t UIBezierPath *ovalPath = [UIBezierPath bezierPathWithOvalInRect:CGRectMake(200, 150, 100, 200)];\n     [ovalPath setLineWidth:5];\n     [ovalPath stroke];\n```\n     \n*  画矩形\n\n```objc\n\t UIBezierPath *myBezierPath = [UIBezierPath bezierPathWithRect:CGRectMake(20, 20, 100, 50)];\n    \n     [[UIColor blackColor]setStroke];\n     [myBezierPath setLineWidth:5];\n     [myBezierPath stroke];\n```\n\n* 画圆角矩形\n\n```objc\n//UIRectCorner可以设置 哪几个角是圆角，其他不变  \n\t UIBezierPath *tBPath = [UIBezierPath bezierPathWithRoundedRect:CGRectMake(220, 20, 100, 100)                                                 \n\t byRoundingCorners:UIRectCornerTopLeft | UIRectCornerBottomLeft cornerRadii:CGSizeMake(20, 20)];\n     \n     [[UIColor greenColor]setStroke];\n     [tBPath setLineWidth:5];\n     [tBPath stroke];\n```\n\n*  通过任意点画任意图形\n\n```objc\n\t UIBezierPath* aPath = [UIBezierPath bezierPath];\n\t aPath.lineWidth = 15.0;\n   \n     aPath.lineCapStyle = kCGLineCapButt;  //线条终点\n     //round 圆形\n     //butt 平的 默认值 把线连接到精准的终点\n     //Square 平的，会把线延伸到终点再加上线宽的一半  \n     aPath.lineJoinStyle = kCGLineJoinBevel;  //拐点处理\n     //bevel 斜角斜面，角的外侧是平的不圆滑\n     //miter 斜接 角的外侧是尖的\n     //round 圆角\n     \n     //这是起点  \n     [aPath moveToPoint:CGPointMake(100.0, 200.0)];\n     \n     //添加点  \n     [aPath addLineToPoint:CGPointMake(200.0, 240.0)];\n     [aPath addLineToPoint:CGPointMake(160, 340)];\n     [aPath addLineToPoint:CGPointMake(40.0, 340)];\n     [aPath addLineToPoint:CGPointMake(10.0, 240.0)];\n     [aPath closePath]; //第五条线通过调用closePath方法得到的\n       \n     [aPath stroke]; //Draws line 根据坐标点连线\n```\n* 画二阶贝塞尔\n\n```objc\n\t UIBezierPath* twoPath = [UIBezierPath bezierPath];\n     twoPath.lineWidth = 5.0;//宽度\n     twoPath.lineCapStyle = kCGLineCapRound;  //线条拐角\n     twoPath.lineJoinStyle = kCGLineJoinRound;  //终点处理\n     //起始点\n     [twoPath moveToPoint:CGPointMake(20, 100)];\n     //添加两个控制点\n     [twoPath addQuadCurveToPoint:CGPointMake(220, 100) controlPoint:CGPointMake(170, 0)];\n     //划线\n     [twoPath stroke];\n```\n* 画三阶贝塞尔\n````objc\n\t UIBezierPath* bPath = [UIBezierPath bezierPath];\n     \n     bPath.lineWidth = 5.0;\n     bPath.lineCapStyle = kCGLineCapRound;  //线条拐角\n     bPath.lineJoinStyle = kCGLineCapRound;  //终点处理\n     //起始点\n     [bPath moveToPoint:CGPointMake(20, 250)];\n     \n     //添加两个控制点\n     [bPath addCurveToPoint:CGPointMake(350, 250) controlPoint1:CGPointMake(310, 200) controlPoint2:CGPointMake(210, 400)];\n     [bPath stroke];\n```\n### 用法2：用贝塞尔曲线圆滑绘图\n这个用法可以说是处女座的福音。  \n假设这么一个场景：产品提了个需求，来吧，咱们来做一个你画我猜的APP。你画我猜？肯定是要先有画了。简单！新建个UIView的子类，然后在它的初始化方法中创建Path和手势。  \n\n```objc\n // Create a path to connect lines\n path = [UIBezierPath bezierPath];\n // Capture touches\n UIPanGestureRecognizer *pan = [[UIPanGestureRecognizer alloc] initWithTarget:self action:@selector(pan:)];\n pan.maximumNumberOfTouches = pan.minimumNumberOfTouches = 1;\n [self addGestureRecognizer:pan];\n```\n再将捕获到的pan事件location数据依次加入到path中，并且用直线连接两点。 \n \n```objc\n - (void)pan:(UIPanGestureRecognizer *)pan {\n     CGPoint currentPoint = [pan locationInView:self];\n     if (pan.state == UIGestureRecognizerStateBegan) {\n         [path moveToPoint:currentPoint];\n     } else if (pan.state == UIGestureRecognizerStateChanged) {\n         [path addLineToPoint:currentPoint];\n     }\n     [self setNeedsDisplay];\n }\n```\n最后画出轨迹。\n\n```objc\n- (void)drawRect:(CGRect)rect {\n     [[UIColor blackColor] setStroke];\n     [path stroke];\n }\n```\n\n最后将这个view添加到控制器上，很开心的Command + R，让程序跑起来。\n\n开始画\\~  \n然后你就会发现，画出来的曲线是这样的。。  \n![](56030-c2894a2979862cd1.png)\n\nWHAT THE FXXK!!  \n怎么可以有这么多锯齿。。  \n所以这个时候，贝塞尔曲线就很有用了。它的定义是可以找到两点之间的光滑曲线，因为我们之前手势移动的时候，两点之间都是使用直线连接，如果我们可以使用贝塞尔曲线连接，那应该就不会出现这个问题了。  \n试一下。  \n首先写一个计算中点的方法，我们到时会使用这个中点作为控制点。  \n\n```objc\nstatic CGPoint midpoint(CGPoint p0, CGPoint p1) {\n     return (CGPoint) {\n         (p0.x + p1.x) / 2.0,\n         (p0.y + p1.y) / 2.0\n     };\n }\n```\n\n最后将手势处理中的连接方式替换成使用贝塞尔曲线。\n\n```objc\n- (void)pan:(UIPanGestureRecognizer *)pan {\n     CGPoint currentPoint = [pan locationInView:self];\n     CGPoint midPoint = midpoint(previousPoint, currentPoint);\n \n     if (pan.state == UIGestureRecognizerStateBegan) {\n         [path moveToPoint:currentPoint];\n     } else if (pan.state == UIGestureRecognizerStateChanged) {\n         [path addQuadCurveToPoint:midPoint controlPoint:previousPoint];\n     }\n     previousPoint = currentPoint;\n     [self setNeedsDisplay];\n }\n```\n再Run一次…  \n![](56030-de6fcb447ec49b87.png)\n\n看，光滑多了\\~  \n**所以很多时候，当我们遇到画出的图形太不自然的时候，就可以试着用贝塞尔曲线解决这些问题，用到越高阶的曲线，画出的图形越光滑。** \n\n### 用法3：用贝塞尔曲线做变形\n网上看到的大多数比较酷炫的动画，都是通过修改曲线的控制点，对曲线进行变形而做的。  \n比如，我们要实现如下一个动画。  \n![](56030-8fb7008726c62987.gif)\n\n这个动画最难地方就是手势拖拽的时候，直线的变形，可以首先的想到的是使用贝塞尔。通过创建path，添加控制点画出曲线，然后通过更改控制点的位置来达到让曲线进行变形的目的。  \n![](56030-9b189370ffbf5aec.gif)\n\n如上图所示，这里添加了7个点，从左到右依次为l3、l2、l1、c、 r1、 r2、 r3。屏幕最左和最右两边的l3和r3没有在图中显示出来，然后我们就可以以l3和l2为控制点，从l3到l1建立一条二阶贝塞尔曲线，再以c和r1为控制点建一条从l3到r1的曲线，最后以r1和r2为控制点建一条从r1到r3的曲线。   主要代码如下：  \n\n```objc\n- (CGPathRef)currentPath {\n     CGFloat width = self.view.bounds.size.width;\n     UIBezierPath *path = [UIBezierPath bezierPath];\n     \n     [path moveToPoint:CGPointMake(0, 0)];\n     [path addLineToPoint:CGPointMake(0, self.l3ControlPointView.center.y)];\n     [path addCurveToPoint:self.l1ControlPointView.center\n             controlPoint1:self.l3ControlPointView.center\n             controlPoint2:self.l2ControlPointView.center];\n     [path addCurveToPoint:self.r1ControlPointView.center\n             controlPoint1:self.cControlPointView.center\n             controlPoint2:self.r1ControlPointView.center];\n     [path addCurveToPoint:self.r3ControlPointView.center\n             controlPoint1:self.r1ControlPointView.center\n             controlPoint2:self.r2ControlPointView.center];\n     [path addLineToPoint:CGPointMake(width, 0)];\n     [path closePath];\n     return path.CGPath;\n }\n```\n\n建立好路径之后，就可以通过手势操作来修改控制点的坐标达到我们的目的了。  \n在这里也就是修改l3到r3的中心点坐标。主要代码如下：  \n\n```objc\n- (void)panDidMove:(UIPanGestureRecognizer *)gesture {\n     if (gesture.state == UIGestureRecognizerStateEnded ||\n         gesture.state == UIGestureRecognizerStateFailed ||\n         gesture.state == UIGestureRecognizerStateCancelled) {\n         \n     } else {\n         CGFloat additionalHeight = MAX([gesture translationInView:self.view].y, 0);\n         CGFloat waveHeight = MIN(additionalHeight*0.6, kMaxWaveHeight);\n         CGFloat baseHeight = kMiniHeight + additionalHeight - waveHeight;\n         CGFloat locationX = [gesture locationInView:gesture.view].x;\n         \n         [self layoutControlPoints:baseHeight waveHeight:waveHeight locationX:locationX];\n         [self updateShapeLayer];\n     }\n }\n \n - (void)layoutControlPoints:(CGFloat)baseHeight\n                  waveHeight:(CGFloat)waveHeight\n                   locationX:(CGFloat)locationX {\n     CGFloat width = self.view.bounds.size.width;\n     CGFloat minLeftX = MIN(locationX-width/2*0.28, 0);\n     CGFloat maxRightX = MAX(width+(locationX-width)/2 *0.28, width);\n     CGFloat leftPartWidth = locationX - minLeftX;\n     CGFloat rightPartWidth = maxRightX - locationX;\n     \n     self.l3ControlPointView.center = CGPointMake(minLeftX, baseHeight);\n     self.l2ControlPointView.center = CGPointMake(minLeftX+leftPartWidth*0.44, baseHeight);\n     self.l1ControlPointView.center = CGPointMake(minLeftX+leftPartWidth*0.71, baseHeight+waveHeight*0.64);\n     self.cControlPointView.center = CGPointMake(locationX, baseHeight+waveHeight*1.36);\n     self.r1ControlPointView.center = CGPointMake(maxRightX-rightPartWidth*0.71, baseHeight+waveHeight*0.64);\n     self.r2ControlPointView.center = CGPointMake(maxRightX-(rightPartWidth*0.44), baseHeight);\n     self.r3ControlPointView.center = CGPointMake(maxRightX, baseHeight);\n }\n \n - (void)updateShapeLayer {\n     self.shapeLayer.path = [self currentPath];\n }\n```\n\n通过这个思路，我们可以做出很多有意思而且有生命力的动画，这里一般还会经常和 `CADisplayLink` 一起用，先留个坑。 \n \n### 用法4：用贝塞尔曲线做缓冲动画\n做动画最主要的一点，就是要让动画达到很自然的效果。这就要涉及到一些现实中的物理知识，比如重力弹力和速度等等，所以有时候，我们需要对动画的速度进行控制，有时候需要先快再慢，有时候需要先慢再快然后再慢，有时候又需要快慢超慢非常慢...  \n这个时候就不得不提到 `CAMediaTimingFunction` 。  \n`CAMediaTimingFunction ` 的主要用法可以理解为我们在一个二维坐标系上建议一条或曲线或直线的函数，这个函数的斜率就是动画的速度，斜率的改变量也就是导数则为加速度。理论上来说，这个坐标系上的任何曲线都可以用来当做加速动画。然而`CAMediaTimingFunction ` 只给我们提供了一个三次贝塞尔曲线的函数，它可以生成三次贝塞尔曲线所能生成的所有缓冲函数。  \n这里刚好可以介绍 ~~一个~~ 两个好用的网站：  [http://www.roblaplaca.com/examples/bezierBuilder](http://www.roblaplaca.com/examples/bezierBuilder)   \n这个网站可以做到可视化的修改两个控制点，来达到生成一条三阶贝塞尔曲线，并且还会给出两个控制点的具体坐标，以及右边还可以看到这条曲线产生的动画会做怎样的速度改变。也就是说，只要我们能拿到两个控制点的坐标，就可以用来控制动画了。  \n[http://easings.net](http://easings.net/#)   \n这个网站提供了丰富的曲线类型可供选择，图表旁还有一个小动画预览，非常直观。\n比如下面这段代码，就可以让我们把相册从4：3 切换到1：1 的时候，展示一个先快后慢的过渡效果，这个效果跟系统相机的还是蛮接近的。  \n\n```objc\n     CABasicAnimation *animation = [CABasicAnimation animation];\n     animation.keyPath = @\"borderWidth\";\n     animation.repeatCount = 1;\n     animation.duration = 0.4;\n     animation.removedOnCompletion = NO;\n     animation.timingFunction = [CAMediaTimingFunction functionWithControlPoints:0 :1 :1 :1];\n     animation.fillMode = kCAFillModeForwards;\n     animation.fromValue = 0.f;\n     animation.toValue = 40.f;\n     [self.previewMask addAnimation:animation forKey:@\"changeBorderWith\"];\n```\n\n效果如下：\n![](56030-61f16deba712d8ac.gif)\n\n### 用法5：用贝塞尔曲线做拟合计算  \n贝塞尔曲线有个非常常用的动画效果，叫MetaBall算法。什么是MetaBall？就是我们平时看到的QQ的小红点消除啦\\~ 像下面这样。  \n  \n![](56030-88174468ef9870e3.png)\n\n这个是怎么实现的？\n\n#### 矩形拟合\n首先我们需要了解一下简单的矩形拟合原理  \n\n![](56030-c2aa8094cd0a6004.png)\n\n如图所示的两个圆，我们通过给它添加一个矩形（绿色部分），矩形较短的两边分别顶住两个圆各自的一条直径上，然后通过改变矩形较长的两边的弧度（红色部分），达到拟合的效果。  \n\n![](56030-9e2c8e268d676528.png)\n\n这种做法当两个圆较小的时候，几乎是没有问题的。但是当圆稍微大点的时候，就会出现很明显的相交区域，拟合效果非常不好。  \n\n![](56030-4ad6b01ea2c03caa.png)\n\n所以这种简单的矩形拟合在圆较大的时候是很不严格的。这个时候就需要更严谨的切线拟合。  \n#### 切线拟合\n我们知道，之前的矩形拟合之所以才圆大的时候会出现拟合不严谨的情况。为什么？\n\n![](56030-86bc9a9afdb15e48.png)\n\n正如上图所示，两条曲线的画法都是由A1和B1为起点和终点，C点为控制点和A1、B2为起点和终点，C为控制点画出的二阶贝塞尔曲线。\n而要做到完美的拟合，必须达到的一点要求就是，贝塞尔曲线与圆的连接点，也就是A1、B1、A2、B2，他们与控制点C的连线，一定要是圆的切线。这样就不管圆大小怎么变，都不会出现明显的相交区域了。\n\n![](56030-8c56a1e98f432000.jpg)  \n> 图片引用: http://www.jianshu.com/p/55c721887568\n\n于是，现在解决问题的关键就转变成了：如何计算这些拟合的关键点？\n\n![](56030-6700ecb2811dcac4.jpg)  \n> 图片引用: http://pandara.xyz/2015/10/27/ios_slime\n\n \n我们现在要做的，就是求出点ABCDMN这六个点的坐标，就可以实现完美拟合了。   \n结合上面两张图，通过三角函数的各种计算，我们最终可以得到如下代码：\n\n```objc\n- (void)reloadBezierPath {\n     CGFloat r1 = self.trailDot.frame.size.width / 2.0f;\n     CGFloat r2 = self.headDot.frame.size.width / 2.0f;\n     \n     CGFloat x1 = self.trailDot.center.x;\n     CGFloat y1 = self.trailDot.center.y;\n     CGFloat x2 = self.headDot.center.x;\n     CGFloat y2 = self.headDot.center.y;\n     \n     CGFloat distance = sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n     \n     CGFloat sinDegree = (x2 - x1) / distance;\n     CGFloat cosDegree = (y2 - y1) / distance;\n     \n     CGPoint pointA = CGPointMake(x1 - r1 * cosDegree, y1 + r1 * sinDegree);\n     CGPoint pointB = CGPointMake(x1 + r1 * cosDegree, y1 - r1 * sinDegree);\n     CGPoint pointC = CGPointMake(x2 + r2 * cosDegree, y2 - r2 * sinDegree);\n     CGPoint pointD = CGPointMake(x2 - r2 * cosDegree, y2 + r2 * sinDegree);\n     CGPoint pointN = CGPointMake(pointB.x + (distance / 2) * sinDegree, pointB.y + (distance / 2) * cosDegree);\n     CGPoint pointM = CGPointMake(pointA.x + (distance / 2) * sinDegree, pointA.y + (distance / 2) * cosDegree);\n     \n     UIBezierPath *path = [UIBezierPath bezierPath];\n     [path moveToPoint:pointA];\n     [path addLineToPoint:pointB];\n     [path addQuadCurveToPoint:pointC controlPoint:pointN];\n     [path addLineToPoint:pointD];\n     [path addQuadCurveToPoint:pointA controlPoint:pointM];\n     \n     self.shapeLayer.path = path.CGPath;\n }\n```\n\n现在我们已经可以做到非常完美拟合的时候了，这时候再结合前面的通过修改控制点来实现图形曲线变换，我们就可以做到类似QQ小红点消除一样的效果了，具体做法不再赘述。\n\n## Ending\n至此，我们已基本了解了贝塞尔曲线的历史出处公式性质及各种用法。在不断学习的过程中，我发现一些比较牛逼的实现方法，都涉及到了较多较复杂的数学公式，奈何大学高数没有好好学，导致需要回头去看很多东西，这也是这篇博客耗费了较多时间的原因之一。不过在掌握了这些基础和基本用法之后，就可以再去研究一下比较高级和酷炫的用法了，也留下了很多坑，会在以后慢慢填补的…   \n如果以后还想补的话....  \n文中如果有什么不足之处欢迎指正，这也是Share的目的之一。  \nHave fun \\~  \n\n## 参考链接\n[贝塞尔曲线维基百科](https://zh.wikipedia.org/wiki/%E8%B2%9D%E8%8C%B2%E6%9B%B2%E7%B7%9A)  \n[UIBezierPath Class Reference](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIBezierPath_class/)  \n[贝塞尔曲线扫盲](http://www.html-js.com/article/1628)  \n[自定义缓冲函数](https://zsisme.gitbooks.io/ios-/content/chapter10/custom-easing-functions.html)  \n[iOS-UI进阶13 - 贝塞尔曲线和帧动画结合](http://www.jianshu.com/p/5dbdd1ee47aa)  \n[贝塞尔曲线开发的艺术](http://www.jianshu.com/p/55c721887568)\n\n\n\n\n\n\n\n\n","slug":"bezier-zhibei","published":1,"updated":"2022-10-25T02:57:42.630Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9nmc48800098wwxj9c1go4z","content":"<p>最近在做项目的时候，需要用到一个动画，非常简单的动画，简单到就是直接对一个View做平移… 然而虽然动画简单，但是却很不自然，尝试了UIView Animation提供的各类参数，都无法达到想要的动画效果。这时候，我的脑子里突然想起一个词… “贝塞尔曲线”…. 这个词经常看到，但却从没有去了解过，这次就趁着有求于它的雅兴，好好做个入门了解好了。</p>\n<h2 id=\"什么是贝塞尔曲线？\"><a href=\"#什么是贝塞尔曲线？\" class=\"headerlink\" title=\"什么是贝塞尔曲线？\"></a>什么是贝塞尔曲线？</h2><p>  显而易见的是，贝塞尔曲线，应该就是是一个叫贝塞尔的人发明的曲线吧，然而历史剧本却不是这么写的。贝塞尔曲线所依据的最原始的数学公式，是早在1912年就广为人知的伯恩斯坦多项式。OK，now，What is boensitan duoxiangshi？！简单来说，伯恩斯坦多项式可以用来证明，在[ a, b ] 区间上所有的连续函数都可以用多项式来逼近，并且收敛性很强，也就是一致收敛。再简单点，就是一个连续函数，你可以将它写成若干个伯恩斯坦多项式相加的形式，并且，随着 n→∞，这个多项式将一致收敛到原函数，这个就是伯恩斯坦斯的逼近性质。<br>  不知道在说什么鬼？没关系，接着说..<br>  到了1959年，当时就职于雪铁龙的法国数学家 Paul de Casteljau 开始对伯恩斯坦多项式进行了图形化的尝试，并且提供了一种数值稳定的德卡斯特里奥（de Casteljau） 算法。根据这个算法，就可以只通过很少的控制点，去生成复杂的平滑曲线，也就是贝塞尔曲线。<br>  而贝塞尔曲线的得名，得归功于1962年就职于雷诺的法国工程师皮埃尔·贝塞尔（Pierre Bézier），他使用这种方法来辅助汽车的车体工业设计，并且广泛宣传，因此大家才都称他为贝塞尔曲线  。</p>\n<h2 id=\"贝塞尔曲线是怎么画出来的？\"><a href=\"#贝塞尔曲线是怎么画出来的？\" class=\"headerlink\" title=\"贝塞尔曲线是怎么画出来的？\"></a>贝塞尔曲线是怎么画出来的？</h2><p>首先，我们在平面内选3个不同线的点并且依次用线段连接。如下所示..<br><img src=\"56030-48977fcfcd8cd57e.png\" alt=\"\"><br>接着，我们在AB和BC线段上找出点D和点E，使得AD/AB = BE/BC。<br><img src=\"56030-5d3e252f34e657c9.jpg\" alt=\"\"><br>再接着，连接DE，并在DE上找出一点F，使得DF/DE =  AD/AB = BE/BC。<br><img src=\"56030-5175f6c03d4990b2.jpg\" alt=\"\"><br>然后，根据我们高中所学的极限的知识，让选取的点D在第一条线段上从起点A，移动到终点B，找出所有点F，并将它们连起来。最后你会发现，你得到了一条非常光滑的曲线，这条就是传说中的，贝塞尔曲线。<br>看这里…  </p>\n<p><img src=\"56030-bb6b8c6a46f12135.gif\" alt=\"\"></p>\n<p>这是二阶贝塞尔曲线。  </p>\n<p>下面是三阶四阶和五阶。  </p>\n<p><img src=\"56030-f3e69b487f4e37c8.gif\" alt=\"\">  </p>\n<p><img src=\"56030-2d2fb8989e10f177.gif\" alt=\"\">  </p>\n<p><img src=\"56030-390b7b874ddd5d3d.gif\" alt=\"\">  </p>\n<p>最后是… 一阶….  </p>\n<p><img src=\"56030-b65e3dd8196f4da5.gif\" alt=\"\">  </p>\n<p>所以贝塞尔曲线的厉害之处就在这里，从1-n阶的连续函数，他都可以计算得到一条光滑曲线。</p>\n<h2 id=\"贝塞尔曲线有什么用？为什么经常会听到这个名称？\"><a href=\"#贝塞尔曲线有什么用？为什么经常会听到这个名称？\" class=\"headerlink\" title=\"贝塞尔曲线有什么用？为什么经常会听到这个名称？\"></a>贝塞尔曲线有什么用？为什么经常会听到这个名称？</h2><p>由于贝塞尔曲线控制简便，而且它具有很强的描述能力，因此它在工业设计上已经被广泛使用了。不仅如此，在计算机图形学领域（特别是矢量图形学），贝塞尔曲线也有着举足轻重的地位。而作为程序猿，我们经常会用贝塞尔曲线来绘图（由贝塞尔曲线画出来的图很光滑~），来做动画（很自然的动画）等等。也就是由于它可以发挥的作用领域太广了，因此我们时不时都会听到这个名字。</p>\n<h2 id=\"如何使用贝塞尔曲线？\"><a href=\"#如何使用贝塞尔曲线？\" class=\"headerlink\" title=\"如何使用贝塞尔曲线？\"></a>如何使用贝塞尔曲线？</h2><p>首先，要明确的一点是，对于贝塞尔曲线来说，最重要的点是，数据点和控制点。<br>数据点： 指一条路径的起始点和终止点。<br>控制点：控制点决定了一条路径的弯曲轨迹，根据控制点的个数，贝塞尔曲线被分为一阶贝塞尔曲线（0个控制点）、二阶贝塞尔曲线（1个控制点）、三阶贝塞尔曲线（2个控制点）等等。<br>而系统给我们提供了一个叫做UIBezierPath类，用它可以画简单的圆形，椭圆，矩形，圆角矩形，也可以通过添加点去生成任意的图形，还可以简单的创建一条二阶贝塞尔曲线和三阶贝塞尔曲线。</p>\n<h3 id=\"用法1：简单地画图形\"><a href=\"#用法1：简单地画图形\" class=\"headerlink\" title=\"用法1：简单地画图形\"></a>用法1：简单地画图形</h3><p>这里的简单用法就不细讲，虽然类名叫UIBezierPath，但画圆形啥的跟贝塞尔也没啥关系，直接贴代码。  </p>\n<ul>\n<li>画圆形      </li>\n</ul>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">UIBezierPath</span> *bPath = [<span class=\"built_in\">UIBezierPath</span> bezierPathWithArcCenter:<span class=\"built_in\">CGPointMake</span>(<span class=\"number\">300</span>, <span class=\"number\">300</span>) radius:<span class=\"number\">50</span></span><br><span class=\"line\">                                            startAngle: DEGREES_TO_RADIANS(<span class=\"number\">135</span>) endAngle:M_PI*<span class=\"number\">2</span> clockwise:<span class=\"literal\">YES</span>];</span><br><span class=\"line\">   [bPath setLineWidth:<span class=\"number\">5</span>];</span><br><span class=\"line\">   <span class=\"comment\">//绘制</span></span><br><span class=\"line\">   [bPath stroke];</span><br></pre></td></tr></table></figure>\n<ul>\n<li>画椭圆</li>\n</ul>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">UIBezierPath</span> *ovalPath = [<span class=\"built_in\">UIBezierPath</span> bezierPathWithOvalInRect:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">200</span>, <span class=\"number\">150</span>, <span class=\"number\">100</span>, <span class=\"number\">200</span>)];</span><br><span class=\"line\">   [ovalPath setLineWidth:<span class=\"number\">5</span>];</span><br><span class=\"line\">   [ovalPath stroke];</span><br></pre></td></tr></table></figure>\n<ul>\n<li>画矩形</li>\n</ul>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">UIBezierPath</span> *myBezierPath = [<span class=\"built_in\">UIBezierPath</span> bezierPathWithRect:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">20</span>, <span class=\"number\">20</span>, <span class=\"number\">100</span>, <span class=\"number\">50</span>)];</span><br><span class=\"line\">  </span><br><span class=\"line\">   [[<span class=\"built_in\">UIColor</span> blackColor]setStroke];</span><br><span class=\"line\">   [myBezierPath setLineWidth:<span class=\"number\">5</span>];</span><br><span class=\"line\">   [myBezierPath stroke];</span><br></pre></td></tr></table></figure>\n<ul>\n<li>画圆角矩形</li>\n</ul>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//UIRectCorner可以设置 哪几个角是圆角，其他不变  </span></span><br><span class=\"line\">\t <span class=\"built_in\">UIBezierPath</span> *tBPath = [<span class=\"built_in\">UIBezierPath</span> bezierPathWithRoundedRect:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">220</span>, <span class=\"number\">20</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>)                                                 </span><br><span class=\"line\">\t byRoundingCorners:<span class=\"built_in\">UIRectCornerTopLeft</span> | <span class=\"built_in\">UIRectCornerBottomLeft</span> cornerRadii:<span class=\"built_in\">CGSizeMake</span>(<span class=\"number\">20</span>, <span class=\"number\">20</span>)];</span><br><span class=\"line\">     </span><br><span class=\"line\">     [[<span class=\"built_in\">UIColor</span> greenColor]setStroke];</span><br><span class=\"line\">     [tBPath setLineWidth:<span class=\"number\">5</span>];</span><br><span class=\"line\">     [tBPath stroke];</span><br></pre></td></tr></table></figure>\n<ul>\n<li>通过任意点画任意图形</li>\n</ul>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">UIBezierPath</span>* aPath = [<span class=\"built_in\">UIBezierPath</span> bezierPath];</span><br><span class=\"line\">aPath.lineWidth = <span class=\"number\">15.0</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">   aPath.lineCapStyle = kCGLineCapButt;  <span class=\"comment\">//线条终点</span></span><br><span class=\"line\">   <span class=\"comment\">//round 圆形</span></span><br><span class=\"line\">   <span class=\"comment\">//butt 平的 默认值 把线连接到精准的终点</span></span><br><span class=\"line\">   <span class=\"comment\">//Square 平的，会把线延伸到终点再加上线宽的一半  </span></span><br><span class=\"line\">   aPath.lineJoinStyle = kCGLineJoinBevel;  <span class=\"comment\">//拐点处理</span></span><br><span class=\"line\">   <span class=\"comment\">//bevel 斜角斜面，角的外侧是平的不圆滑</span></span><br><span class=\"line\">   <span class=\"comment\">//miter 斜接 角的外侧是尖的</span></span><br><span class=\"line\">   <span class=\"comment\">//round 圆角</span></span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">//这是起点  </span></span><br><span class=\"line\">   [aPath moveToPoint:<span class=\"built_in\">CGPointMake</span>(<span class=\"number\">100.0</span>, <span class=\"number\">200.0</span>)];</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">//添加点  </span></span><br><span class=\"line\">   [aPath addLineToPoint:<span class=\"built_in\">CGPointMake</span>(<span class=\"number\">200.0</span>, <span class=\"number\">240.0</span>)];</span><br><span class=\"line\">   [aPath addLineToPoint:<span class=\"built_in\">CGPointMake</span>(<span class=\"number\">160</span>, <span class=\"number\">340</span>)];</span><br><span class=\"line\">   [aPath addLineToPoint:<span class=\"built_in\">CGPointMake</span>(<span class=\"number\">40.0</span>, <span class=\"number\">340</span>)];</span><br><span class=\"line\">   [aPath addLineToPoint:<span class=\"built_in\">CGPointMake</span>(<span class=\"number\">10.0</span>, <span class=\"number\">240.0</span>)];</span><br><span class=\"line\">   [aPath closePath]; <span class=\"comment\">//第五条线通过调用closePath方法得到的</span></span><br><span class=\"line\">     </span><br><span class=\"line\">   [aPath stroke]; <span class=\"comment\">//Draws line 根据坐标点连线</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>画二阶贝塞尔</li>\n</ul>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">UIBezierPath</span>* twoPath = [<span class=\"built_in\">UIBezierPath</span> bezierPath];</span><br><span class=\"line\">   twoPath.lineWidth = <span class=\"number\">5.0</span>;<span class=\"comment\">//宽度</span></span><br><span class=\"line\">   twoPath.lineCapStyle = kCGLineCapRound;  <span class=\"comment\">//线条拐角</span></span><br><span class=\"line\">   twoPath.lineJoinStyle = kCGLineJoinRound;  <span class=\"comment\">//终点处理</span></span><br><span class=\"line\">   <span class=\"comment\">//起始点</span></span><br><span class=\"line\">   [twoPath moveToPoint:<span class=\"built_in\">CGPointMake</span>(<span class=\"number\">20</span>, <span class=\"number\">100</span>)];</span><br><span class=\"line\">   <span class=\"comment\">//添加两个控制点</span></span><br><span class=\"line\">   [twoPath addQuadCurveToPoint:<span class=\"built_in\">CGPointMake</span>(<span class=\"number\">220</span>, <span class=\"number\">100</span>) controlPoint:<span class=\"built_in\">CGPointMake</span>(<span class=\"number\">170</span>, <span class=\"number\">0</span>)];</span><br><span class=\"line\">   <span class=\"comment\">//划线</span></span><br><span class=\"line\">   [twoPath stroke];</span><br></pre></td></tr></table></figure>\n<ul>\n<li>画三阶贝塞尔<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UIBezierPath* bPath = [UIBezierPath bezierPath];</span><br><span class=\"line\">   </span><br><span class=\"line\">   bPath.lineWidth = 5.0;</span><br><span class=\"line\">   bPath.lineCapStyle = kCGLineCapRound;  //线条拐角</span><br><span class=\"line\">   bPath.lineJoinStyle = kCGLineCapRound;  //终点处理</span><br><span class=\"line\">   //起始点</span><br><span class=\"line\">   [bPath moveToPoint:CGPointMake(20, 250)];</span><br><span class=\"line\">   </span><br><span class=\"line\">   //添加两个控制点</span><br><span class=\"line\">   [bPath addCurveToPoint:CGPointMake(350, 250) controlPoint1:CGPointMake(310, 200) controlPoint2:CGPointMake(210, 400)];</span><br><span class=\"line\">   [bPath stroke];</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"用法2：用贝塞尔曲线圆滑绘图\"><a href=\"#用法2：用贝塞尔曲线圆滑绘图\" class=\"headerlink\" title=\"用法2：用贝塞尔曲线圆滑绘图\"></a>用法2：用贝塞尔曲线圆滑绘图</h3><p>这个用法可以说是处女座的福音。<br>假设这么一个场景：产品提了个需求，来吧，咱们来做一个你画我猜的APP。你画我猜？肯定是要先有画了。简单！新建个UIView的子类，然后在它的初始化方法中创建Path和手势。  </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Create a path to connect lines</span></span><br><span class=\"line\">path = [<span class=\"built_in\">UIBezierPath</span> bezierPath];</span><br><span class=\"line\"><span class=\"comment\">// Capture touches</span></span><br><span class=\"line\"><span class=\"built_in\">UIPanGestureRecognizer</span> *pan = [[<span class=\"built_in\">UIPanGestureRecognizer</span> alloc] initWithTarget:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(pan:)];</span><br><span class=\"line\">pan.maximumNumberOfTouches = pan.minimumNumberOfTouches = <span class=\"number\">1</span>;</span><br><span class=\"line\">[<span class=\"keyword\">self</span> addGestureRecognizer:pan];</span><br></pre></td></tr></table></figure>\n<p>再将捕获到的pan事件location数据依次加入到path中，并且用直线连接两点。 </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)pan:(<span class=\"built_in\">UIPanGestureRecognizer</span> *)pan &#123;</span><br><span class=\"line\">    <span class=\"built_in\">CGPoint</span> currentPoint = [pan locationInView:<span class=\"keyword\">self</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pan.state == <span class=\"built_in\">UIGestureRecognizerStateBegan</span>) &#123;</span><br><span class=\"line\">        [path moveToPoint:currentPoint];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pan.state == <span class=\"built_in\">UIGestureRecognizerStateChanged</span>) &#123;</span><br><span class=\"line\">        [path addLineToPoint:currentPoint];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> setNeedsDisplay];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后画出轨迹。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)drawRect:(<span class=\"built_in\">CGRect</span>)rect &#123;</span><br><span class=\"line\">     [[<span class=\"built_in\">UIColor</span> blackColor] setStroke];</span><br><span class=\"line\">     [path stroke];</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>最后将这个view添加到控制器上，很开心的Command + R，让程序跑起来。</p>\n<p>开始画~<br>然后你就会发现，画出来的曲线是这样的。。<br><img src=\"56030-c2894a2979862cd1.png\" alt=\"\"></p>\n<p>WHAT THE FXXK!!<br>怎么可以有这么多锯齿。。<br>所以这个时候，贝塞尔曲线就很有用了。它的定义是可以找到两点之间的光滑曲线，因为我们之前手势移动的时候，两点之间都是使用直线连接，如果我们可以使用贝塞尔曲线连接，那应该就不会出现这个问题了。<br>试一下。<br>首先写一个计算中点的方法，我们到时会使用这个中点作为控制点。  </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"built_in\">CGPoint</span> midpoint(<span class=\"built_in\">CGPoint</span> p0, <span class=\"built_in\">CGPoint</span> p1) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> (<span class=\"built_in\">CGPoint</span>) &#123;</span><br><span class=\"line\">         (p0.x + p1.x) / <span class=\"number\">2.0</span>,</span><br><span class=\"line\">         (p0.y + p1.y) / <span class=\"number\">2.0</span></span><br><span class=\"line\">     &#125;;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>最后将手势处理中的连接方式替换成使用贝塞尔曲线。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)pan:(<span class=\"built_in\">UIPanGestureRecognizer</span> *)pan &#123;</span><br><span class=\"line\">     <span class=\"built_in\">CGPoint</span> currentPoint = [pan locationInView:<span class=\"keyword\">self</span>];</span><br><span class=\"line\">     <span class=\"built_in\">CGPoint</span> midPoint = midpoint(previousPoint, currentPoint);</span><br><span class=\"line\"> </span><br><span class=\"line\">     <span class=\"keyword\">if</span> (pan.state == <span class=\"built_in\">UIGestureRecognizerStateBegan</span>) &#123;</span><br><span class=\"line\">         [path moveToPoint:currentPoint];</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pan.state == <span class=\"built_in\">UIGestureRecognizerStateChanged</span>) &#123;</span><br><span class=\"line\">         [path addQuadCurveToPoint:midPoint controlPoint:previousPoint];</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     previousPoint = currentPoint;</span><br><span class=\"line\">     [<span class=\"keyword\">self</span> setNeedsDisplay];</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>再Run一次…<br><img src=\"56030-de6fcb447ec49b87.png\" alt=\"\"></p>\n<p>看，光滑多了~<br><strong>所以很多时候，当我们遇到画出的图形太不自然的时候，就可以试着用贝塞尔曲线解决这些问题，用到越高阶的曲线，画出的图形越光滑。</strong> </p>\n<h3 id=\"用法3：用贝塞尔曲线做变形\"><a href=\"#用法3：用贝塞尔曲线做变形\" class=\"headerlink\" title=\"用法3：用贝塞尔曲线做变形\"></a>用法3：用贝塞尔曲线做变形</h3><p>网上看到的大多数比较酷炫的动画，都是通过修改曲线的控制点，对曲线进行变形而做的。<br>比如，我们要实现如下一个动画。<br><img src=\"56030-8fb7008726c62987.gif\" alt=\"\"></p>\n<p>这个动画最难地方就是手势拖拽的时候，直线的变形，可以首先的想到的是使用贝塞尔。通过创建path，添加控制点画出曲线，然后通过更改控制点的位置来达到让曲线进行变形的目的。<br><img src=\"56030-9b189370ffbf5aec.gif\" alt=\"\"></p>\n<p>如上图所示，这里添加了7个点，从左到右依次为l3、l2、l1、c、 r1、 r2、 r3。屏幕最左和最右两边的l3和r3没有在图中显示出来，然后我们就可以以l3和l2为控制点，从l3到l1建立一条二阶贝塞尔曲线，再以c和r1为控制点建一条从l3到r1的曲线，最后以r1和r2为控制点建一条从r1到r3的曲线。   主要代码如下：  </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"built_in\">CGPathRef</span>)currentPath &#123;</span><br><span class=\"line\">     <span class=\"built_in\">CGFloat</span> width = <span class=\"keyword\">self</span>.view.bounds.size.width;</span><br><span class=\"line\">     <span class=\"built_in\">UIBezierPath</span> *path = [<span class=\"built_in\">UIBezierPath</span> bezierPath];</span><br><span class=\"line\">     </span><br><span class=\"line\">     [path moveToPoint:<span class=\"built_in\">CGPointMake</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>)];</span><br><span class=\"line\">     [path addLineToPoint:<span class=\"built_in\">CGPointMake</span>(<span class=\"number\">0</span>, <span class=\"keyword\">self</span>.l3ControlPointView.center.y)];</span><br><span class=\"line\">     [path addCurveToPoint:<span class=\"keyword\">self</span>.l1ControlPointView.center</span><br><span class=\"line\">             controlPoint1:<span class=\"keyword\">self</span>.l3ControlPointView.center</span><br><span class=\"line\">             controlPoint2:<span class=\"keyword\">self</span>.l2ControlPointView.center];</span><br><span class=\"line\">     [path addCurveToPoint:<span class=\"keyword\">self</span>.r1ControlPointView.center</span><br><span class=\"line\">             controlPoint1:<span class=\"keyword\">self</span>.cControlPointView.center</span><br><span class=\"line\">             controlPoint2:<span class=\"keyword\">self</span>.r1ControlPointView.center];</span><br><span class=\"line\">     [path addCurveToPoint:<span class=\"keyword\">self</span>.r3ControlPointView.center</span><br><span class=\"line\">             controlPoint1:<span class=\"keyword\">self</span>.r1ControlPointView.center</span><br><span class=\"line\">             controlPoint2:<span class=\"keyword\">self</span>.r2ControlPointView.center];</span><br><span class=\"line\">     [path addLineToPoint:<span class=\"built_in\">CGPointMake</span>(width, <span class=\"number\">0</span>)];</span><br><span class=\"line\">     [path closePath];</span><br><span class=\"line\">     <span class=\"keyword\">return</span> path.CGPath;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>建立好路径之后，就可以通过手势操作来修改控制点的坐标达到我们的目的了。<br>在这里也就是修改l3到r3的中心点坐标。主要代码如下：  </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)panDidMove:(<span class=\"built_in\">UIPanGestureRecognizer</span> *)gesture &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (gesture.state == <span class=\"built_in\">UIGestureRecognizerStateEnded</span> ||</span><br><span class=\"line\">         gesture.state == <span class=\"built_in\">UIGestureRecognizerStateFailed</span> ||</span><br><span class=\"line\">         gesture.state == <span class=\"built_in\">UIGestureRecognizerStateCancelled</span>) &#123;</span><br><span class=\"line\">         </span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">         <span class=\"built_in\">CGFloat</span> additionalHeight = MAX([gesture translationInView:<span class=\"keyword\">self</span>.view].y, <span class=\"number\">0</span>);</span><br><span class=\"line\">         <span class=\"built_in\">CGFloat</span> waveHeight = MIN(additionalHeight*<span class=\"number\">0.6</span>, kMaxWaveHeight);</span><br><span class=\"line\">         <span class=\"built_in\">CGFloat</span> baseHeight = kMiniHeight + additionalHeight - waveHeight;</span><br><span class=\"line\">         <span class=\"built_in\">CGFloat</span> locationX = [gesture locationInView:gesture.view].x;</span><br><span class=\"line\">         </span><br><span class=\"line\">         [<span class=\"keyword\">self</span> layoutControlPoints:baseHeight waveHeight:waveHeight locationX:locationX];</span><br><span class=\"line\">         [<span class=\"keyword\">self</span> updateShapeLayer];</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> - (<span class=\"keyword\">void</span>)layoutControlPoints:(<span class=\"built_in\">CGFloat</span>)baseHeight</span><br><span class=\"line\">                  waveHeight:(<span class=\"built_in\">CGFloat</span>)waveHeight</span><br><span class=\"line\">                   locationX:(<span class=\"built_in\">CGFloat</span>)locationX &#123;</span><br><span class=\"line\">     <span class=\"built_in\">CGFloat</span> width = <span class=\"keyword\">self</span>.view.bounds.size.width;</span><br><span class=\"line\">     <span class=\"built_in\">CGFloat</span> minLeftX = MIN(locationX-width/<span class=\"number\">2</span>*<span class=\"number\">0.28</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">     <span class=\"built_in\">CGFloat</span> maxRightX = MAX(width+(locationX-width)/<span class=\"number\">2</span> *<span class=\"number\">0.28</span>, width);</span><br><span class=\"line\">     <span class=\"built_in\">CGFloat</span> leftPartWidth = locationX - minLeftX;</span><br><span class=\"line\">     <span class=\"built_in\">CGFloat</span> rightPartWidth = maxRightX - locationX;</span><br><span class=\"line\">     </span><br><span class=\"line\">     <span class=\"keyword\">self</span>.l3ControlPointView.center = <span class=\"built_in\">CGPointMake</span>(minLeftX, baseHeight);</span><br><span class=\"line\">     <span class=\"keyword\">self</span>.l2ControlPointView.center = <span class=\"built_in\">CGPointMake</span>(minLeftX+leftPartWidth*<span class=\"number\">0.44</span>, baseHeight);</span><br><span class=\"line\">     <span class=\"keyword\">self</span>.l1ControlPointView.center = <span class=\"built_in\">CGPointMake</span>(minLeftX+leftPartWidth*<span class=\"number\">0.71</span>, baseHeight+waveHeight*<span class=\"number\">0.64</span>);</span><br><span class=\"line\">     <span class=\"keyword\">self</span>.cControlPointView.center = <span class=\"built_in\">CGPointMake</span>(locationX, baseHeight+waveHeight*<span class=\"number\">1.36</span>);</span><br><span class=\"line\">     <span class=\"keyword\">self</span>.r1ControlPointView.center = <span class=\"built_in\">CGPointMake</span>(maxRightX-rightPartWidth*<span class=\"number\">0.71</span>, baseHeight+waveHeight*<span class=\"number\">0.64</span>);</span><br><span class=\"line\">     <span class=\"keyword\">self</span>.r2ControlPointView.center = <span class=\"built_in\">CGPointMake</span>(maxRightX-(rightPartWidth*<span class=\"number\">0.44</span>), baseHeight);</span><br><span class=\"line\">     <span class=\"keyword\">self</span>.r3ControlPointView.center = <span class=\"built_in\">CGPointMake</span>(maxRightX, baseHeight);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> - (<span class=\"keyword\">void</span>)updateShapeLayer &#123;</span><br><span class=\"line\">     <span class=\"keyword\">self</span>.shapeLayer.path = [<span class=\"keyword\">self</span> currentPath];</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>通过这个思路，我们可以做出很多有意思而且有生命力的动画，这里一般还会经常和 <code>CADisplayLink</code> 一起用，先留个坑。 </p>\n<h3 id=\"用法4：用贝塞尔曲线做缓冲动画\"><a href=\"#用法4：用贝塞尔曲线做缓冲动画\" class=\"headerlink\" title=\"用法4：用贝塞尔曲线做缓冲动画\"></a>用法4：用贝塞尔曲线做缓冲动画</h3><p>做动画最主要的一点，就是要让动画达到很自然的效果。这就要涉及到一些现实中的物理知识，比如重力弹力和速度等等，所以有时候，我们需要对动画的速度进行控制，有时候需要先快再慢，有时候需要先慢再快然后再慢，有时候又需要快慢超慢非常慢…<br>这个时候就不得不提到 <code>CAMediaTimingFunction</code> 。<br><code>CAMediaTimingFunction</code> 的主要用法可以理解为我们在一个二维坐标系上建议一条或曲线或直线的函数，这个函数的斜率就是动画的速度，斜率的改变量也就是导数则为加速度。理论上来说，这个坐标系上的任何曲线都可以用来当做加速动画。然而<code>CAMediaTimingFunction</code> 只给我们提供了一个三次贝塞尔曲线的函数，它可以生成三次贝塞尔曲线所能生成的所有缓冲函数。<br>这里刚好可以介绍 <del>一个</del> 两个好用的网站：  <a href=\"http://www.roblaplaca.com/examples/bezierBuilder\" target=\"_blank\" rel=\"noopener\">http://www.roblaplaca.com/examples/bezierBuilder</a><br>这个网站可以做到可视化的修改两个控制点，来达到生成一条三阶贝塞尔曲线，并且还会给出两个控制点的具体坐标，以及右边还可以看到这条曲线产生的动画会做怎样的速度改变。也就是说，只要我们能拿到两个控制点的坐标，就可以用来控制动画了。<br><a href=\"http://easings.net/#\" target=\"_blank\" rel=\"noopener\">http://easings.net</a><br>这个网站提供了丰富的曲线类型可供选择，图表旁还有一个小动画预览，非常直观。<br>比如下面这段代码，就可以让我们把相册从4：3 切换到1：1 的时候，展示一个先快后慢的过渡效果，这个效果跟系统相机的还是蛮接近的。  </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">CABasicAnimation</span> *animation = [<span class=\"built_in\">CABasicAnimation</span> animation];</span><br><span class=\"line\">animation.keyPath = <span class=\"string\">@\"borderWidth\"</span>;</span><br><span class=\"line\">animation.repeatCount = <span class=\"number\">1</span>;</span><br><span class=\"line\">animation.duration = <span class=\"number\">0.4</span>;</span><br><span class=\"line\">animation.removedOnCompletion = <span class=\"literal\">NO</span>;</span><br><span class=\"line\">animation.timingFunction = [<span class=\"built_in\">CAMediaTimingFunction</span> functionWithControlPoints:<span class=\"number\">0</span> :<span class=\"number\">1</span> :<span class=\"number\">1</span> :<span class=\"number\">1</span>];</span><br><span class=\"line\">animation.fillMode = kCAFillModeForwards;</span><br><span class=\"line\">animation.fromValue = <span class=\"number\">0.</span>f;</span><br><span class=\"line\">animation.toValue = <span class=\"number\">40.</span>f;</span><br><span class=\"line\">[<span class=\"keyword\">self</span>.previewMask addAnimation:animation forKey:<span class=\"string\">@\"changeBorderWith\"</span>];</span><br></pre></td></tr></table></figure>\n<p>效果如下：<br><img src=\"56030-61f16deba712d8ac.gif\" alt=\"\"></p>\n<h3 id=\"用法5：用贝塞尔曲线做拟合计算\"><a href=\"#用法5：用贝塞尔曲线做拟合计算\" class=\"headerlink\" title=\"用法5：用贝塞尔曲线做拟合计算\"></a>用法5：用贝塞尔曲线做拟合计算</h3><p>贝塞尔曲线有个非常常用的动画效果，叫MetaBall算法。什么是MetaBall？就是我们平时看到的QQ的小红点消除啦~ 像下面这样。  </p>\n<p><img src=\"56030-88174468ef9870e3.png\" alt=\"\"></p>\n<p>这个是怎么实现的？</p>\n<h4 id=\"矩形拟合\"><a href=\"#矩形拟合\" class=\"headerlink\" title=\"矩形拟合\"></a>矩形拟合</h4><p>首先我们需要了解一下简单的矩形拟合原理  </p>\n<p><img src=\"56030-c2aa8094cd0a6004.png\" alt=\"\"></p>\n<p>如图所示的两个圆，我们通过给它添加一个矩形（绿色部分），矩形较短的两边分别顶住两个圆各自的一条直径上，然后通过改变矩形较长的两边的弧度（红色部分），达到拟合的效果。  </p>\n<p><img src=\"56030-9e2c8e268d676528.png\" alt=\"\"></p>\n<p>这种做法当两个圆较小的时候，几乎是没有问题的。但是当圆稍微大点的时候，就会出现很明显的相交区域，拟合效果非常不好。  </p>\n<p><img src=\"56030-4ad6b01ea2c03caa.png\" alt=\"\"></p>\n<p>所以这种简单的矩形拟合在圆较大的时候是很不严格的。这个时候就需要更严谨的切线拟合。  </p>\n<h4 id=\"切线拟合\"><a href=\"#切线拟合\" class=\"headerlink\" title=\"切线拟合\"></a>切线拟合</h4><p>我们知道，之前的矩形拟合之所以才圆大的时候会出现拟合不严谨的情况。为什么？</p>\n<p><img src=\"56030-86bc9a9afdb15e48.png\" alt=\"\"></p>\n<p>正如上图所示，两条曲线的画法都是由A1和B1为起点和终点，C点为控制点和A1、B2为起点和终点，C为控制点画出的二阶贝塞尔曲线。<br>而要做到完美的拟合，必须达到的一点要求就是，贝塞尔曲线与圆的连接点，也就是A1、B1、A2、B2，他们与控制点C的连线，一定要是圆的切线。这样就不管圆大小怎么变，都不会出现明显的相交区域了。</p>\n<p><img src=\"56030-8c56a1e98f432000.jpg\" alt=\"\">  </p>\n<blockquote>\n<p>图片引用: <a href=\"http://www.jianshu.com/p/55c721887568\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/55c721887568</a></p>\n</blockquote>\n<p>于是，现在解决问题的关键就转变成了：如何计算这些拟合的关键点？</p>\n<p><img src=\"56030-6700ecb2811dcac4.jpg\" alt=\"\">  </p>\n<blockquote>\n<p>图片引用: <a href=\"http://pandara.xyz/2015/10/27/ios_slime\" target=\"_blank\" rel=\"noopener\">http://pandara.xyz/2015/10/27/ios_slime</a></p>\n</blockquote>\n<p>我们现在要做的，就是求出点ABCDMN这六个点的坐标，就可以实现完美拟合了。<br>结合上面两张图，通过三角函数的各种计算，我们最终可以得到如下代码：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)reloadBezierPath &#123;</span><br><span class=\"line\">     <span class=\"built_in\">CGFloat</span> r1 = <span class=\"keyword\">self</span>.trailDot.frame.size.width / <span class=\"number\">2.0</span>f;</span><br><span class=\"line\">     <span class=\"built_in\">CGFloat</span> r2 = <span class=\"keyword\">self</span>.headDot.frame.size.width / <span class=\"number\">2.0</span>f;</span><br><span class=\"line\">     </span><br><span class=\"line\">     <span class=\"built_in\">CGFloat</span> x1 = <span class=\"keyword\">self</span>.trailDot.center.x;</span><br><span class=\"line\">     <span class=\"built_in\">CGFloat</span> y1 = <span class=\"keyword\">self</span>.trailDot.center.y;</span><br><span class=\"line\">     <span class=\"built_in\">CGFloat</span> x2 = <span class=\"keyword\">self</span>.headDot.center.x;</span><br><span class=\"line\">     <span class=\"built_in\">CGFloat</span> y2 = <span class=\"keyword\">self</span>.headDot.center.y;</span><br><span class=\"line\">     </span><br><span class=\"line\">     <span class=\"built_in\">CGFloat</span> distance = sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));</span><br><span class=\"line\">     </span><br><span class=\"line\">     <span class=\"built_in\">CGFloat</span> sinDegree = (x2 - x1) / distance;</span><br><span class=\"line\">     <span class=\"built_in\">CGFloat</span> cosDegree = (y2 - y1) / distance;</span><br><span class=\"line\">     </span><br><span class=\"line\">     <span class=\"built_in\">CGPoint</span> pointA = <span class=\"built_in\">CGPointMake</span>(x1 - r1 * cosDegree, y1 + r1 * sinDegree);</span><br><span class=\"line\">     <span class=\"built_in\">CGPoint</span> pointB = <span class=\"built_in\">CGPointMake</span>(x1 + r1 * cosDegree, y1 - r1 * sinDegree);</span><br><span class=\"line\">     <span class=\"built_in\">CGPoint</span> pointC = <span class=\"built_in\">CGPointMake</span>(x2 + r2 * cosDegree, y2 - r2 * sinDegree);</span><br><span class=\"line\">     <span class=\"built_in\">CGPoint</span> pointD = <span class=\"built_in\">CGPointMake</span>(x2 - r2 * cosDegree, y2 + r2 * sinDegree);</span><br><span class=\"line\">     <span class=\"built_in\">CGPoint</span> pointN = <span class=\"built_in\">CGPointMake</span>(pointB.x + (distance / <span class=\"number\">2</span>) * sinDegree, pointB.y + (distance / <span class=\"number\">2</span>) * cosDegree);</span><br><span class=\"line\">     <span class=\"built_in\">CGPoint</span> pointM = <span class=\"built_in\">CGPointMake</span>(pointA.x + (distance / <span class=\"number\">2</span>) * sinDegree, pointA.y + (distance / <span class=\"number\">2</span>) * cosDegree);</span><br><span class=\"line\">     </span><br><span class=\"line\">     <span class=\"built_in\">UIBezierPath</span> *path = [<span class=\"built_in\">UIBezierPath</span> bezierPath];</span><br><span class=\"line\">     [path moveToPoint:pointA];</span><br><span class=\"line\">     [path addLineToPoint:pointB];</span><br><span class=\"line\">     [path addQuadCurveToPoint:pointC controlPoint:pointN];</span><br><span class=\"line\">     [path addLineToPoint:pointD];</span><br><span class=\"line\">     [path addQuadCurveToPoint:pointA controlPoint:pointM];</span><br><span class=\"line\">     </span><br><span class=\"line\">     <span class=\"keyword\">self</span>.shapeLayer.path = path.CGPath;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>现在我们已经可以做到非常完美拟合的时候了，这时候再结合前面的通过修改控制点来实现图形曲线变换，我们就可以做到类似QQ小红点消除一样的效果了，具体做法不再赘述。</p>\n<h2 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"Ending\"></a>Ending</h2><p>至此，我们已基本了解了贝塞尔曲线的历史出处公式性质及各种用法。在不断学习的过程中，我发现一些比较牛逼的实现方法，都涉及到了较多较复杂的数学公式，奈何大学高数没有好好学，导致需要回头去看很多东西，这也是这篇博客耗费了较多时间的原因之一。不过在掌握了这些基础和基本用法之后，就可以再去研究一下比较高级和酷炫的用法了，也留下了很多坑，会在以后慢慢填补的…<br>如果以后还想补的话….<br>文中如果有什么不足之处欢迎指正，这也是Share的目的之一。<br>Have fun ~  </p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://zh.wikipedia.org/wiki/%E8%B2%9D%E8%8C%B2%E6%9B%B2%E7%B7%9A\" target=\"_blank\" rel=\"noopener\">贝塞尔曲线维基百科</a><br><a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIBezierPath_class/\" target=\"_blank\" rel=\"noopener\">UIBezierPath Class Reference</a><br><a href=\"http://www.html-js.com/article/1628\" target=\"_blank\" rel=\"noopener\">贝塞尔曲线扫盲</a><br><a href=\"https://zsisme.gitbooks.io/ios-/content/chapter10/custom-easing-functions.html\" target=\"_blank\" rel=\"noopener\">自定义缓冲函数</a><br><a href=\"http://www.jianshu.com/p/5dbdd1ee47aa\" target=\"_blank\" rel=\"noopener\">iOS-UI进阶13 - 贝塞尔曲线和帧动画结合</a><br><a href=\"http://www.jianshu.com/p/55c721887568\" target=\"_blank\" rel=\"noopener\">贝塞尔曲线开发的艺术</a></p>\n","site":{"data":{"links":{"Colin’s Nest":{"link":"http://colin1994.github.io/","avatar":"http://example.com/avatar.png"},"Vong":{"link":"https://vongloo.me/","avatar":"http://example.com/avatar.png"},"Punmy":{"link":"https://punmy.cn/","avatar":"http://example.com/avatar.png"},"细语呢喃":{"link":"https://www.hrwhisper.me/","avatar":"http://example.com/avatar.png"},"栖迟于一丘":{"link":"https://www.hongweipeng.com/","avatar":"http://example.com/avatar.png"},"B1ueW01f":{"link":"https://www.b1uew01f.net/","avatar":"http://example.com/avatar.png"},"忘归":{"link":"http://jalan.space/","avatar":"http://example.com/avatar.png"},"进阶者":{"link":"https://ruphi.cn/","avatar":"http://example.com/avatar.png"},"LIZIMEOW'S BLOG":{"link":"http://lizimeow.cn/","avatar":"http://example.com/avatar.png"},"Saitjr":{"link":"http://www.saitjr.com/","avatar":null}}}},"excerpt":"","more":"<p>最近在做项目的时候，需要用到一个动画，非常简单的动画，简单到就是直接对一个View做平移… 然而虽然动画简单，但是却很不自然，尝试了UIView Animation提供的各类参数，都无法达到想要的动画效果。这时候，我的脑子里突然想起一个词… “贝塞尔曲线”…. 这个词经常看到，但却从没有去了解过，这次就趁着有求于它的雅兴，好好做个入门了解好了。</p>\n<h2 id=\"什么是贝塞尔曲线？\"><a href=\"#什么是贝塞尔曲线？\" class=\"headerlink\" title=\"什么是贝塞尔曲线？\"></a>什么是贝塞尔曲线？</h2><p>  显而易见的是，贝塞尔曲线，应该就是是一个叫贝塞尔的人发明的曲线吧，然而历史剧本却不是这么写的。贝塞尔曲线所依据的最原始的数学公式，是早在1912年就广为人知的伯恩斯坦多项式。OK，now，What is boensitan duoxiangshi？！简单来说，伯恩斯坦多项式可以用来证明，在[ a, b ] 区间上所有的连续函数都可以用多项式来逼近，并且收敛性很强，也就是一致收敛。再简单点，就是一个连续函数，你可以将它写成若干个伯恩斯坦多项式相加的形式，并且，随着 n→∞，这个多项式将一致收敛到原函数，这个就是伯恩斯坦斯的逼近性质。<br>  不知道在说什么鬼？没关系，接着说..<br>  到了1959年，当时就职于雪铁龙的法国数学家 Paul de Casteljau 开始对伯恩斯坦多项式进行了图形化的尝试，并且提供了一种数值稳定的德卡斯特里奥（de Casteljau） 算法。根据这个算法，就可以只通过很少的控制点，去生成复杂的平滑曲线，也就是贝塞尔曲线。<br>  而贝塞尔曲线的得名，得归功于1962年就职于雷诺的法国工程师皮埃尔·贝塞尔（Pierre Bézier），他使用这种方法来辅助汽车的车体工业设计，并且广泛宣传，因此大家才都称他为贝塞尔曲线  。</p>\n<h2 id=\"贝塞尔曲线是怎么画出来的？\"><a href=\"#贝塞尔曲线是怎么画出来的？\" class=\"headerlink\" title=\"贝塞尔曲线是怎么画出来的？\"></a>贝塞尔曲线是怎么画出来的？</h2><p>首先，我们在平面内选3个不同线的点并且依次用线段连接。如下所示..<br><img src=\"56030-48977fcfcd8cd57e.png\" alt=\"\"><br>接着，我们在AB和BC线段上找出点D和点E，使得AD/AB = BE/BC。<br><img src=\"56030-5d3e252f34e657c9.jpg\" alt=\"\"><br>再接着，连接DE，并在DE上找出一点F，使得DF/DE =  AD/AB = BE/BC。<br><img src=\"56030-5175f6c03d4990b2.jpg\" alt=\"\"><br>然后，根据我们高中所学的极限的知识，让选取的点D在第一条线段上从起点A，移动到终点B，找出所有点F，并将它们连起来。最后你会发现，你得到了一条非常光滑的曲线，这条就是传说中的，贝塞尔曲线。<br>看这里…  </p>\n<p><img src=\"56030-bb6b8c6a46f12135.gif\" alt=\"\"></p>\n<p>这是二阶贝塞尔曲线。  </p>\n<p>下面是三阶四阶和五阶。  </p>\n<p><img src=\"56030-f3e69b487f4e37c8.gif\" alt=\"\">  </p>\n<p><img src=\"56030-2d2fb8989e10f177.gif\" alt=\"\">  </p>\n<p><img src=\"56030-390b7b874ddd5d3d.gif\" alt=\"\">  </p>\n<p>最后是… 一阶….  </p>\n<p><img src=\"56030-b65e3dd8196f4da5.gif\" alt=\"\">  </p>\n<p>所以贝塞尔曲线的厉害之处就在这里，从1-n阶的连续函数，他都可以计算得到一条光滑曲线。</p>\n<h2 id=\"贝塞尔曲线有什么用？为什么经常会听到这个名称？\"><a href=\"#贝塞尔曲线有什么用？为什么经常会听到这个名称？\" class=\"headerlink\" title=\"贝塞尔曲线有什么用？为什么经常会听到这个名称？\"></a>贝塞尔曲线有什么用？为什么经常会听到这个名称？</h2><p>由于贝塞尔曲线控制简便，而且它具有很强的描述能力，因此它在工业设计上已经被广泛使用了。不仅如此，在计算机图形学领域（特别是矢量图形学），贝塞尔曲线也有着举足轻重的地位。而作为程序猿，我们经常会用贝塞尔曲线来绘图（由贝塞尔曲线画出来的图很光滑~），来做动画（很自然的动画）等等。也就是由于它可以发挥的作用领域太广了，因此我们时不时都会听到这个名字。</p>\n<h2 id=\"如何使用贝塞尔曲线？\"><a href=\"#如何使用贝塞尔曲线？\" class=\"headerlink\" title=\"如何使用贝塞尔曲线？\"></a>如何使用贝塞尔曲线？</h2><p>首先，要明确的一点是，对于贝塞尔曲线来说，最重要的点是，数据点和控制点。<br>数据点： 指一条路径的起始点和终止点。<br>控制点：控制点决定了一条路径的弯曲轨迹，根据控制点的个数，贝塞尔曲线被分为一阶贝塞尔曲线（0个控制点）、二阶贝塞尔曲线（1个控制点）、三阶贝塞尔曲线（2个控制点）等等。<br>而系统给我们提供了一个叫做UIBezierPath类，用它可以画简单的圆形，椭圆，矩形，圆角矩形，也可以通过添加点去生成任意的图形，还可以简单的创建一条二阶贝塞尔曲线和三阶贝塞尔曲线。</p>\n<h3 id=\"用法1：简单地画图形\"><a href=\"#用法1：简单地画图形\" class=\"headerlink\" title=\"用法1：简单地画图形\"></a>用法1：简单地画图形</h3><p>这里的简单用法就不细讲，虽然类名叫UIBezierPath，但画圆形啥的跟贝塞尔也没啥关系，直接贴代码。  </p>\n<ul>\n<li>画圆形      </li>\n</ul>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">UIBezierPath</span> *bPath = [<span class=\"built_in\">UIBezierPath</span> bezierPathWithArcCenter:<span class=\"built_in\">CGPointMake</span>(<span class=\"number\">300</span>, <span class=\"number\">300</span>) radius:<span class=\"number\">50</span></span><br><span class=\"line\">                                            startAngle: DEGREES_TO_RADIANS(<span class=\"number\">135</span>) endAngle:M_PI*<span class=\"number\">2</span> clockwise:<span class=\"literal\">YES</span>];</span><br><span class=\"line\">   [bPath setLineWidth:<span class=\"number\">5</span>];</span><br><span class=\"line\">   <span class=\"comment\">//绘制</span></span><br><span class=\"line\">   [bPath stroke];</span><br></pre></td></tr></table></figure>\n<ul>\n<li>画椭圆</li>\n</ul>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">UIBezierPath</span> *ovalPath = [<span class=\"built_in\">UIBezierPath</span> bezierPathWithOvalInRect:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">200</span>, <span class=\"number\">150</span>, <span class=\"number\">100</span>, <span class=\"number\">200</span>)];</span><br><span class=\"line\">   [ovalPath setLineWidth:<span class=\"number\">5</span>];</span><br><span class=\"line\">   [ovalPath stroke];</span><br></pre></td></tr></table></figure>\n<ul>\n<li>画矩形</li>\n</ul>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">UIBezierPath</span> *myBezierPath = [<span class=\"built_in\">UIBezierPath</span> bezierPathWithRect:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">20</span>, <span class=\"number\">20</span>, <span class=\"number\">100</span>, <span class=\"number\">50</span>)];</span><br><span class=\"line\">  </span><br><span class=\"line\">   [[<span class=\"built_in\">UIColor</span> blackColor]setStroke];</span><br><span class=\"line\">   [myBezierPath setLineWidth:<span class=\"number\">5</span>];</span><br><span class=\"line\">   [myBezierPath stroke];</span><br></pre></td></tr></table></figure>\n<ul>\n<li>画圆角矩形</li>\n</ul>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//UIRectCorner可以设置 哪几个角是圆角，其他不变  </span></span><br><span class=\"line\">\t <span class=\"built_in\">UIBezierPath</span> *tBPath = [<span class=\"built_in\">UIBezierPath</span> bezierPathWithRoundedRect:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">220</span>, <span class=\"number\">20</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>)                                                 </span><br><span class=\"line\">\t byRoundingCorners:<span class=\"built_in\">UIRectCornerTopLeft</span> | <span class=\"built_in\">UIRectCornerBottomLeft</span> cornerRadii:<span class=\"built_in\">CGSizeMake</span>(<span class=\"number\">20</span>, <span class=\"number\">20</span>)];</span><br><span class=\"line\">     </span><br><span class=\"line\">     [[<span class=\"built_in\">UIColor</span> greenColor]setStroke];</span><br><span class=\"line\">     [tBPath setLineWidth:<span class=\"number\">5</span>];</span><br><span class=\"line\">     [tBPath stroke];</span><br></pre></td></tr></table></figure>\n<ul>\n<li>通过任意点画任意图形</li>\n</ul>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">UIBezierPath</span>* aPath = [<span class=\"built_in\">UIBezierPath</span> bezierPath];</span><br><span class=\"line\">aPath.lineWidth = <span class=\"number\">15.0</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">   aPath.lineCapStyle = kCGLineCapButt;  <span class=\"comment\">//线条终点</span></span><br><span class=\"line\">   <span class=\"comment\">//round 圆形</span></span><br><span class=\"line\">   <span class=\"comment\">//butt 平的 默认值 把线连接到精准的终点</span></span><br><span class=\"line\">   <span class=\"comment\">//Square 平的，会把线延伸到终点再加上线宽的一半  </span></span><br><span class=\"line\">   aPath.lineJoinStyle = kCGLineJoinBevel;  <span class=\"comment\">//拐点处理</span></span><br><span class=\"line\">   <span class=\"comment\">//bevel 斜角斜面，角的外侧是平的不圆滑</span></span><br><span class=\"line\">   <span class=\"comment\">//miter 斜接 角的外侧是尖的</span></span><br><span class=\"line\">   <span class=\"comment\">//round 圆角</span></span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">//这是起点  </span></span><br><span class=\"line\">   [aPath moveToPoint:<span class=\"built_in\">CGPointMake</span>(<span class=\"number\">100.0</span>, <span class=\"number\">200.0</span>)];</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">//添加点  </span></span><br><span class=\"line\">   [aPath addLineToPoint:<span class=\"built_in\">CGPointMake</span>(<span class=\"number\">200.0</span>, <span class=\"number\">240.0</span>)];</span><br><span class=\"line\">   [aPath addLineToPoint:<span class=\"built_in\">CGPointMake</span>(<span class=\"number\">160</span>, <span class=\"number\">340</span>)];</span><br><span class=\"line\">   [aPath addLineToPoint:<span class=\"built_in\">CGPointMake</span>(<span class=\"number\">40.0</span>, <span class=\"number\">340</span>)];</span><br><span class=\"line\">   [aPath addLineToPoint:<span class=\"built_in\">CGPointMake</span>(<span class=\"number\">10.0</span>, <span class=\"number\">240.0</span>)];</span><br><span class=\"line\">   [aPath closePath]; <span class=\"comment\">//第五条线通过调用closePath方法得到的</span></span><br><span class=\"line\">     </span><br><span class=\"line\">   [aPath stroke]; <span class=\"comment\">//Draws line 根据坐标点连线</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>画二阶贝塞尔</li>\n</ul>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">UIBezierPath</span>* twoPath = [<span class=\"built_in\">UIBezierPath</span> bezierPath];</span><br><span class=\"line\">   twoPath.lineWidth = <span class=\"number\">5.0</span>;<span class=\"comment\">//宽度</span></span><br><span class=\"line\">   twoPath.lineCapStyle = kCGLineCapRound;  <span class=\"comment\">//线条拐角</span></span><br><span class=\"line\">   twoPath.lineJoinStyle = kCGLineJoinRound;  <span class=\"comment\">//终点处理</span></span><br><span class=\"line\">   <span class=\"comment\">//起始点</span></span><br><span class=\"line\">   [twoPath moveToPoint:<span class=\"built_in\">CGPointMake</span>(<span class=\"number\">20</span>, <span class=\"number\">100</span>)];</span><br><span class=\"line\">   <span class=\"comment\">//添加两个控制点</span></span><br><span class=\"line\">   [twoPath addQuadCurveToPoint:<span class=\"built_in\">CGPointMake</span>(<span class=\"number\">220</span>, <span class=\"number\">100</span>) controlPoint:<span class=\"built_in\">CGPointMake</span>(<span class=\"number\">170</span>, <span class=\"number\">0</span>)];</span><br><span class=\"line\">   <span class=\"comment\">//划线</span></span><br><span class=\"line\">   [twoPath stroke];</span><br></pre></td></tr></table></figure>\n<ul>\n<li>画三阶贝塞尔<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UIBezierPath* bPath = [UIBezierPath bezierPath];</span><br><span class=\"line\">   </span><br><span class=\"line\">   bPath.lineWidth = 5.0;</span><br><span class=\"line\">   bPath.lineCapStyle = kCGLineCapRound;  //线条拐角</span><br><span class=\"line\">   bPath.lineJoinStyle = kCGLineCapRound;  //终点处理</span><br><span class=\"line\">   //起始点</span><br><span class=\"line\">   [bPath moveToPoint:CGPointMake(20, 250)];</span><br><span class=\"line\">   </span><br><span class=\"line\">   //添加两个控制点</span><br><span class=\"line\">   [bPath addCurveToPoint:CGPointMake(350, 250) controlPoint1:CGPointMake(310, 200) controlPoint2:CGPointMake(210, 400)];</span><br><span class=\"line\">   [bPath stroke];</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"用法2：用贝塞尔曲线圆滑绘图\"><a href=\"#用法2：用贝塞尔曲线圆滑绘图\" class=\"headerlink\" title=\"用法2：用贝塞尔曲线圆滑绘图\"></a>用法2：用贝塞尔曲线圆滑绘图</h3><p>这个用法可以说是处女座的福音。<br>假设这么一个场景：产品提了个需求，来吧，咱们来做一个你画我猜的APP。你画我猜？肯定是要先有画了。简单！新建个UIView的子类，然后在它的初始化方法中创建Path和手势。  </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Create a path to connect lines</span></span><br><span class=\"line\">path = [<span class=\"built_in\">UIBezierPath</span> bezierPath];</span><br><span class=\"line\"><span class=\"comment\">// Capture touches</span></span><br><span class=\"line\"><span class=\"built_in\">UIPanGestureRecognizer</span> *pan = [[<span class=\"built_in\">UIPanGestureRecognizer</span> alloc] initWithTarget:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(pan:)];</span><br><span class=\"line\">pan.maximumNumberOfTouches = pan.minimumNumberOfTouches = <span class=\"number\">1</span>;</span><br><span class=\"line\">[<span class=\"keyword\">self</span> addGestureRecognizer:pan];</span><br></pre></td></tr></table></figure>\n<p>再将捕获到的pan事件location数据依次加入到path中，并且用直线连接两点。 </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)pan:(<span class=\"built_in\">UIPanGestureRecognizer</span> *)pan &#123;</span><br><span class=\"line\">    <span class=\"built_in\">CGPoint</span> currentPoint = [pan locationInView:<span class=\"keyword\">self</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pan.state == <span class=\"built_in\">UIGestureRecognizerStateBegan</span>) &#123;</span><br><span class=\"line\">        [path moveToPoint:currentPoint];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pan.state == <span class=\"built_in\">UIGestureRecognizerStateChanged</span>) &#123;</span><br><span class=\"line\">        [path addLineToPoint:currentPoint];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> setNeedsDisplay];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后画出轨迹。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)drawRect:(<span class=\"built_in\">CGRect</span>)rect &#123;</span><br><span class=\"line\">     [[<span class=\"built_in\">UIColor</span> blackColor] setStroke];</span><br><span class=\"line\">     [path stroke];</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>最后将这个view添加到控制器上，很开心的Command + R，让程序跑起来。</p>\n<p>开始画~<br>然后你就会发现，画出来的曲线是这样的。。<br><img src=\"56030-c2894a2979862cd1.png\" alt=\"\"></p>\n<p>WHAT THE FXXK!!<br>怎么可以有这么多锯齿。。<br>所以这个时候，贝塞尔曲线就很有用了。它的定义是可以找到两点之间的光滑曲线，因为我们之前手势移动的时候，两点之间都是使用直线连接，如果我们可以使用贝塞尔曲线连接，那应该就不会出现这个问题了。<br>试一下。<br>首先写一个计算中点的方法，我们到时会使用这个中点作为控制点。  </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"built_in\">CGPoint</span> midpoint(<span class=\"built_in\">CGPoint</span> p0, <span class=\"built_in\">CGPoint</span> p1) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> (<span class=\"built_in\">CGPoint</span>) &#123;</span><br><span class=\"line\">         (p0.x + p1.x) / <span class=\"number\">2.0</span>,</span><br><span class=\"line\">         (p0.y + p1.y) / <span class=\"number\">2.0</span></span><br><span class=\"line\">     &#125;;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>最后将手势处理中的连接方式替换成使用贝塞尔曲线。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)pan:(<span class=\"built_in\">UIPanGestureRecognizer</span> *)pan &#123;</span><br><span class=\"line\">     <span class=\"built_in\">CGPoint</span> currentPoint = [pan locationInView:<span class=\"keyword\">self</span>];</span><br><span class=\"line\">     <span class=\"built_in\">CGPoint</span> midPoint = midpoint(previousPoint, currentPoint);</span><br><span class=\"line\"> </span><br><span class=\"line\">     <span class=\"keyword\">if</span> (pan.state == <span class=\"built_in\">UIGestureRecognizerStateBegan</span>) &#123;</span><br><span class=\"line\">         [path moveToPoint:currentPoint];</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pan.state == <span class=\"built_in\">UIGestureRecognizerStateChanged</span>) &#123;</span><br><span class=\"line\">         [path addQuadCurveToPoint:midPoint controlPoint:previousPoint];</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     previousPoint = currentPoint;</span><br><span class=\"line\">     [<span class=\"keyword\">self</span> setNeedsDisplay];</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>再Run一次…<br><img src=\"56030-de6fcb447ec49b87.png\" alt=\"\"></p>\n<p>看，光滑多了~<br><strong>所以很多时候，当我们遇到画出的图形太不自然的时候，就可以试着用贝塞尔曲线解决这些问题，用到越高阶的曲线，画出的图形越光滑。</strong> </p>\n<h3 id=\"用法3：用贝塞尔曲线做变形\"><a href=\"#用法3：用贝塞尔曲线做变形\" class=\"headerlink\" title=\"用法3：用贝塞尔曲线做变形\"></a>用法3：用贝塞尔曲线做变形</h3><p>网上看到的大多数比较酷炫的动画，都是通过修改曲线的控制点，对曲线进行变形而做的。<br>比如，我们要实现如下一个动画。<br><img src=\"56030-8fb7008726c62987.gif\" alt=\"\"></p>\n<p>这个动画最难地方就是手势拖拽的时候，直线的变形，可以首先的想到的是使用贝塞尔。通过创建path，添加控制点画出曲线，然后通过更改控制点的位置来达到让曲线进行变形的目的。<br><img src=\"56030-9b189370ffbf5aec.gif\" alt=\"\"></p>\n<p>如上图所示，这里添加了7个点，从左到右依次为l3、l2、l1、c、 r1、 r2、 r3。屏幕最左和最右两边的l3和r3没有在图中显示出来，然后我们就可以以l3和l2为控制点，从l3到l1建立一条二阶贝塞尔曲线，再以c和r1为控制点建一条从l3到r1的曲线，最后以r1和r2为控制点建一条从r1到r3的曲线。   主要代码如下：  </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"built_in\">CGPathRef</span>)currentPath &#123;</span><br><span class=\"line\">     <span class=\"built_in\">CGFloat</span> width = <span class=\"keyword\">self</span>.view.bounds.size.width;</span><br><span class=\"line\">     <span class=\"built_in\">UIBezierPath</span> *path = [<span class=\"built_in\">UIBezierPath</span> bezierPath];</span><br><span class=\"line\">     </span><br><span class=\"line\">     [path moveToPoint:<span class=\"built_in\">CGPointMake</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>)];</span><br><span class=\"line\">     [path addLineToPoint:<span class=\"built_in\">CGPointMake</span>(<span class=\"number\">0</span>, <span class=\"keyword\">self</span>.l3ControlPointView.center.y)];</span><br><span class=\"line\">     [path addCurveToPoint:<span class=\"keyword\">self</span>.l1ControlPointView.center</span><br><span class=\"line\">             controlPoint1:<span class=\"keyword\">self</span>.l3ControlPointView.center</span><br><span class=\"line\">             controlPoint2:<span class=\"keyword\">self</span>.l2ControlPointView.center];</span><br><span class=\"line\">     [path addCurveToPoint:<span class=\"keyword\">self</span>.r1ControlPointView.center</span><br><span class=\"line\">             controlPoint1:<span class=\"keyword\">self</span>.cControlPointView.center</span><br><span class=\"line\">             controlPoint2:<span class=\"keyword\">self</span>.r1ControlPointView.center];</span><br><span class=\"line\">     [path addCurveToPoint:<span class=\"keyword\">self</span>.r3ControlPointView.center</span><br><span class=\"line\">             controlPoint1:<span class=\"keyword\">self</span>.r1ControlPointView.center</span><br><span class=\"line\">             controlPoint2:<span class=\"keyword\">self</span>.r2ControlPointView.center];</span><br><span class=\"line\">     [path addLineToPoint:<span class=\"built_in\">CGPointMake</span>(width, <span class=\"number\">0</span>)];</span><br><span class=\"line\">     [path closePath];</span><br><span class=\"line\">     <span class=\"keyword\">return</span> path.CGPath;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>建立好路径之后，就可以通过手势操作来修改控制点的坐标达到我们的目的了。<br>在这里也就是修改l3到r3的中心点坐标。主要代码如下：  </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)panDidMove:(<span class=\"built_in\">UIPanGestureRecognizer</span> *)gesture &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (gesture.state == <span class=\"built_in\">UIGestureRecognizerStateEnded</span> ||</span><br><span class=\"line\">         gesture.state == <span class=\"built_in\">UIGestureRecognizerStateFailed</span> ||</span><br><span class=\"line\">         gesture.state == <span class=\"built_in\">UIGestureRecognizerStateCancelled</span>) &#123;</span><br><span class=\"line\">         </span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">         <span class=\"built_in\">CGFloat</span> additionalHeight = MAX([gesture translationInView:<span class=\"keyword\">self</span>.view].y, <span class=\"number\">0</span>);</span><br><span class=\"line\">         <span class=\"built_in\">CGFloat</span> waveHeight = MIN(additionalHeight*<span class=\"number\">0.6</span>, kMaxWaveHeight);</span><br><span class=\"line\">         <span class=\"built_in\">CGFloat</span> baseHeight = kMiniHeight + additionalHeight - waveHeight;</span><br><span class=\"line\">         <span class=\"built_in\">CGFloat</span> locationX = [gesture locationInView:gesture.view].x;</span><br><span class=\"line\">         </span><br><span class=\"line\">         [<span class=\"keyword\">self</span> layoutControlPoints:baseHeight waveHeight:waveHeight locationX:locationX];</span><br><span class=\"line\">         [<span class=\"keyword\">self</span> updateShapeLayer];</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> - (<span class=\"keyword\">void</span>)layoutControlPoints:(<span class=\"built_in\">CGFloat</span>)baseHeight</span><br><span class=\"line\">                  waveHeight:(<span class=\"built_in\">CGFloat</span>)waveHeight</span><br><span class=\"line\">                   locationX:(<span class=\"built_in\">CGFloat</span>)locationX &#123;</span><br><span class=\"line\">     <span class=\"built_in\">CGFloat</span> width = <span class=\"keyword\">self</span>.view.bounds.size.width;</span><br><span class=\"line\">     <span class=\"built_in\">CGFloat</span> minLeftX = MIN(locationX-width/<span class=\"number\">2</span>*<span class=\"number\">0.28</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">     <span class=\"built_in\">CGFloat</span> maxRightX = MAX(width+(locationX-width)/<span class=\"number\">2</span> *<span class=\"number\">0.28</span>, width);</span><br><span class=\"line\">     <span class=\"built_in\">CGFloat</span> leftPartWidth = locationX - minLeftX;</span><br><span class=\"line\">     <span class=\"built_in\">CGFloat</span> rightPartWidth = maxRightX - locationX;</span><br><span class=\"line\">     </span><br><span class=\"line\">     <span class=\"keyword\">self</span>.l3ControlPointView.center = <span class=\"built_in\">CGPointMake</span>(minLeftX, baseHeight);</span><br><span class=\"line\">     <span class=\"keyword\">self</span>.l2ControlPointView.center = <span class=\"built_in\">CGPointMake</span>(minLeftX+leftPartWidth*<span class=\"number\">0.44</span>, baseHeight);</span><br><span class=\"line\">     <span class=\"keyword\">self</span>.l1ControlPointView.center = <span class=\"built_in\">CGPointMake</span>(minLeftX+leftPartWidth*<span class=\"number\">0.71</span>, baseHeight+waveHeight*<span class=\"number\">0.64</span>);</span><br><span class=\"line\">     <span class=\"keyword\">self</span>.cControlPointView.center = <span class=\"built_in\">CGPointMake</span>(locationX, baseHeight+waveHeight*<span class=\"number\">1.36</span>);</span><br><span class=\"line\">     <span class=\"keyword\">self</span>.r1ControlPointView.center = <span class=\"built_in\">CGPointMake</span>(maxRightX-rightPartWidth*<span class=\"number\">0.71</span>, baseHeight+waveHeight*<span class=\"number\">0.64</span>);</span><br><span class=\"line\">     <span class=\"keyword\">self</span>.r2ControlPointView.center = <span class=\"built_in\">CGPointMake</span>(maxRightX-(rightPartWidth*<span class=\"number\">0.44</span>), baseHeight);</span><br><span class=\"line\">     <span class=\"keyword\">self</span>.r3ControlPointView.center = <span class=\"built_in\">CGPointMake</span>(maxRightX, baseHeight);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> - (<span class=\"keyword\">void</span>)updateShapeLayer &#123;</span><br><span class=\"line\">     <span class=\"keyword\">self</span>.shapeLayer.path = [<span class=\"keyword\">self</span> currentPath];</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>通过这个思路，我们可以做出很多有意思而且有生命力的动画，这里一般还会经常和 <code>CADisplayLink</code> 一起用，先留个坑。 </p>\n<h3 id=\"用法4：用贝塞尔曲线做缓冲动画\"><a href=\"#用法4：用贝塞尔曲线做缓冲动画\" class=\"headerlink\" title=\"用法4：用贝塞尔曲线做缓冲动画\"></a>用法4：用贝塞尔曲线做缓冲动画</h3><p>做动画最主要的一点，就是要让动画达到很自然的效果。这就要涉及到一些现实中的物理知识，比如重力弹力和速度等等，所以有时候，我们需要对动画的速度进行控制，有时候需要先快再慢，有时候需要先慢再快然后再慢，有时候又需要快慢超慢非常慢…<br>这个时候就不得不提到 <code>CAMediaTimingFunction</code> 。<br><code>CAMediaTimingFunction</code> 的主要用法可以理解为我们在一个二维坐标系上建议一条或曲线或直线的函数，这个函数的斜率就是动画的速度，斜率的改变量也就是导数则为加速度。理论上来说，这个坐标系上的任何曲线都可以用来当做加速动画。然而<code>CAMediaTimingFunction</code> 只给我们提供了一个三次贝塞尔曲线的函数，它可以生成三次贝塞尔曲线所能生成的所有缓冲函数。<br>这里刚好可以介绍 <del>一个</del> 两个好用的网站：  <a href=\"http://www.roblaplaca.com/examples/bezierBuilder\" target=\"_blank\" rel=\"noopener\">http://www.roblaplaca.com/examples/bezierBuilder</a><br>这个网站可以做到可视化的修改两个控制点，来达到生成一条三阶贝塞尔曲线，并且还会给出两个控制点的具体坐标，以及右边还可以看到这条曲线产生的动画会做怎样的速度改变。也就是说，只要我们能拿到两个控制点的坐标，就可以用来控制动画了。<br><a href=\"http://easings.net/#\" target=\"_blank\" rel=\"noopener\">http://easings.net</a><br>这个网站提供了丰富的曲线类型可供选择，图表旁还有一个小动画预览，非常直观。<br>比如下面这段代码，就可以让我们把相册从4：3 切换到1：1 的时候，展示一个先快后慢的过渡效果，这个效果跟系统相机的还是蛮接近的。  </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">CABasicAnimation</span> *animation = [<span class=\"built_in\">CABasicAnimation</span> animation];</span><br><span class=\"line\">animation.keyPath = <span class=\"string\">@\"borderWidth\"</span>;</span><br><span class=\"line\">animation.repeatCount = <span class=\"number\">1</span>;</span><br><span class=\"line\">animation.duration = <span class=\"number\">0.4</span>;</span><br><span class=\"line\">animation.removedOnCompletion = <span class=\"literal\">NO</span>;</span><br><span class=\"line\">animation.timingFunction = [<span class=\"built_in\">CAMediaTimingFunction</span> functionWithControlPoints:<span class=\"number\">0</span> :<span class=\"number\">1</span> :<span class=\"number\">1</span> :<span class=\"number\">1</span>];</span><br><span class=\"line\">animation.fillMode = kCAFillModeForwards;</span><br><span class=\"line\">animation.fromValue = <span class=\"number\">0.</span>f;</span><br><span class=\"line\">animation.toValue = <span class=\"number\">40.</span>f;</span><br><span class=\"line\">[<span class=\"keyword\">self</span>.previewMask addAnimation:animation forKey:<span class=\"string\">@\"changeBorderWith\"</span>];</span><br></pre></td></tr></table></figure>\n<p>效果如下：<br><img src=\"56030-61f16deba712d8ac.gif\" alt=\"\"></p>\n<h3 id=\"用法5：用贝塞尔曲线做拟合计算\"><a href=\"#用法5：用贝塞尔曲线做拟合计算\" class=\"headerlink\" title=\"用法5：用贝塞尔曲线做拟合计算\"></a>用法5：用贝塞尔曲线做拟合计算</h3><p>贝塞尔曲线有个非常常用的动画效果，叫MetaBall算法。什么是MetaBall？就是我们平时看到的QQ的小红点消除啦~ 像下面这样。  </p>\n<p><img src=\"56030-88174468ef9870e3.png\" alt=\"\"></p>\n<p>这个是怎么实现的？</p>\n<h4 id=\"矩形拟合\"><a href=\"#矩形拟合\" class=\"headerlink\" title=\"矩形拟合\"></a>矩形拟合</h4><p>首先我们需要了解一下简单的矩形拟合原理  </p>\n<p><img src=\"56030-c2aa8094cd0a6004.png\" alt=\"\"></p>\n<p>如图所示的两个圆，我们通过给它添加一个矩形（绿色部分），矩形较短的两边分别顶住两个圆各自的一条直径上，然后通过改变矩形较长的两边的弧度（红色部分），达到拟合的效果。  </p>\n<p><img src=\"56030-9e2c8e268d676528.png\" alt=\"\"></p>\n<p>这种做法当两个圆较小的时候，几乎是没有问题的。但是当圆稍微大点的时候，就会出现很明显的相交区域，拟合效果非常不好。  </p>\n<p><img src=\"56030-4ad6b01ea2c03caa.png\" alt=\"\"></p>\n<p>所以这种简单的矩形拟合在圆较大的时候是很不严格的。这个时候就需要更严谨的切线拟合。  </p>\n<h4 id=\"切线拟合\"><a href=\"#切线拟合\" class=\"headerlink\" title=\"切线拟合\"></a>切线拟合</h4><p>我们知道，之前的矩形拟合之所以才圆大的时候会出现拟合不严谨的情况。为什么？</p>\n<p><img src=\"56030-86bc9a9afdb15e48.png\" alt=\"\"></p>\n<p>正如上图所示，两条曲线的画法都是由A1和B1为起点和终点，C点为控制点和A1、B2为起点和终点，C为控制点画出的二阶贝塞尔曲线。<br>而要做到完美的拟合，必须达到的一点要求就是，贝塞尔曲线与圆的连接点，也就是A1、B1、A2、B2，他们与控制点C的连线，一定要是圆的切线。这样就不管圆大小怎么变，都不会出现明显的相交区域了。</p>\n<p><img src=\"56030-8c56a1e98f432000.jpg\" alt=\"\">  </p>\n<blockquote>\n<p>图片引用: <a href=\"http://www.jianshu.com/p/55c721887568\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/55c721887568</a></p>\n</blockquote>\n<p>于是，现在解决问题的关键就转变成了：如何计算这些拟合的关键点？</p>\n<p><img src=\"56030-6700ecb2811dcac4.jpg\" alt=\"\">  </p>\n<blockquote>\n<p>图片引用: <a href=\"http://pandara.xyz/2015/10/27/ios_slime\" target=\"_blank\" rel=\"noopener\">http://pandara.xyz/2015/10/27/ios_slime</a></p>\n</blockquote>\n<p>我们现在要做的，就是求出点ABCDMN这六个点的坐标，就可以实现完美拟合了。<br>结合上面两张图，通过三角函数的各种计算，我们最终可以得到如下代码：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)reloadBezierPath &#123;</span><br><span class=\"line\">     <span class=\"built_in\">CGFloat</span> r1 = <span class=\"keyword\">self</span>.trailDot.frame.size.width / <span class=\"number\">2.0</span>f;</span><br><span class=\"line\">     <span class=\"built_in\">CGFloat</span> r2 = <span class=\"keyword\">self</span>.headDot.frame.size.width / <span class=\"number\">2.0</span>f;</span><br><span class=\"line\">     </span><br><span class=\"line\">     <span class=\"built_in\">CGFloat</span> x1 = <span class=\"keyword\">self</span>.trailDot.center.x;</span><br><span class=\"line\">     <span class=\"built_in\">CGFloat</span> y1 = <span class=\"keyword\">self</span>.trailDot.center.y;</span><br><span class=\"line\">     <span class=\"built_in\">CGFloat</span> x2 = <span class=\"keyword\">self</span>.headDot.center.x;</span><br><span class=\"line\">     <span class=\"built_in\">CGFloat</span> y2 = <span class=\"keyword\">self</span>.headDot.center.y;</span><br><span class=\"line\">     </span><br><span class=\"line\">     <span class=\"built_in\">CGFloat</span> distance = sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));</span><br><span class=\"line\">     </span><br><span class=\"line\">     <span class=\"built_in\">CGFloat</span> sinDegree = (x2 - x1) / distance;</span><br><span class=\"line\">     <span class=\"built_in\">CGFloat</span> cosDegree = (y2 - y1) / distance;</span><br><span class=\"line\">     </span><br><span class=\"line\">     <span class=\"built_in\">CGPoint</span> pointA = <span class=\"built_in\">CGPointMake</span>(x1 - r1 * cosDegree, y1 + r1 * sinDegree);</span><br><span class=\"line\">     <span class=\"built_in\">CGPoint</span> pointB = <span class=\"built_in\">CGPointMake</span>(x1 + r1 * cosDegree, y1 - r1 * sinDegree);</span><br><span class=\"line\">     <span class=\"built_in\">CGPoint</span> pointC = <span class=\"built_in\">CGPointMake</span>(x2 + r2 * cosDegree, y2 - r2 * sinDegree);</span><br><span class=\"line\">     <span class=\"built_in\">CGPoint</span> pointD = <span class=\"built_in\">CGPointMake</span>(x2 - r2 * cosDegree, y2 + r2 * sinDegree);</span><br><span class=\"line\">     <span class=\"built_in\">CGPoint</span> pointN = <span class=\"built_in\">CGPointMake</span>(pointB.x + (distance / <span class=\"number\">2</span>) * sinDegree, pointB.y + (distance / <span class=\"number\">2</span>) * cosDegree);</span><br><span class=\"line\">     <span class=\"built_in\">CGPoint</span> pointM = <span class=\"built_in\">CGPointMake</span>(pointA.x + (distance / <span class=\"number\">2</span>) * sinDegree, pointA.y + (distance / <span class=\"number\">2</span>) * cosDegree);</span><br><span class=\"line\">     </span><br><span class=\"line\">     <span class=\"built_in\">UIBezierPath</span> *path = [<span class=\"built_in\">UIBezierPath</span> bezierPath];</span><br><span class=\"line\">     [path moveToPoint:pointA];</span><br><span class=\"line\">     [path addLineToPoint:pointB];</span><br><span class=\"line\">     [path addQuadCurveToPoint:pointC controlPoint:pointN];</span><br><span class=\"line\">     [path addLineToPoint:pointD];</span><br><span class=\"line\">     [path addQuadCurveToPoint:pointA controlPoint:pointM];</span><br><span class=\"line\">     </span><br><span class=\"line\">     <span class=\"keyword\">self</span>.shapeLayer.path = path.CGPath;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>现在我们已经可以做到非常完美拟合的时候了，这时候再结合前面的通过修改控制点来实现图形曲线变换，我们就可以做到类似QQ小红点消除一样的效果了，具体做法不再赘述。</p>\n<h2 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"Ending\"></a>Ending</h2><p>至此，我们已基本了解了贝塞尔曲线的历史出处公式性质及各种用法。在不断学习的过程中，我发现一些比较牛逼的实现方法，都涉及到了较多较复杂的数学公式，奈何大学高数没有好好学，导致需要回头去看很多东西，这也是这篇博客耗费了较多时间的原因之一。不过在掌握了这些基础和基本用法之后，就可以再去研究一下比较高级和酷炫的用法了，也留下了很多坑，会在以后慢慢填补的…<br>如果以后还想补的话….<br>文中如果有什么不足之处欢迎指正，这也是Share的目的之一。<br>Have fun ~  </p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://zh.wikipedia.org/wiki/%E8%B2%9D%E8%8C%B2%E6%9B%B2%E7%B7%9A\" target=\"_blank\" rel=\"noopener\">贝塞尔曲线维基百科</a><br><a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIBezierPath_class/\" target=\"_blank\" rel=\"noopener\">UIBezierPath Class Reference</a><br><a href=\"http://www.html-js.com/article/1628\" target=\"_blank\" rel=\"noopener\">贝塞尔曲线扫盲</a><br><a href=\"https://zsisme.gitbooks.io/ios-/content/chapter10/custom-easing-functions.html\" target=\"_blank\" rel=\"noopener\">自定义缓冲函数</a><br><a href=\"http://www.jianshu.com/p/5dbdd1ee47aa\" target=\"_blank\" rel=\"noopener\">iOS-UI进阶13 - 贝塞尔曲线和帧动画结合</a><br><a href=\"http://www.jianshu.com/p/55c721887568\" target=\"_blank\" rel=\"noopener\">贝塞尔曲线开发的艺术</a></p>\n"},{"title":"【译】写给自己的软件工程笔记","date":"2019-03-29T08:53:45.000Z","_content":"\n> 这是 Keras 的开发者 François Chollet 整理的笔记，里面有很多思考值得学习。\n> [原文链接](https://medium.com/s/story/notes-to-myself-on-software-engineering-c890f16f4e4d)\n\n# 在开发过程中\n\n1. 代码不仅仅意味着要被执行的。代码也是团队之间的沟通方式，是向他人描述问题解决方案的一种方式。（写出）具有较高可读性的代码不是一件值得骄傲的事情，它是编写代码最基础的部分了。这其中包括清楚地分解代码，选择不言自明的变量名，并插入合适的注释来描述隐含的任何内容。\n\n2. 当你提交每个PR的时候，要思考的不是这个PR能给你的下次升职带来什么，而应该是这个PR可以为你的用户和社区做些什么。要不惜一切代价地避免“狠显眼的贡献”。如果不是很明显的能帮助产品的目的，就请不要添加任何功能。  \n  \n3. 代码也是有品位的。品味是由对简单的渴望而产生符合约束-满足规范的过程，要时刻保持着对简单的执念。\n\n4. 敢于拒绝 - 只是因为有人要求提供功能并不意味着你应该这么做。每项功能的成本都超出了最初的实施范围：因为有维护成本、文档成本和用户的认知成本。如果你总是问：我们真的应该这样做吗？通常答案都会是否定的。\n\n5. 当你对用户提出的新的功能需求说“是”时，请记住，用户要的东西通常都不是最佳的选择。用户值专注于他们自己的特定的需求，你必须以项目的整体性和自有的原则来应对这一点。通常正确的答案会是扩展现有的功能。\n\n6. 在持续集成和以全面覆盖单元测试为目标这两件事上多投入。这样可以确保你能处在一个自信的编码环境中；如果不是这样，那么首要任务就应该是关注建立正确的基础设施。\n\n7. 没有提前计划好一些没有关系。不断地尝试然后看看结果如何。提早纠错，确保你创建了一个没有不可能的环境。\n\n8. 好的软件会让事情变得简单。仅仅因为一开始问题看起来很困难并不意味着解决方案必须复杂或难以使用。很多时候，在一个会有更容易的方案但可能不是那么明显的情况下，工程师往往会条件反射式地选择引入复杂度很高的解决方案（让我们使用ML！让我们构建一个应用程序！让我们添加区块链！）。在你写下任何代码前，确保你的解决方案不能再简单了。任何事情遵循第一性原理。\n\n9. 避免很隐晦的规则。当你发现自己开发了一种较为隐晦的规则时，应保持规则明确并与他人共享或自动化。每当你发现自己想出一个反复的，准算法的工作流程时，应该设法将其形式化为一个文档化的流程，以便其他团队成员从该体验中受益。此外，你应该设法在自动化这种任何可被自动化的工作流程部份（例如，正确性检查）。\n\n10. 在设计过程中应考虑你所做选择的全局影响，而不仅仅是自己想要关注的部分 - 例如收入或增长。除了你当前正在监控的指标之外，你的软件对全球用户的总体影响是什么？是否存在超出价值主张的不良副作用？在保留软件实用性的同时，你可以做些什么来解决它们？\n\n> 道德设计，将你的价值观融入在你的创作中。\n\n# API设计\n\n1. 你的API是有用户的，所以它应该也要有用户体验。在你做出的每一个决定中，都要牢记你的用户。对用户充满同理心，无论他们是初学者还是经验老道的老司机。\n\n2. 始终寻求在使用API​​的过程中尽量减少对用户的认知负担。自动化可自动化的内容，最大限度地减少用户所需的操作和选择，不要暴露不重要的选项，设计简单一致的工作流程，以反映简单一致的心理模型。\n\n3. 简单的事情应该是简单的，复杂的事情应该是可能的（Simple things should be simple, complex things should be possible. ----Alan Kay）。不要为了小众用例增加常见用例的认知负荷，即使影响很小。\n\n4. 如果工作流的认知负荷足够低，那么用户应该可以在完成一次或两次之后就可以记住它（无需查阅教程或文档）。\n\n5. 寻求拥有与领域专家和从业者的心理模型相匹配的API。拥有领域经验但对你的API没有经验的人应该能够看最少的文档就能直观地明白你的API，很多时候只需要通过查看几个代码示例并查看哪些对象可用以及它们的签名是什么。\n\n6. 在没有任何关于底层实现的上下文情况下，参数的含义应该是可理解的。必须由用户指定的参数应该与用户对问题的心理模型有关，而不是跟代码的实现细节有关。API代表的是它解决了什么问题，而不是它背后是如何运行的。\n\n7. 最强大的心理模型是模块化和分层的：高度简单，但是当你需要了解细节时，又很精细。同样，一个好的API是模块化和分层的：易于使用，但又具有表现力。对象少，但签名复杂，与对象多但签名简单之间存在着一个平衡。一个好的API应该有合理数量的对象，且具有相当简单的签名。\n\n8. 你的API不可避免地反映了你选择的实现，特别是你选择的数据结构。要实现直观的API，你必须一开始就选择自然适合的数据结构 - 与该领域专家的心智模型相匹配。\n\n9. 故意设计端到端工作流程，而不是一组原子功能。大多数开发人员会询问：”应该提供哪些功能来处理API设计？让我们为他们配置选项吧。“相反地，应该问：该工具的用例是什么？对于每个用例，用户操作的最佳顺序是什么？什么是可以支持这个工作流程最简单的API？ API中的原子选项应该能够满足高级工作流程中出现的明确需求 - 不应该“因为有人可能需要它”就添加它们。\n\n10. 错误消息以及通常在与API交互过程中向用户提供的任何反馈都是API的一部分。交互性和反馈是用户体验不可或缺的一部分。要为你的API设计错误消息。\n\n11. 因为代码是一种交流，所以命名很重要 - 无论是项目还是变量的命名。名称反映了你对问题的看法。避免使用过于通用的名称（x，变量，参数），避免 `OverlyLongAndSpecificNamingPatterns`，避免可能产生不必要的术语（主，从），并确保在命名选择中保持一致。命名一致性意味着内部命名一致性（不要一些地方用”dim“代表坐标轴，在另一些地方用”axis“）以及与问题域的既定约定的一致性。在命名之前，应尽量使用该领域专家（或其他API）已在使用的命名。\n\n12. 文档是API用户体验的核心，它不是附属品。在高质量的文档上多花时间，你会得到比在更多功能上多花时间更高的回报。\n\n13. 展示，而不是解释：你的文档不应该讨论软件的工作原理，它应该说明如何使用它。展示端到端工作流的代码示例、显示API的每个常见用例和关键功能的代码示例。\n\n> 生产力归结为快速决策和执行力。\n\n# 软件生涯\n\n1. 职业发展并不是你管理人数的多少，而是你所产生的影响，这个世界有你没你会有多大的差别?\n\n2. 软件开发是一项团队合作；它与人际关系和技术能力有关。做个好伙伴，当你不断前行时，不要忘了与人保持联系。\n\n3. **技术永远不会是中立的**。如果你的工作对世界有任何影响，那么这种影响就有道德方向。我们在软件产品中看似无害的技术选择都会被充满使用动机，谁将受益，谁将受到影响。技术选择也是道德选择。因此，始终谨慎而明确地表达你想要支持的价值观。道德设计，将您的价值观融入您的创作中。永远不要想，我只是在建立这种能力，这本身是中立的。你构建它的方式无法决定它被使用的方式。\n\n4. 自我引导，你的工作和环境的力量，是生活满意度的关键。确保你给予周围的人充分的自我引导，并确保你的职业选择能够为你自己带来更多的力量。\n\n5. 去创造这个世界需要的东西，而不仅仅是你希望拥有的东西。技术人员常常会边过着稀薄的生活，边专注于满足自身特定需求的产品。寻找机会拓宽你的生活体验，让自己能更好地发现这个世界需要什么。\n\n6. 在做出会有长期影响的任何选择时，请将你的价值观置于短期的自身利益和过度的情绪之上 - 例如贪婪或恐惧。认清你的价值观，并让它们引导你。\n\n7. 当我们发现自己陷入冲突时，先暂停下来并承认我们的共同价值观和共同目标是个不错的主意，提醒彼此，我们是在同一条船上的。\n\n8. 生产力归结为高速决策和执行力。这需要a）良好的直觉，这来自以往的经验，它可以帮你在只给出部分信息的情况下就做出普遍正确的决定; b）敏锐地意识到何时应该更谨慎的行动并等待更多信息，因为错误决策会比延期付出更高的代价。最快的速度/最好的质量之间的决策往往会在不同环境而有不同的权衡。\n\n9. 更快地做出决策意味着你在职业生涯中要做出更多决策，这将使你对正确的选项有更强的直觉。经验是提高生产力的关键，更高的生产力将为你提供更多的经验：良性循环。\n\n10. 在你意识到缺乏直觉的情况下，请遵守抽象原则。在整个职业生涯中建立尝试过且正确的原则列表。原则是形式化的直觉，相比于原始直觉（需要对类似情况的有直接且丰富的经验），它能适用于更广泛的场景。\n\n\n\n","source":"_posts/note-to-myself-on-software-engineering.md","raw":"---\ntitle: 【译】写给自己的软件工程笔记\ndate: 2019-03-29 16:53:45\ntags:\n- 心得\n- 软件工程\n---\n\n> 这是 Keras 的开发者 François Chollet 整理的笔记，里面有很多思考值得学习。\n> [原文链接](https://medium.com/s/story/notes-to-myself-on-software-engineering-c890f16f4e4d)\n\n# 在开发过程中\n\n1. 代码不仅仅意味着要被执行的。代码也是团队之间的沟通方式，是向他人描述问题解决方案的一种方式。（写出）具有较高可读性的代码不是一件值得骄傲的事情，它是编写代码最基础的部分了。这其中包括清楚地分解代码，选择不言自明的变量名，并插入合适的注释来描述隐含的任何内容。\n\n2. 当你提交每个PR的时候，要思考的不是这个PR能给你的下次升职带来什么，而应该是这个PR可以为你的用户和社区做些什么。要不惜一切代价地避免“狠显眼的贡献”。如果不是很明显的能帮助产品的目的，就请不要添加任何功能。  \n  \n3. 代码也是有品位的。品味是由对简单的渴望而产生符合约束-满足规范的过程，要时刻保持着对简单的执念。\n\n4. 敢于拒绝 - 只是因为有人要求提供功能并不意味着你应该这么做。每项功能的成本都超出了最初的实施范围：因为有维护成本、文档成本和用户的认知成本。如果你总是问：我们真的应该这样做吗？通常答案都会是否定的。\n\n5. 当你对用户提出的新的功能需求说“是”时，请记住，用户要的东西通常都不是最佳的选择。用户值专注于他们自己的特定的需求，你必须以项目的整体性和自有的原则来应对这一点。通常正确的答案会是扩展现有的功能。\n\n6. 在持续集成和以全面覆盖单元测试为目标这两件事上多投入。这样可以确保你能处在一个自信的编码环境中；如果不是这样，那么首要任务就应该是关注建立正确的基础设施。\n\n7. 没有提前计划好一些没有关系。不断地尝试然后看看结果如何。提早纠错，确保你创建了一个没有不可能的环境。\n\n8. 好的软件会让事情变得简单。仅仅因为一开始问题看起来很困难并不意味着解决方案必须复杂或难以使用。很多时候，在一个会有更容易的方案但可能不是那么明显的情况下，工程师往往会条件反射式地选择引入复杂度很高的解决方案（让我们使用ML！让我们构建一个应用程序！让我们添加区块链！）。在你写下任何代码前，确保你的解决方案不能再简单了。任何事情遵循第一性原理。\n\n9. 避免很隐晦的规则。当你发现自己开发了一种较为隐晦的规则时，应保持规则明确并与他人共享或自动化。每当你发现自己想出一个反复的，准算法的工作流程时，应该设法将其形式化为一个文档化的流程，以便其他团队成员从该体验中受益。此外，你应该设法在自动化这种任何可被自动化的工作流程部份（例如，正确性检查）。\n\n10. 在设计过程中应考虑你所做选择的全局影响，而不仅仅是自己想要关注的部分 - 例如收入或增长。除了你当前正在监控的指标之外，你的软件对全球用户的总体影响是什么？是否存在超出价值主张的不良副作用？在保留软件实用性的同时，你可以做些什么来解决它们？\n\n> 道德设计，将你的价值观融入在你的创作中。\n\n# API设计\n\n1. 你的API是有用户的，所以它应该也要有用户体验。在你做出的每一个决定中，都要牢记你的用户。对用户充满同理心，无论他们是初学者还是经验老道的老司机。\n\n2. 始终寻求在使用API​​的过程中尽量减少对用户的认知负担。自动化可自动化的内容，最大限度地减少用户所需的操作和选择，不要暴露不重要的选项，设计简单一致的工作流程，以反映简单一致的心理模型。\n\n3. 简单的事情应该是简单的，复杂的事情应该是可能的（Simple things should be simple, complex things should be possible. ----Alan Kay）。不要为了小众用例增加常见用例的认知负荷，即使影响很小。\n\n4. 如果工作流的认知负荷足够低，那么用户应该可以在完成一次或两次之后就可以记住它（无需查阅教程或文档）。\n\n5. 寻求拥有与领域专家和从业者的心理模型相匹配的API。拥有领域经验但对你的API没有经验的人应该能够看最少的文档就能直观地明白你的API，很多时候只需要通过查看几个代码示例并查看哪些对象可用以及它们的签名是什么。\n\n6. 在没有任何关于底层实现的上下文情况下，参数的含义应该是可理解的。必须由用户指定的参数应该与用户对问题的心理模型有关，而不是跟代码的实现细节有关。API代表的是它解决了什么问题，而不是它背后是如何运行的。\n\n7. 最强大的心理模型是模块化和分层的：高度简单，但是当你需要了解细节时，又很精细。同样，一个好的API是模块化和分层的：易于使用，但又具有表现力。对象少，但签名复杂，与对象多但签名简单之间存在着一个平衡。一个好的API应该有合理数量的对象，且具有相当简单的签名。\n\n8. 你的API不可避免地反映了你选择的实现，特别是你选择的数据结构。要实现直观的API，你必须一开始就选择自然适合的数据结构 - 与该领域专家的心智模型相匹配。\n\n9. 故意设计端到端工作流程，而不是一组原子功能。大多数开发人员会询问：”应该提供哪些功能来处理API设计？让我们为他们配置选项吧。“相反地，应该问：该工具的用例是什么？对于每个用例，用户操作的最佳顺序是什么？什么是可以支持这个工作流程最简单的API？ API中的原子选项应该能够满足高级工作流程中出现的明确需求 - 不应该“因为有人可能需要它”就添加它们。\n\n10. 错误消息以及通常在与API交互过程中向用户提供的任何反馈都是API的一部分。交互性和反馈是用户体验不可或缺的一部分。要为你的API设计错误消息。\n\n11. 因为代码是一种交流，所以命名很重要 - 无论是项目还是变量的命名。名称反映了你对问题的看法。避免使用过于通用的名称（x，变量，参数），避免 `OverlyLongAndSpecificNamingPatterns`，避免可能产生不必要的术语（主，从），并确保在命名选择中保持一致。命名一致性意味着内部命名一致性（不要一些地方用”dim“代表坐标轴，在另一些地方用”axis“）以及与问题域的既定约定的一致性。在命名之前，应尽量使用该领域专家（或其他API）已在使用的命名。\n\n12. 文档是API用户体验的核心，它不是附属品。在高质量的文档上多花时间，你会得到比在更多功能上多花时间更高的回报。\n\n13. 展示，而不是解释：你的文档不应该讨论软件的工作原理，它应该说明如何使用它。展示端到端工作流的代码示例、显示API的每个常见用例和关键功能的代码示例。\n\n> 生产力归结为快速决策和执行力。\n\n# 软件生涯\n\n1. 职业发展并不是你管理人数的多少，而是你所产生的影响，这个世界有你没你会有多大的差别?\n\n2. 软件开发是一项团队合作；它与人际关系和技术能力有关。做个好伙伴，当你不断前行时，不要忘了与人保持联系。\n\n3. **技术永远不会是中立的**。如果你的工作对世界有任何影响，那么这种影响就有道德方向。我们在软件产品中看似无害的技术选择都会被充满使用动机，谁将受益，谁将受到影响。技术选择也是道德选择。因此，始终谨慎而明确地表达你想要支持的价值观。道德设计，将您的价值观融入您的创作中。永远不要想，我只是在建立这种能力，这本身是中立的。你构建它的方式无法决定它被使用的方式。\n\n4. 自我引导，你的工作和环境的力量，是生活满意度的关键。确保你给予周围的人充分的自我引导，并确保你的职业选择能够为你自己带来更多的力量。\n\n5. 去创造这个世界需要的东西，而不仅仅是你希望拥有的东西。技术人员常常会边过着稀薄的生活，边专注于满足自身特定需求的产品。寻找机会拓宽你的生活体验，让自己能更好地发现这个世界需要什么。\n\n6. 在做出会有长期影响的任何选择时，请将你的价值观置于短期的自身利益和过度的情绪之上 - 例如贪婪或恐惧。认清你的价值观，并让它们引导你。\n\n7. 当我们发现自己陷入冲突时，先暂停下来并承认我们的共同价值观和共同目标是个不错的主意，提醒彼此，我们是在同一条船上的。\n\n8. 生产力归结为高速决策和执行力。这需要a）良好的直觉，这来自以往的经验，它可以帮你在只给出部分信息的情况下就做出普遍正确的决定; b）敏锐地意识到何时应该更谨慎的行动并等待更多信息，因为错误决策会比延期付出更高的代价。最快的速度/最好的质量之间的决策往往会在不同环境而有不同的权衡。\n\n9. 更快地做出决策意味着你在职业生涯中要做出更多决策，这将使你对正确的选项有更强的直觉。经验是提高生产力的关键，更高的生产力将为你提供更多的经验：良性循环。\n\n10. 在你意识到缺乏直觉的情况下，请遵守抽象原则。在整个职业生涯中建立尝试过且正确的原则列表。原则是形式化的直觉，相比于原始直觉（需要对类似情况的有直接且丰富的经验），它能适用于更广泛的场景。\n\n\n\n","slug":"note-to-myself-on-software-engineering","published":1,"updated":"2022-10-25T02:57:42.645Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9nmc489000b8wwxx884b3jz","content":"<blockquote>\n<p>这是 Keras 的开发者 François Chollet 整理的笔记，里面有很多思考值得学习。<br><a href=\"https://medium.com/s/story/notes-to-myself-on-software-engineering-c890f16f4e4d\" target=\"_blank\" rel=\"noopener\">原文链接</a></p>\n</blockquote>\n<h1 id=\"在开发过程中\"><a href=\"#在开发过程中\" class=\"headerlink\" title=\"在开发过程中\"></a>在开发过程中</h1><ol>\n<li><p>代码不仅仅意味着要被执行的。代码也是团队之间的沟通方式，是向他人描述问题解决方案的一种方式。（写出）具有较高可读性的代码不是一件值得骄傲的事情，它是编写代码最基础的部分了。这其中包括清楚地分解代码，选择不言自明的变量名，并插入合适的注释来描述隐含的任何内容。</p>\n</li>\n<li><p>当你提交每个PR的时候，要思考的不是这个PR能给你的下次升职带来什么，而应该是这个PR可以为你的用户和社区做些什么。要不惜一切代价地避免“狠显眼的贡献”。如果不是很明显的能帮助产品的目的，就请不要添加任何功能。  </p>\n</li>\n<li><p>代码也是有品位的。品味是由对简单的渴望而产生符合约束-满足规范的过程，要时刻保持着对简单的执念。</p>\n</li>\n<li><p>敢于拒绝 - 只是因为有人要求提供功能并不意味着你应该这么做。每项功能的成本都超出了最初的实施范围：因为有维护成本、文档成本和用户的认知成本。如果你总是问：我们真的应该这样做吗？通常答案都会是否定的。</p>\n</li>\n<li><p>当你对用户提出的新的功能需求说“是”时，请记住，用户要的东西通常都不是最佳的选择。用户值专注于他们自己的特定的需求，你必须以项目的整体性和自有的原则来应对这一点。通常正确的答案会是扩展现有的功能。</p>\n</li>\n<li><p>在持续集成和以全面覆盖单元测试为目标这两件事上多投入。这样可以确保你能处在一个自信的编码环境中；如果不是这样，那么首要任务就应该是关注建立正确的基础设施。</p>\n</li>\n<li><p>没有提前计划好一些没有关系。不断地尝试然后看看结果如何。提早纠错，确保你创建了一个没有不可能的环境。</p>\n</li>\n<li><p>好的软件会让事情变得简单。仅仅因为一开始问题看起来很困难并不意味着解决方案必须复杂或难以使用。很多时候，在一个会有更容易的方案但可能不是那么明显的情况下，工程师往往会条件反射式地选择引入复杂度很高的解决方案（让我们使用ML！让我们构建一个应用程序！让我们添加区块链！）。在你写下任何代码前，确保你的解决方案不能再简单了。任何事情遵循第一性原理。</p>\n</li>\n<li><p>避免很隐晦的规则。当你发现自己开发了一种较为隐晦的规则时，应保持规则明确并与他人共享或自动化。每当你发现自己想出一个反复的，准算法的工作流程时，应该设法将其形式化为一个文档化的流程，以便其他团队成员从该体验中受益。此外，你应该设法在自动化这种任何可被自动化的工作流程部份（例如，正确性检查）。</p>\n</li>\n<li><p>在设计过程中应考虑你所做选择的全局影响，而不仅仅是自己想要关注的部分 - 例如收入或增长。除了你当前正在监控的指标之外，你的软件对全球用户的总体影响是什么？是否存在超出价值主张的不良副作用？在保留软件实用性的同时，你可以做些什么来解决它们？</p>\n</li>\n</ol>\n<blockquote>\n<p>道德设计，将你的价值观融入在你的创作中。</p>\n</blockquote>\n<h1 id=\"API设计\"><a href=\"#API设计\" class=\"headerlink\" title=\"API设计\"></a>API设计</h1><ol>\n<li><p>你的API是有用户的，所以它应该也要有用户体验。在你做出的每一个决定中，都要牢记你的用户。对用户充满同理心，无论他们是初学者还是经验老道的老司机。</p>\n</li>\n<li><p>始终寻求在使用API​​的过程中尽量减少对用户的认知负担。自动化可自动化的内容，最大限度地减少用户所需的操作和选择，不要暴露不重要的选项，设计简单一致的工作流程，以反映简单一致的心理模型。</p>\n</li>\n<li><p>简单的事情应该是简单的，复杂的事情应该是可能的（Simple things should be simple, complex things should be possible. —-Alan Kay）。不要为了小众用例增加常见用例的认知负荷，即使影响很小。</p>\n</li>\n<li><p>如果工作流的认知负荷足够低，那么用户应该可以在完成一次或两次之后就可以记住它（无需查阅教程或文档）。</p>\n</li>\n<li><p>寻求拥有与领域专家和从业者的心理模型相匹配的API。拥有领域经验但对你的API没有经验的人应该能够看最少的文档就能直观地明白你的API，很多时候只需要通过查看几个代码示例并查看哪些对象可用以及它们的签名是什么。</p>\n</li>\n<li><p>在没有任何关于底层实现的上下文情况下，参数的含义应该是可理解的。必须由用户指定的参数应该与用户对问题的心理模型有关，而不是跟代码的实现细节有关。API代表的是它解决了什么问题，而不是它背后是如何运行的。</p>\n</li>\n<li><p>最强大的心理模型是模块化和分层的：高度简单，但是当你需要了解细节时，又很精细。同样，一个好的API是模块化和分层的：易于使用，但又具有表现力。对象少，但签名复杂，与对象多但签名简单之间存在着一个平衡。一个好的API应该有合理数量的对象，且具有相当简单的签名。</p>\n</li>\n<li><p>你的API不可避免地反映了你选择的实现，特别是你选择的数据结构。要实现直观的API，你必须一开始就选择自然适合的数据结构 - 与该领域专家的心智模型相匹配。</p>\n</li>\n<li><p>故意设计端到端工作流程，而不是一组原子功能。大多数开发人员会询问：”应该提供哪些功能来处理API设计？让我们为他们配置选项吧。“相反地，应该问：该工具的用例是什么？对于每个用例，用户操作的最佳顺序是什么？什么是可以支持这个工作流程最简单的API？ API中的原子选项应该能够满足高级工作流程中出现的明确需求 - 不应该“因为有人可能需要它”就添加它们。</p>\n</li>\n<li><p>错误消息以及通常在与API交互过程中向用户提供的任何反馈都是API的一部分。交互性和反馈是用户体验不可或缺的一部分。要为你的API设计错误消息。</p>\n</li>\n<li><p>因为代码是一种交流，所以命名很重要 - 无论是项目还是变量的命名。名称反映了你对问题的看法。避免使用过于通用的名称（x，变量，参数），避免 <code>OverlyLongAndSpecificNamingPatterns</code>，避免可能产生不必要的术语（主，从），并确保在命名选择中保持一致。命名一致性意味着内部命名一致性（不要一些地方用”dim“代表坐标轴，在另一些地方用”axis“）以及与问题域的既定约定的一致性。在命名之前，应尽量使用该领域专家（或其他API）已在使用的命名。</p>\n</li>\n<li><p>文档是API用户体验的核心，它不是附属品。在高质量的文档上多花时间，你会得到比在更多功能上多花时间更高的回报。</p>\n</li>\n<li><p>展示，而不是解释：你的文档不应该讨论软件的工作原理，它应该说明如何使用它。展示端到端工作流的代码示例、显示API的每个常见用例和关键功能的代码示例。</p>\n</li>\n</ol>\n<blockquote>\n<p>生产力归结为快速决策和执行力。</p>\n</blockquote>\n<h1 id=\"软件生涯\"><a href=\"#软件生涯\" class=\"headerlink\" title=\"软件生涯\"></a>软件生涯</h1><ol>\n<li><p>职业发展并不是你管理人数的多少，而是你所产生的影响，这个世界有你没你会有多大的差别?</p>\n</li>\n<li><p>软件开发是一项团队合作；它与人际关系和技术能力有关。做个好伙伴，当你不断前行时，不要忘了与人保持联系。</p>\n</li>\n<li><p><strong>技术永远不会是中立的</strong>。如果你的工作对世界有任何影响，那么这种影响就有道德方向。我们在软件产品中看似无害的技术选择都会被充满使用动机，谁将受益，谁将受到影响。技术选择也是道德选择。因此，始终谨慎而明确地表达你想要支持的价值观。道德设计，将您的价值观融入您的创作中。永远不要想，我只是在建立这种能力，这本身是中立的。你构建它的方式无法决定它被使用的方式。</p>\n</li>\n<li><p>自我引导，你的工作和环境的力量，是生活满意度的关键。确保你给予周围的人充分的自我引导，并确保你的职业选择能够为你自己带来更多的力量。</p>\n</li>\n<li><p>去创造这个世界需要的东西，而不仅仅是你希望拥有的东西。技术人员常常会边过着稀薄的生活，边专注于满足自身特定需求的产品。寻找机会拓宽你的生活体验，让自己能更好地发现这个世界需要什么。</p>\n</li>\n<li><p>在做出会有长期影响的任何选择时，请将你的价值观置于短期的自身利益和过度的情绪之上 - 例如贪婪或恐惧。认清你的价值观，并让它们引导你。</p>\n</li>\n<li><p>当我们发现自己陷入冲突时，先暂停下来并承认我们的共同价值观和共同目标是个不错的主意，提醒彼此，我们是在同一条船上的。</p>\n</li>\n<li><p>生产力归结为高速决策和执行力。这需要a）良好的直觉，这来自以往的经验，它可以帮你在只给出部分信息的情况下就做出普遍正确的决定; b）敏锐地意识到何时应该更谨慎的行动并等待更多信息，因为错误决策会比延期付出更高的代价。最快的速度/最好的质量之间的决策往往会在不同环境而有不同的权衡。</p>\n</li>\n<li><p>更快地做出决策意味着你在职业生涯中要做出更多决策，这将使你对正确的选项有更强的直觉。经验是提高生产力的关键，更高的生产力将为你提供更多的经验：良性循环。</p>\n</li>\n<li><p>在你意识到缺乏直觉的情况下，请遵守抽象原则。在整个职业生涯中建立尝试过且正确的原则列表。原则是形式化的直觉，相比于原始直觉（需要对类似情况的有直接且丰富的经验），它能适用于更广泛的场景。</p>\n</li>\n</ol>\n","site":{"data":{"links":{"Colin’s Nest":{"link":"http://colin1994.github.io/","avatar":"http://example.com/avatar.png"},"Vong":{"link":"https://vongloo.me/","avatar":"http://example.com/avatar.png"},"Punmy":{"link":"https://punmy.cn/","avatar":"http://example.com/avatar.png"},"细语呢喃":{"link":"https://www.hrwhisper.me/","avatar":"http://example.com/avatar.png"},"栖迟于一丘":{"link":"https://www.hongweipeng.com/","avatar":"http://example.com/avatar.png"},"B1ueW01f":{"link":"https://www.b1uew01f.net/","avatar":"http://example.com/avatar.png"},"忘归":{"link":"http://jalan.space/","avatar":"http://example.com/avatar.png"},"进阶者":{"link":"https://ruphi.cn/","avatar":"http://example.com/avatar.png"},"LIZIMEOW'S BLOG":{"link":"http://lizimeow.cn/","avatar":"http://example.com/avatar.png"},"Saitjr":{"link":"http://www.saitjr.com/","avatar":null}}}},"excerpt":"","more":"<blockquote>\n<p>这是 Keras 的开发者 François Chollet 整理的笔记，里面有很多思考值得学习。<br><a href=\"https://medium.com/s/story/notes-to-myself-on-software-engineering-c890f16f4e4d\" target=\"_blank\" rel=\"noopener\">原文链接</a></p>\n</blockquote>\n<h1 id=\"在开发过程中\"><a href=\"#在开发过程中\" class=\"headerlink\" title=\"在开发过程中\"></a>在开发过程中</h1><ol>\n<li><p>代码不仅仅意味着要被执行的。代码也是团队之间的沟通方式，是向他人描述问题解决方案的一种方式。（写出）具有较高可读性的代码不是一件值得骄傲的事情，它是编写代码最基础的部分了。这其中包括清楚地分解代码，选择不言自明的变量名，并插入合适的注释来描述隐含的任何内容。</p>\n</li>\n<li><p>当你提交每个PR的时候，要思考的不是这个PR能给你的下次升职带来什么，而应该是这个PR可以为你的用户和社区做些什么。要不惜一切代价地避免“狠显眼的贡献”。如果不是很明显的能帮助产品的目的，就请不要添加任何功能。  </p>\n</li>\n<li><p>代码也是有品位的。品味是由对简单的渴望而产生符合约束-满足规范的过程，要时刻保持着对简单的执念。</p>\n</li>\n<li><p>敢于拒绝 - 只是因为有人要求提供功能并不意味着你应该这么做。每项功能的成本都超出了最初的实施范围：因为有维护成本、文档成本和用户的认知成本。如果你总是问：我们真的应该这样做吗？通常答案都会是否定的。</p>\n</li>\n<li><p>当你对用户提出的新的功能需求说“是”时，请记住，用户要的东西通常都不是最佳的选择。用户值专注于他们自己的特定的需求，你必须以项目的整体性和自有的原则来应对这一点。通常正确的答案会是扩展现有的功能。</p>\n</li>\n<li><p>在持续集成和以全面覆盖单元测试为目标这两件事上多投入。这样可以确保你能处在一个自信的编码环境中；如果不是这样，那么首要任务就应该是关注建立正确的基础设施。</p>\n</li>\n<li><p>没有提前计划好一些没有关系。不断地尝试然后看看结果如何。提早纠错，确保你创建了一个没有不可能的环境。</p>\n</li>\n<li><p>好的软件会让事情变得简单。仅仅因为一开始问题看起来很困难并不意味着解决方案必须复杂或难以使用。很多时候，在一个会有更容易的方案但可能不是那么明显的情况下，工程师往往会条件反射式地选择引入复杂度很高的解决方案（让我们使用ML！让我们构建一个应用程序！让我们添加区块链！）。在你写下任何代码前，确保你的解决方案不能再简单了。任何事情遵循第一性原理。</p>\n</li>\n<li><p>避免很隐晦的规则。当你发现自己开发了一种较为隐晦的规则时，应保持规则明确并与他人共享或自动化。每当你发现自己想出一个反复的，准算法的工作流程时，应该设法将其形式化为一个文档化的流程，以便其他团队成员从该体验中受益。此外，你应该设法在自动化这种任何可被自动化的工作流程部份（例如，正确性检查）。</p>\n</li>\n<li><p>在设计过程中应考虑你所做选择的全局影响，而不仅仅是自己想要关注的部分 - 例如收入或增长。除了你当前正在监控的指标之外，你的软件对全球用户的总体影响是什么？是否存在超出价值主张的不良副作用？在保留软件实用性的同时，你可以做些什么来解决它们？</p>\n</li>\n</ol>\n<blockquote>\n<p>道德设计，将你的价值观融入在你的创作中。</p>\n</blockquote>\n<h1 id=\"API设计\"><a href=\"#API设计\" class=\"headerlink\" title=\"API设计\"></a>API设计</h1><ol>\n<li><p>你的API是有用户的，所以它应该也要有用户体验。在你做出的每一个决定中，都要牢记你的用户。对用户充满同理心，无论他们是初学者还是经验老道的老司机。</p>\n</li>\n<li><p>始终寻求在使用API​​的过程中尽量减少对用户的认知负担。自动化可自动化的内容，最大限度地减少用户所需的操作和选择，不要暴露不重要的选项，设计简单一致的工作流程，以反映简单一致的心理模型。</p>\n</li>\n<li><p>简单的事情应该是简单的，复杂的事情应该是可能的（Simple things should be simple, complex things should be possible. —-Alan Kay）。不要为了小众用例增加常见用例的认知负荷，即使影响很小。</p>\n</li>\n<li><p>如果工作流的认知负荷足够低，那么用户应该可以在完成一次或两次之后就可以记住它（无需查阅教程或文档）。</p>\n</li>\n<li><p>寻求拥有与领域专家和从业者的心理模型相匹配的API。拥有领域经验但对你的API没有经验的人应该能够看最少的文档就能直观地明白你的API，很多时候只需要通过查看几个代码示例并查看哪些对象可用以及它们的签名是什么。</p>\n</li>\n<li><p>在没有任何关于底层实现的上下文情况下，参数的含义应该是可理解的。必须由用户指定的参数应该与用户对问题的心理模型有关，而不是跟代码的实现细节有关。API代表的是它解决了什么问题，而不是它背后是如何运行的。</p>\n</li>\n<li><p>最强大的心理模型是模块化和分层的：高度简单，但是当你需要了解细节时，又很精细。同样，一个好的API是模块化和分层的：易于使用，但又具有表现力。对象少，但签名复杂，与对象多但签名简单之间存在着一个平衡。一个好的API应该有合理数量的对象，且具有相当简单的签名。</p>\n</li>\n<li><p>你的API不可避免地反映了你选择的实现，特别是你选择的数据结构。要实现直观的API，你必须一开始就选择自然适合的数据结构 - 与该领域专家的心智模型相匹配。</p>\n</li>\n<li><p>故意设计端到端工作流程，而不是一组原子功能。大多数开发人员会询问：”应该提供哪些功能来处理API设计？让我们为他们配置选项吧。“相反地，应该问：该工具的用例是什么？对于每个用例，用户操作的最佳顺序是什么？什么是可以支持这个工作流程最简单的API？ API中的原子选项应该能够满足高级工作流程中出现的明确需求 - 不应该“因为有人可能需要它”就添加它们。</p>\n</li>\n<li><p>错误消息以及通常在与API交互过程中向用户提供的任何反馈都是API的一部分。交互性和反馈是用户体验不可或缺的一部分。要为你的API设计错误消息。</p>\n</li>\n<li><p>因为代码是一种交流，所以命名很重要 - 无论是项目还是变量的命名。名称反映了你对问题的看法。避免使用过于通用的名称（x，变量，参数），避免 <code>OverlyLongAndSpecificNamingPatterns</code>，避免可能产生不必要的术语（主，从），并确保在命名选择中保持一致。命名一致性意味着内部命名一致性（不要一些地方用”dim“代表坐标轴，在另一些地方用”axis“）以及与问题域的既定约定的一致性。在命名之前，应尽量使用该领域专家（或其他API）已在使用的命名。</p>\n</li>\n<li><p>文档是API用户体验的核心，它不是附属品。在高质量的文档上多花时间，你会得到比在更多功能上多花时间更高的回报。</p>\n</li>\n<li><p>展示，而不是解释：你的文档不应该讨论软件的工作原理，它应该说明如何使用它。展示端到端工作流的代码示例、显示API的每个常见用例和关键功能的代码示例。</p>\n</li>\n</ol>\n<blockquote>\n<p>生产力归结为快速决策和执行力。</p>\n</blockquote>\n<h1 id=\"软件生涯\"><a href=\"#软件生涯\" class=\"headerlink\" title=\"软件生涯\"></a>软件生涯</h1><ol>\n<li><p>职业发展并不是你管理人数的多少，而是你所产生的影响，这个世界有你没你会有多大的差别?</p>\n</li>\n<li><p>软件开发是一项团队合作；它与人际关系和技术能力有关。做个好伙伴，当你不断前行时，不要忘了与人保持联系。</p>\n</li>\n<li><p><strong>技术永远不会是中立的</strong>。如果你的工作对世界有任何影响，那么这种影响就有道德方向。我们在软件产品中看似无害的技术选择都会被充满使用动机，谁将受益，谁将受到影响。技术选择也是道德选择。因此，始终谨慎而明确地表达你想要支持的价值观。道德设计，将您的价值观融入您的创作中。永远不要想，我只是在建立这种能力，这本身是中立的。你构建它的方式无法决定它被使用的方式。</p>\n</li>\n<li><p>自我引导，你的工作和环境的力量，是生活满意度的关键。确保你给予周围的人充分的自我引导，并确保你的职业选择能够为你自己带来更多的力量。</p>\n</li>\n<li><p>去创造这个世界需要的东西，而不仅仅是你希望拥有的东西。技术人员常常会边过着稀薄的生活，边专注于满足自身特定需求的产品。寻找机会拓宽你的生活体验，让自己能更好地发现这个世界需要什么。</p>\n</li>\n<li><p>在做出会有长期影响的任何选择时，请将你的价值观置于短期的自身利益和过度的情绪之上 - 例如贪婪或恐惧。认清你的价值观，并让它们引导你。</p>\n</li>\n<li><p>当我们发现自己陷入冲突时，先暂停下来并承认我们的共同价值观和共同目标是个不错的主意，提醒彼此，我们是在同一条船上的。</p>\n</li>\n<li><p>生产力归结为高速决策和执行力。这需要a）良好的直觉，这来自以往的经验，它可以帮你在只给出部分信息的情况下就做出普遍正确的决定; b）敏锐地意识到何时应该更谨慎的行动并等待更多信息，因为错误决策会比延期付出更高的代价。最快的速度/最好的质量之间的决策往往会在不同环境而有不同的权衡。</p>\n</li>\n<li><p>更快地做出决策意味着你在职业生涯中要做出更多决策，这将使你对正确的选项有更强的直觉。经验是提高生产力的关键，更高的生产力将为你提供更多的经验：良性循环。</p>\n</li>\n<li><p>在你意识到缺乏直觉的情况下，请遵守抽象原则。在整个职业生涯中建立尝试过且正确的原则列表。原则是形式化的直觉，相比于原始直觉（需要对类似情况的有直接且丰富的经验），它能适用于更广泛的场景。</p>\n</li>\n</ol>\n"},{"title":"由于Python版本太低遇到的环境问题备忘","date":"2019-02-25T07:57:53.000Z","_content":"\n这两天在倒腾用Python写个接口，遇到一些问题，特此做下记录备忘，方便后面查阅。\n\n## Error - A true SSLContext object is not available\n\n> InsecurePlatformWarning: A true SSLContext object is not available. This prevents urllib3 from configuring SSL\nappropriately and may cause certain SSL connections to fail. For more information, see https://urllib3.readthedocs.org/en/latest/security.html#insecureplatformwarning.\n\n这是因为我服务器上的Python版本太低了，如果Python版本低于2.7.9之前的话，就会有这个错误提示，因为2.7.9之前的Python提供的SSL环境不是很安全。\n\n所以理所当然我们就要升级Python的版本了。\n\n## Install Python3.7\n\n`cat /etc/redhat-release`\n\n看了一眼系统是 `CentOS 6`\n\n于是先使用yum安装环境依赖。\n\n```python\n# wget 用于下载源码包\n# gcc 和 make 用于编译\nyum install wget gcc make\n\n#make报错，Python 有个很重要的内建模块 zipimport 用于从 Zip 压缩包中导入模块\n#zipimport.ZipImportError: can't decompress data; zlib not available\nyum install zlib-devel\n\n#make install报错，\n#ModuleNotFoundError: No module named ‘_ctypes’\nyum install libffi-devel\n\n# 解决 import ssl 报错 No module named '_ssl'\nyum install openssl-devel\n\n# 解决 import bz2 报错\nyum install  bzip2-devel\n\n# 解决 import curses 报错\nyum install  ncurses-devel\n\n# 解决 import sqlite3 报错\nyum install sqlite-devel\n\n# 解决 _dbm _gdbm 缺失提醒\nyum install gdbm-devel\n\n# 解决 _lzma 缺失提醒\nyum install xz-devel\n\n# 解决 _tkinter 缺失提醒\nyum install tk-devel\n\n# 解决 readline 缺失提醒及方向键行为非预期的问题\nyum install readline-devel\n```\n\n然后下载源码包\n\n`wget https://www.python.org/ftp/python/3.7.1/Python-3.7.1.tar.xz`\n\n解压缩\n\n```sh\nxz -d Python-3.7.1.tar.xz\ntar -xvf Python-3.7.1.tar\n```\n\n编译&安装\n\n```sh\ncd Python-3.7.1\n#--prefix 是预期安装目录，--enable-optimizations 是优化选项（LTO，PGO 等）\n./configure --prefix=/usr/local/python3.7 --enable-optimizations\n# 安装\nmake && make install\n```\n\n添加软链接\n\n```sh\nln -s /usr/local/python3.7/bin/python3.7 /usr/bin/python3\nln -s /usr/local/python3.7/bin/pip3.7 /usr/bin/pip3\n```\n\n这样子应该一切就搞定啦。\n然而，事情好像没有那么简单。\n\n当我尝试使用 `pip3 install flask` 的时候，报错。\n\n## Error - OpenSSL version\n\n> pip is configured with locations that require TLS/SSL, however the ssl module in Python is not available.\n\n前边说过，我的服务器系统是CentOS 6，默认的OpenSSL版本是1.0.1，而Python3.7需要OpenSSL1.0.2或者1.1.x才行，于是我们需要对OpenSSL进行升级并且重新编辑Pyton3.7。\n\n## 升级OpenSSL\n\n下载最新版的OpenSSL\n\n`wget https://www.openssl.org/source/openssl-1.1.1-pre8.tar.gz`\n\n编译&安装\n\n```sh\ncd openssl-1.1.1-pre8\n./config --prefix=/usr/local/openssl no-zlib #不需要zlib\nmake & make install\n```\n\n备份原配置\n\n```sh\nmv /usr/bin/openssl /usr/bin/openssl.bak\nmv /usr/include/openssl/ /usr/include/openssl.bak\n```\n\n添加软链接\n\n```sh\nln -s /usr/local/openssl/include/openssl /usr/include/openssl\nln -s /usr/local/openssl/lib/libssl.so.1.1 /usr/local/lib64/libssl.so\nln -s /usr/local/openssl/bin/openssl /usr/bin/openssl\n```\n\n修改系统配置\n\n```sh\n#写入openssl库文件的搜索路径\necho \"/usr/local/openssl/lib\" >> /etc/ld.so.conf\n#使修改后的/etc/ld.so.conf生效 \nldconfig -v\n```\n\n重新编译Python3.7\n\n```sh\ncd Python-3.7.1\n#--prefix 是预期安装目录，--enable-optimizations 是优化选项（LTO，PGO 等）\n./configure --prefix=/usr/local/python3.7 --enable-optimizations  --with-openssl=/usr/local/openssl\n# 安装\nmake && make install\n```\n\n\n**至此，所有问题都解决了。**\n**感想：Linux里的相关环境配置，真是一门大学问啊**\n\n## 参考\n*[Flask安装: A true SSLContext object is not available](https://blog.tanteng.me/2015/12/flask-sslcontext/)*\n*[CentOS 7 下安装 Python3.7.1](https://segmentfault.com/a/1190000017313144)*\n*[python3.7安装后ssl问题](https://blog.51cto.com/13544424/2149473)*\n\n\n","source":"_posts/python-backend-memo.md","raw":"---\ntitle: 由于Python版本太低遇到的环境问题备忘\ndate: 2019-02-25 15:57:53\ntags: \n- Python\n- Flask\n- OpenSSL\n- Linux\n---\n\n这两天在倒腾用Python写个接口，遇到一些问题，特此做下记录备忘，方便后面查阅。\n\n## Error - A true SSLContext object is not available\n\n> InsecurePlatformWarning: A true SSLContext object is not available. This prevents urllib3 from configuring SSL\nappropriately and may cause certain SSL connections to fail. For more information, see https://urllib3.readthedocs.org/en/latest/security.html#insecureplatformwarning.\n\n这是因为我服务器上的Python版本太低了，如果Python版本低于2.7.9之前的话，就会有这个错误提示，因为2.7.9之前的Python提供的SSL环境不是很安全。\n\n所以理所当然我们就要升级Python的版本了。\n\n## Install Python3.7\n\n`cat /etc/redhat-release`\n\n看了一眼系统是 `CentOS 6`\n\n于是先使用yum安装环境依赖。\n\n```python\n# wget 用于下载源码包\n# gcc 和 make 用于编译\nyum install wget gcc make\n\n#make报错，Python 有个很重要的内建模块 zipimport 用于从 Zip 压缩包中导入模块\n#zipimport.ZipImportError: can't decompress data; zlib not available\nyum install zlib-devel\n\n#make install报错，\n#ModuleNotFoundError: No module named ‘_ctypes’\nyum install libffi-devel\n\n# 解决 import ssl 报错 No module named '_ssl'\nyum install openssl-devel\n\n# 解决 import bz2 报错\nyum install  bzip2-devel\n\n# 解决 import curses 报错\nyum install  ncurses-devel\n\n# 解决 import sqlite3 报错\nyum install sqlite-devel\n\n# 解决 _dbm _gdbm 缺失提醒\nyum install gdbm-devel\n\n# 解决 _lzma 缺失提醒\nyum install xz-devel\n\n# 解决 _tkinter 缺失提醒\nyum install tk-devel\n\n# 解决 readline 缺失提醒及方向键行为非预期的问题\nyum install readline-devel\n```\n\n然后下载源码包\n\n`wget https://www.python.org/ftp/python/3.7.1/Python-3.7.1.tar.xz`\n\n解压缩\n\n```sh\nxz -d Python-3.7.1.tar.xz\ntar -xvf Python-3.7.1.tar\n```\n\n编译&安装\n\n```sh\ncd Python-3.7.1\n#--prefix 是预期安装目录，--enable-optimizations 是优化选项（LTO，PGO 等）\n./configure --prefix=/usr/local/python3.7 --enable-optimizations\n# 安装\nmake && make install\n```\n\n添加软链接\n\n```sh\nln -s /usr/local/python3.7/bin/python3.7 /usr/bin/python3\nln -s /usr/local/python3.7/bin/pip3.7 /usr/bin/pip3\n```\n\n这样子应该一切就搞定啦。\n然而，事情好像没有那么简单。\n\n当我尝试使用 `pip3 install flask` 的时候，报错。\n\n## Error - OpenSSL version\n\n> pip is configured with locations that require TLS/SSL, however the ssl module in Python is not available.\n\n前边说过，我的服务器系统是CentOS 6，默认的OpenSSL版本是1.0.1，而Python3.7需要OpenSSL1.0.2或者1.1.x才行，于是我们需要对OpenSSL进行升级并且重新编辑Pyton3.7。\n\n## 升级OpenSSL\n\n下载最新版的OpenSSL\n\n`wget https://www.openssl.org/source/openssl-1.1.1-pre8.tar.gz`\n\n编译&安装\n\n```sh\ncd openssl-1.1.1-pre8\n./config --prefix=/usr/local/openssl no-zlib #不需要zlib\nmake & make install\n```\n\n备份原配置\n\n```sh\nmv /usr/bin/openssl /usr/bin/openssl.bak\nmv /usr/include/openssl/ /usr/include/openssl.bak\n```\n\n添加软链接\n\n```sh\nln -s /usr/local/openssl/include/openssl /usr/include/openssl\nln -s /usr/local/openssl/lib/libssl.so.1.1 /usr/local/lib64/libssl.so\nln -s /usr/local/openssl/bin/openssl /usr/bin/openssl\n```\n\n修改系统配置\n\n```sh\n#写入openssl库文件的搜索路径\necho \"/usr/local/openssl/lib\" >> /etc/ld.so.conf\n#使修改后的/etc/ld.so.conf生效 \nldconfig -v\n```\n\n重新编译Python3.7\n\n```sh\ncd Python-3.7.1\n#--prefix 是预期安装目录，--enable-optimizations 是优化选项（LTO，PGO 等）\n./configure --prefix=/usr/local/python3.7 --enable-optimizations  --with-openssl=/usr/local/openssl\n# 安装\nmake && make install\n```\n\n\n**至此，所有问题都解决了。**\n**感想：Linux里的相关环境配置，真是一门大学问啊**\n\n## 参考\n*[Flask安装: A true SSLContext object is not available](https://blog.tanteng.me/2015/12/flask-sslcontext/)*\n*[CentOS 7 下安装 Python3.7.1](https://segmentfault.com/a/1190000017313144)*\n*[python3.7安装后ssl问题](https://blog.51cto.com/13544424/2149473)*\n\n\n","slug":"python-backend-memo","published":1,"updated":"2022-10-25T02:57:42.645Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9nmc48a000d8wwxwn6rzvkx","content":"<p>这两天在倒腾用Python写个接口，遇到一些问题，特此做下记录备忘，方便后面查阅。</p>\n<h2 id=\"Error-A-true-SSLContext-object-is-not-available\"><a href=\"#Error-A-true-SSLContext-object-is-not-available\" class=\"headerlink\" title=\"Error - A true SSLContext object is not available\"></a>Error - A true SSLContext object is not available</h2><blockquote>\n<p>InsecurePlatformWarning: A true SSLContext object is not available. This prevents urllib3 from configuring SSL<br>appropriately and may cause certain SSL connections to fail. For more information, see <a href=\"https://urllib3.readthedocs.org/en/latest/security.html#insecureplatformwarning\" target=\"_blank\" rel=\"noopener\">https://urllib3.readthedocs.org/en/latest/security.html#insecureplatformwarning</a>.</p>\n</blockquote>\n<p>这是因为我服务器上的Python版本太低了，如果Python版本低于2.7.9之前的话，就会有这个错误提示，因为2.7.9之前的Python提供的SSL环境不是很安全。</p>\n<p>所以理所当然我们就要升级Python的版本了。</p>\n<h2 id=\"Install-Python3-7\"><a href=\"#Install-Python3-7\" class=\"headerlink\" title=\"Install Python3.7\"></a>Install Python3.7</h2><p><code>cat /etc/redhat-release</code></p>\n<p>看了一眼系统是 <code>CentOS 6</code></p>\n<p>于是先使用yum安装环境依赖。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># wget 用于下载源码包</span></span><br><span class=\"line\"><span class=\"comment\"># gcc 和 make 用于编译</span></span><br><span class=\"line\">yum install wget gcc make</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#make报错，Python 有个很重要的内建模块 zipimport 用于从 Zip 压缩包中导入模块</span></span><br><span class=\"line\"><span class=\"comment\">#zipimport.ZipImportError: can't decompress data; zlib not available</span></span><br><span class=\"line\">yum install zlib-devel</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#make install报错，</span></span><br><span class=\"line\"><span class=\"comment\">#ModuleNotFoundError: No module named ‘_ctypes’</span></span><br><span class=\"line\">yum install libffi-devel</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解决 import ssl 报错 No module named '_ssl'</span></span><br><span class=\"line\">yum install openssl-devel</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解决 import bz2 报错</span></span><br><span class=\"line\">yum install  bzip2-devel</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解决 import curses 报错</span></span><br><span class=\"line\">yum install  ncurses-devel</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解决 import sqlite3 报错</span></span><br><span class=\"line\">yum install sqlite-devel</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解决 _dbm _gdbm 缺失提醒</span></span><br><span class=\"line\">yum install gdbm-devel</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解决 _lzma 缺失提醒</span></span><br><span class=\"line\">yum install xz-devel</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解决 _tkinter 缺失提醒</span></span><br><span class=\"line\">yum install tk-devel</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解决 readline 缺失提醒及方向键行为非预期的问题</span></span><br><span class=\"line\">yum install readline-devel</span><br></pre></td></tr></table></figure>\n<p>然后下载源码包</p>\n<p><code>wget https://www.python.org/ftp/python/3.7.1/Python-3.7.1.tar.xz</code></p>\n<p>解压缩</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xz -d Python-3.7.1.tar.xz</span><br><span class=\"line\">tar -xvf Python-3.7.1.tar</span><br></pre></td></tr></table></figure>\n<p>编译&amp;安装</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> Python-3.7.1</span><br><span class=\"line\"><span class=\"comment\">#--prefix 是预期安装目录，--enable-optimizations 是优化选项（LTO，PGO 等）</span></span><br><span class=\"line\">./configure --prefix=/usr/<span class=\"built_in\">local</span>/python3.7 --<span class=\"built_in\">enable</span>-optimizations</span><br><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<p>添加软链接</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /usr/<span class=\"built_in\">local</span>/python3.7/bin/python3.7 /usr/bin/python3</span><br><span class=\"line\">ln -s /usr/<span class=\"built_in\">local</span>/python3.7/bin/pip3.7 /usr/bin/pip3</span><br></pre></td></tr></table></figure>\n<p>这样子应该一切就搞定啦。<br>然而，事情好像没有那么简单。</p>\n<p>当我尝试使用 <code>pip3 install flask</code> 的时候，报错。</p>\n<h2 id=\"Error-OpenSSL-version\"><a href=\"#Error-OpenSSL-version\" class=\"headerlink\" title=\"Error - OpenSSL version\"></a>Error - OpenSSL version</h2><blockquote>\n<p>pip is configured with locations that require TLS/SSL, however the ssl module in Python is not available.</p>\n</blockquote>\n<p>前边说过，我的服务器系统是CentOS 6，默认的OpenSSL版本是1.0.1，而Python3.7需要OpenSSL1.0.2或者1.1.x才行，于是我们需要对OpenSSL进行升级并且重新编辑Pyton3.7。</p>\n<h2 id=\"升级OpenSSL\"><a href=\"#升级OpenSSL\" class=\"headerlink\" title=\"升级OpenSSL\"></a>升级OpenSSL</h2><p>下载最新版的OpenSSL</p>\n<p><code>wget https://www.openssl.org/source/openssl-1.1.1-pre8.tar.gz</code></p>\n<p>编译&amp;安装</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> openssl-1.1.1-pre8</span><br><span class=\"line\">./config --prefix=/usr/<span class=\"built_in\">local</span>/openssl no-zlib <span class=\"comment\">#不需要zlib</span></span><br><span class=\"line\">make &amp; make install</span><br></pre></td></tr></table></figure>\n<p>备份原配置</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv /usr/bin/openssl /usr/bin/openssl.bak</span><br><span class=\"line\">mv /usr/include/openssl/ /usr/include/openssl.bak</span><br></pre></td></tr></table></figure>\n<p>添加软链接</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /usr/<span class=\"built_in\">local</span>/openssl/include/openssl /usr/include/openssl</span><br><span class=\"line\">ln -s /usr/<span class=\"built_in\">local</span>/openssl/lib/libssl.so.1.1 /usr/<span class=\"built_in\">local</span>/lib64/libssl.so</span><br><span class=\"line\">ln -s /usr/<span class=\"built_in\">local</span>/openssl/bin/openssl /usr/bin/openssl</span><br></pre></td></tr></table></figure>\n<p>修改系统配置</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#写入openssl库文件的搜索路径</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"/usr/local/openssl/lib\"</span> &gt;&gt; /etc/ld.so.conf</span><br><span class=\"line\"><span class=\"comment\">#使修改后的/etc/ld.so.conf生效 </span></span><br><span class=\"line\">ldconfig -v</span><br></pre></td></tr></table></figure>\n<p>重新编译Python3.7</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> Python-3.7.1</span><br><span class=\"line\"><span class=\"comment\">#--prefix 是预期安装目录，--enable-optimizations 是优化选项（LTO，PGO 等）</span></span><br><span class=\"line\">./configure --prefix=/usr/<span class=\"built_in\">local</span>/python3.7 --<span class=\"built_in\">enable</span>-optimizations  --with-openssl=/usr/<span class=\"built_in\">local</span>/openssl</span><br><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<p><strong>至此，所有问题都解决了。</strong><br><strong>感想：Linux里的相关环境配置，真是一门大学问啊</strong></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><em><a href=\"https://blog.tanteng.me/2015/12/flask-sslcontext/\" target=\"_blank\" rel=\"noopener\">Flask安装: A true SSLContext object is not available</a></em><br><em><a href=\"https://segmentfault.com/a/1190000017313144\" target=\"_blank\" rel=\"noopener\">CentOS 7 下安装 Python3.7.1</a></em><br><em><a href=\"https://blog.51cto.com/13544424/2149473\" target=\"_blank\" rel=\"noopener\">python3.7安装后ssl问题</a></em></p>\n","site":{"data":{"links":{"Colin’s Nest":{"link":"http://colin1994.github.io/","avatar":"http://example.com/avatar.png"},"Vong":{"link":"https://vongloo.me/","avatar":"http://example.com/avatar.png"},"Punmy":{"link":"https://punmy.cn/","avatar":"http://example.com/avatar.png"},"细语呢喃":{"link":"https://www.hrwhisper.me/","avatar":"http://example.com/avatar.png"},"栖迟于一丘":{"link":"https://www.hongweipeng.com/","avatar":"http://example.com/avatar.png"},"B1ueW01f":{"link":"https://www.b1uew01f.net/","avatar":"http://example.com/avatar.png"},"忘归":{"link":"http://jalan.space/","avatar":"http://example.com/avatar.png"},"进阶者":{"link":"https://ruphi.cn/","avatar":"http://example.com/avatar.png"},"LIZIMEOW'S BLOG":{"link":"http://lizimeow.cn/","avatar":"http://example.com/avatar.png"},"Saitjr":{"link":"http://www.saitjr.com/","avatar":null}}}},"excerpt":"","more":"<p>这两天在倒腾用Python写个接口，遇到一些问题，特此做下记录备忘，方便后面查阅。</p>\n<h2 id=\"Error-A-true-SSLContext-object-is-not-available\"><a href=\"#Error-A-true-SSLContext-object-is-not-available\" class=\"headerlink\" title=\"Error - A true SSLContext object is not available\"></a>Error - A true SSLContext object is not available</h2><blockquote>\n<p>InsecurePlatformWarning: A true SSLContext object is not available. This prevents urllib3 from configuring SSL<br>appropriately and may cause certain SSL connections to fail. For more information, see <a href=\"https://urllib3.readthedocs.org/en/latest/security.html#insecureplatformwarning\" target=\"_blank\" rel=\"noopener\">https://urllib3.readthedocs.org/en/latest/security.html#insecureplatformwarning</a>.</p>\n</blockquote>\n<p>这是因为我服务器上的Python版本太低了，如果Python版本低于2.7.9之前的话，就会有这个错误提示，因为2.7.9之前的Python提供的SSL环境不是很安全。</p>\n<p>所以理所当然我们就要升级Python的版本了。</p>\n<h2 id=\"Install-Python3-7\"><a href=\"#Install-Python3-7\" class=\"headerlink\" title=\"Install Python3.7\"></a>Install Python3.7</h2><p><code>cat /etc/redhat-release</code></p>\n<p>看了一眼系统是 <code>CentOS 6</code></p>\n<p>于是先使用yum安装环境依赖。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># wget 用于下载源码包</span></span><br><span class=\"line\"><span class=\"comment\"># gcc 和 make 用于编译</span></span><br><span class=\"line\">yum install wget gcc make</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#make报错，Python 有个很重要的内建模块 zipimport 用于从 Zip 压缩包中导入模块</span></span><br><span class=\"line\"><span class=\"comment\">#zipimport.ZipImportError: can't decompress data; zlib not available</span></span><br><span class=\"line\">yum install zlib-devel</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#make install报错，</span></span><br><span class=\"line\"><span class=\"comment\">#ModuleNotFoundError: No module named ‘_ctypes’</span></span><br><span class=\"line\">yum install libffi-devel</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解决 import ssl 报错 No module named '_ssl'</span></span><br><span class=\"line\">yum install openssl-devel</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解决 import bz2 报错</span></span><br><span class=\"line\">yum install  bzip2-devel</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解决 import curses 报错</span></span><br><span class=\"line\">yum install  ncurses-devel</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解决 import sqlite3 报错</span></span><br><span class=\"line\">yum install sqlite-devel</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解决 _dbm _gdbm 缺失提醒</span></span><br><span class=\"line\">yum install gdbm-devel</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解决 _lzma 缺失提醒</span></span><br><span class=\"line\">yum install xz-devel</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解决 _tkinter 缺失提醒</span></span><br><span class=\"line\">yum install tk-devel</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解决 readline 缺失提醒及方向键行为非预期的问题</span></span><br><span class=\"line\">yum install readline-devel</span><br></pre></td></tr></table></figure>\n<p>然后下载源码包</p>\n<p><code>wget https://www.python.org/ftp/python/3.7.1/Python-3.7.1.tar.xz</code></p>\n<p>解压缩</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xz -d Python-3.7.1.tar.xz</span><br><span class=\"line\">tar -xvf Python-3.7.1.tar</span><br></pre></td></tr></table></figure>\n<p>编译&amp;安装</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> Python-3.7.1</span><br><span class=\"line\"><span class=\"comment\">#--prefix 是预期安装目录，--enable-optimizations 是优化选项（LTO，PGO 等）</span></span><br><span class=\"line\">./configure --prefix=/usr/<span class=\"built_in\">local</span>/python3.7 --<span class=\"built_in\">enable</span>-optimizations</span><br><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<p>添加软链接</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /usr/<span class=\"built_in\">local</span>/python3.7/bin/python3.7 /usr/bin/python3</span><br><span class=\"line\">ln -s /usr/<span class=\"built_in\">local</span>/python3.7/bin/pip3.7 /usr/bin/pip3</span><br></pre></td></tr></table></figure>\n<p>这样子应该一切就搞定啦。<br>然而，事情好像没有那么简单。</p>\n<p>当我尝试使用 <code>pip3 install flask</code> 的时候，报错。</p>\n<h2 id=\"Error-OpenSSL-version\"><a href=\"#Error-OpenSSL-version\" class=\"headerlink\" title=\"Error - OpenSSL version\"></a>Error - OpenSSL version</h2><blockquote>\n<p>pip is configured with locations that require TLS/SSL, however the ssl module in Python is not available.</p>\n</blockquote>\n<p>前边说过，我的服务器系统是CentOS 6，默认的OpenSSL版本是1.0.1，而Python3.7需要OpenSSL1.0.2或者1.1.x才行，于是我们需要对OpenSSL进行升级并且重新编辑Pyton3.7。</p>\n<h2 id=\"升级OpenSSL\"><a href=\"#升级OpenSSL\" class=\"headerlink\" title=\"升级OpenSSL\"></a>升级OpenSSL</h2><p>下载最新版的OpenSSL</p>\n<p><code>wget https://www.openssl.org/source/openssl-1.1.1-pre8.tar.gz</code></p>\n<p>编译&amp;安装</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> openssl-1.1.1-pre8</span><br><span class=\"line\">./config --prefix=/usr/<span class=\"built_in\">local</span>/openssl no-zlib <span class=\"comment\">#不需要zlib</span></span><br><span class=\"line\">make &amp; make install</span><br></pre></td></tr></table></figure>\n<p>备份原配置</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv /usr/bin/openssl /usr/bin/openssl.bak</span><br><span class=\"line\">mv /usr/include/openssl/ /usr/include/openssl.bak</span><br></pre></td></tr></table></figure>\n<p>添加软链接</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /usr/<span class=\"built_in\">local</span>/openssl/include/openssl /usr/include/openssl</span><br><span class=\"line\">ln -s /usr/<span class=\"built_in\">local</span>/openssl/lib/libssl.so.1.1 /usr/<span class=\"built_in\">local</span>/lib64/libssl.so</span><br><span class=\"line\">ln -s /usr/<span class=\"built_in\">local</span>/openssl/bin/openssl /usr/bin/openssl</span><br></pre></td></tr></table></figure>\n<p>修改系统配置</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#写入openssl库文件的搜索路径</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"/usr/local/openssl/lib\"</span> &gt;&gt; /etc/ld.so.conf</span><br><span class=\"line\"><span class=\"comment\">#使修改后的/etc/ld.so.conf生效 </span></span><br><span class=\"line\">ldconfig -v</span><br></pre></td></tr></table></figure>\n<p>重新编译Python3.7</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> Python-3.7.1</span><br><span class=\"line\"><span class=\"comment\">#--prefix 是预期安装目录，--enable-optimizations 是优化选项（LTO，PGO 等）</span></span><br><span class=\"line\">./configure --prefix=/usr/<span class=\"built_in\">local</span>/python3.7 --<span class=\"built_in\">enable</span>-optimizations  --with-openssl=/usr/<span class=\"built_in\">local</span>/openssl</span><br><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<p><strong>至此，所有问题都解决了。</strong><br><strong>感想：Linux里的相关环境配置，真是一门大学问啊</strong></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><em><a href=\"https://blog.tanteng.me/2015/12/flask-sslcontext/\" target=\"_blank\" rel=\"noopener\">Flask安装: A true SSLContext object is not available</a></em><br><em><a href=\"https://segmentfault.com/a/1190000017313144\" target=\"_blank\" rel=\"noopener\">CentOS 7 下安装 Python3.7.1</a></em><br><em><a href=\"https://blog.51cto.com/13544424/2149473\" target=\"_blank\" rel=\"noopener\">python3.7安装后ssl问题</a></em></p>\n"},{"title":"Sublime Text 使用备忘","date":"2018-12-24T13:56:15.000Z","_content":"\n### 快捷键备忘\n\n* 【control+tab】：在tab之间切换\n* 【command+j】：合并两行\n* 【command+l】：选择当前行\n* 【command+enter】：下一行开辟新行\n* 【shift+command+enter】：上一行开辟新行\n* 【option+鼠标左键】：块选择并进入多点编辑模式\n* 【option+左右键】：移动一个单词（+shift 同时进行选择）\n* 【command+左右键】：行首行位切换\n* 【shift+command+p】：在命令中直接输入文档类型（如css等可直接切换）\n* 【shift+command+p】：reindent lines 代码风格缩进\n\n\n### 配置文件\n\n那么如何绑定快捷键呢，首先 `shift+command+p` 打开命令面板，输入`keybindings`，点击 `Key Bindings - User`，在配置文件中加入 `[{\"key\": [\"shift+tab\"], \"command\": \"reindent\", \"agrs\": {\"single_line\": false }},]`。\n\n那么如何知道具体命令是什么呢？\n可以通过 \n```\ncontrol+`\n``` \n打开工作台，在工作台中输入 `sublime.log_commands(True)`，然后再通过`shift+command+p`打开命令面板，输入 `reindent lines`, 就可以在下边的工作台中看到具体命令名及参数了。\n\n**那么所有的配置都保存到哪了呢？**\n\n可以点击左上角的 `Sublime Text - Preferences - browse Packages...`\n这个时候应该会打开到这个目录下 `~/Library/Application Support/Sublime Text 3/Packages`，具体的根据环境不同路径会不同。\n\n在该目录下，用户的所有配置项会存在`User`文件夹中，并且这些配置文件都是纯文本的，所以可以支持版本控制。\n\n除了这个之外，还有一些自定义项也可以通过 `shift+command+p` 打开命令面板，输入 `settings` 打开 `Preferences: Settings - User` 便可找到配置自定义配置项的配置文件了。\n\n### 使用Packages Control安装扩展包\n\n安装 `Packages Control` 的方法可以参考这个 [Installation - Package Control](https://packagecontrol.io/installation)\n\n官网上也有很多库可供选择。安装完`Packages Control`之后，包都会存放在 `~/Library/Application Support/Sublime Text 3/Packages` 里边的 `Installed Packages` 里。并且会在 `Packages/User` 里新加一个 `Packge Control.sublime-settings` 配置项。\n\n推荐的一些扩展包\n\n> `AdvancedNewFile`\n`Emmet`\n`Git`\n`Sass`\n`SublimeERB`\n`SyncedSideBar`\n\n### 快速查找\n\n正常情况下，可以通过 `command+p` 直接输入模糊搜索：\n\n> eg: 模糊搜索名+冒号+行号，如：`demo:10`，光标会直接停在第10行\n> eg: 搜索名@函数名会跳转到函数名，如：`demo@new`\n\n可以通过 `command+f` 在本文件中进行查找：\n\n> `enter`：搜索下一处；`shift+enter`：搜索上一处；`esc`：停在当前单词\n> `command+d` n次，可以同时编辑，并进入多点编辑\n\n要在文件夹下查找的话，需要在文件夹上右键，点击 `find in finder`，会把相应的内容记在一个文本里，按`F4`可以跳转到第一个查找项，或者也可以直接在文本里用鼠标双击打开。\n\n跳走了可以用 `control+-` 直接跳回去。\n如果跳多了，可以 `control+shift+-` 可以再进行回到上一级的操作。\n\n### Emmet\n\n牛逼！（todo）\n\n### 代码片段\n（todo）\n\n### 自动补齐\n（todo）\n\n/user下的 `damemon.sublime-completions`\n\nsublimeCodeIntel\n\n### build system\n（todo）\n\n","source":"_posts/sublimetext-remind.md","raw":"---\ntitle: Sublime Text 使用备忘\ndate: 2018-12-24 21:56:15\ntags: sublime text\n---\n\n### 快捷键备忘\n\n* 【control+tab】：在tab之间切换\n* 【command+j】：合并两行\n* 【command+l】：选择当前行\n* 【command+enter】：下一行开辟新行\n* 【shift+command+enter】：上一行开辟新行\n* 【option+鼠标左键】：块选择并进入多点编辑模式\n* 【option+左右键】：移动一个单词（+shift 同时进行选择）\n* 【command+左右键】：行首行位切换\n* 【shift+command+p】：在命令中直接输入文档类型（如css等可直接切换）\n* 【shift+command+p】：reindent lines 代码风格缩进\n\n\n### 配置文件\n\n那么如何绑定快捷键呢，首先 `shift+command+p` 打开命令面板，输入`keybindings`，点击 `Key Bindings - User`，在配置文件中加入 `[{\"key\": [\"shift+tab\"], \"command\": \"reindent\", \"agrs\": {\"single_line\": false }},]`。\n\n那么如何知道具体命令是什么呢？\n可以通过 \n```\ncontrol+`\n``` \n打开工作台，在工作台中输入 `sublime.log_commands(True)`，然后再通过`shift+command+p`打开命令面板，输入 `reindent lines`, 就可以在下边的工作台中看到具体命令名及参数了。\n\n**那么所有的配置都保存到哪了呢？**\n\n可以点击左上角的 `Sublime Text - Preferences - browse Packages...`\n这个时候应该会打开到这个目录下 `~/Library/Application Support/Sublime Text 3/Packages`，具体的根据环境不同路径会不同。\n\n在该目录下，用户的所有配置项会存在`User`文件夹中，并且这些配置文件都是纯文本的，所以可以支持版本控制。\n\n除了这个之外，还有一些自定义项也可以通过 `shift+command+p` 打开命令面板，输入 `settings` 打开 `Preferences: Settings - User` 便可找到配置自定义配置项的配置文件了。\n\n### 使用Packages Control安装扩展包\n\n安装 `Packages Control` 的方法可以参考这个 [Installation - Package Control](https://packagecontrol.io/installation)\n\n官网上也有很多库可供选择。安装完`Packages Control`之后，包都会存放在 `~/Library/Application Support/Sublime Text 3/Packages` 里边的 `Installed Packages` 里。并且会在 `Packages/User` 里新加一个 `Packge Control.sublime-settings` 配置项。\n\n推荐的一些扩展包\n\n> `AdvancedNewFile`\n`Emmet`\n`Git`\n`Sass`\n`SublimeERB`\n`SyncedSideBar`\n\n### 快速查找\n\n正常情况下，可以通过 `command+p` 直接输入模糊搜索：\n\n> eg: 模糊搜索名+冒号+行号，如：`demo:10`，光标会直接停在第10行\n> eg: 搜索名@函数名会跳转到函数名，如：`demo@new`\n\n可以通过 `command+f` 在本文件中进行查找：\n\n> `enter`：搜索下一处；`shift+enter`：搜索上一处；`esc`：停在当前单词\n> `command+d` n次，可以同时编辑，并进入多点编辑\n\n要在文件夹下查找的话，需要在文件夹上右键，点击 `find in finder`，会把相应的内容记在一个文本里，按`F4`可以跳转到第一个查找项，或者也可以直接在文本里用鼠标双击打开。\n\n跳走了可以用 `control+-` 直接跳回去。\n如果跳多了，可以 `control+shift+-` 可以再进行回到上一级的操作。\n\n### Emmet\n\n牛逼！（todo）\n\n### 代码片段\n（todo）\n\n### 自动补齐\n（todo）\n\n/user下的 `damemon.sublime-completions`\n\nsublimeCodeIntel\n\n### build system\n（todo）\n\n","slug":"sublimetext-remind","published":1,"updated":"2022-10-25T02:57:42.645Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9nmc48e000g8wwxxjy5yf38","content":"<h3 id=\"快捷键备忘\"><a href=\"#快捷键备忘\" class=\"headerlink\" title=\"快捷键备忘\"></a>快捷键备忘</h3><ul>\n<li>【control+tab】：在tab之间切换</li>\n<li>【command+j】：合并两行</li>\n<li>【command+l】：选择当前行</li>\n<li>【command+enter】：下一行开辟新行</li>\n<li>【shift+command+enter】：上一行开辟新行</li>\n<li>【option+鼠标左键】：块选择并进入多点编辑模式</li>\n<li>【option+左右键】：移动一个单词（+shift 同时进行选择）</li>\n<li>【command+左右键】：行首行位切换</li>\n<li>【shift+command+p】：在命令中直接输入文档类型（如css等可直接切换）</li>\n<li>【shift+command+p】：reindent lines 代码风格缩进</li>\n</ul>\n<h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><p>那么如何绑定快捷键呢，首先 <code>shift+command+p</code> 打开命令面板，输入<code>keybindings</code>，点击 <code>Key Bindings - User</code>，在配置文件中加入 <code>[{&quot;key&quot;: [&quot;shift+tab&quot;], &quot;command&quot;: &quot;reindent&quot;, &quot;agrs&quot;: {&quot;single_line&quot;: false }},]</code>。</p>\n<p>那么如何知道具体命令是什么呢？<br>可以通过 </p>\n<pre><code>control+`\n</code></pre><p>打开工作台，在工作台中输入 <code>sublime.log_commands(True)</code>，然后再通过<code>shift+command+p</code>打开命令面板，输入 <code>reindent lines</code>, 就可以在下边的工作台中看到具体命令名及参数了。</p>\n<p><strong>那么所有的配置都保存到哪了呢？</strong></p>\n<p>可以点击左上角的 <code>Sublime Text - Preferences - browse Packages...</code><br>这个时候应该会打开到这个目录下 <code>~/Library/Application Support/Sublime Text 3/Packages</code>，具体的根据环境不同路径会不同。</p>\n<p>在该目录下，用户的所有配置项会存在<code>User</code>文件夹中，并且这些配置文件都是纯文本的，所以可以支持版本控制。</p>\n<p>除了这个之外，还有一些自定义项也可以通过 <code>shift+command+p</code> 打开命令面板，输入 <code>settings</code> 打开 <code>Preferences: Settings - User</code> 便可找到配置自定义配置项的配置文件了。</p>\n<h3 id=\"使用Packages-Control安装扩展包\"><a href=\"#使用Packages-Control安装扩展包\" class=\"headerlink\" title=\"使用Packages Control安装扩展包\"></a>使用Packages Control安装扩展包</h3><p>安装 <code>Packages Control</code> 的方法可以参考这个 <a href=\"https://packagecontrol.io/installation\" target=\"_blank\" rel=\"noopener\">Installation - Package Control</a></p>\n<p>官网上也有很多库可供选择。安装完<code>Packages Control</code>之后，包都会存放在 <code>~/Library/Application Support/Sublime Text 3/Packages</code> 里边的 <code>Installed Packages</code> 里。并且会在 <code>Packages/User</code> 里新加一个 <code>Packge Control.sublime-settings</code> 配置项。</p>\n<p>推荐的一些扩展包</p>\n<blockquote>\n<p><code>AdvancedNewFile</code><br><code>Emmet</code><br><code>Git</code><br><code>Sass</code><br><code>SublimeERB</code><br><code>SyncedSideBar</code></p>\n</blockquote>\n<h3 id=\"快速查找\"><a href=\"#快速查找\" class=\"headerlink\" title=\"快速查找\"></a>快速查找</h3><p>正常情况下，可以通过 <code>command+p</code> 直接输入模糊搜索：</p>\n<blockquote>\n<p>eg: 模糊搜索名+冒号+行号，如：<code>demo:10</code>，光标会直接停在第10行<br>eg: 搜索名@函数名会跳转到函数名，如：<code>demo@new</code></p>\n</blockquote>\n<p>可以通过 <code>command+f</code> 在本文件中进行查找：</p>\n<blockquote>\n<p><code>enter</code>：搜索下一处；<code>shift+enter</code>：搜索上一处；<code>esc</code>：停在当前单词<br><code>command+d</code> n次，可以同时编辑，并进入多点编辑</p>\n</blockquote>\n<p>要在文件夹下查找的话，需要在文件夹上右键，点击 <code>find in finder</code>，会把相应的内容记在一个文本里，按<code>F4</code>可以跳转到第一个查找项，或者也可以直接在文本里用鼠标双击打开。</p>\n<p>跳走了可以用 <code>control+-</code> 直接跳回去。<br>如果跳多了，可以 <code>control+shift+-</code> 可以再进行回到上一级的操作。</p>\n<h3 id=\"Emmet\"><a href=\"#Emmet\" class=\"headerlink\" title=\"Emmet\"></a>Emmet</h3><p>牛逼！（todo）</p>\n<h3 id=\"代码片段\"><a href=\"#代码片段\" class=\"headerlink\" title=\"代码片段\"></a>代码片段</h3><p>（todo）</p>\n<h3 id=\"自动补齐\"><a href=\"#自动补齐\" class=\"headerlink\" title=\"自动补齐\"></a>自动补齐</h3><p>（todo）</p>\n<p>/user下的 <code>damemon.sublime-completions</code></p>\n<p>sublimeCodeIntel</p>\n<h3 id=\"build-system\"><a href=\"#build-system\" class=\"headerlink\" title=\"build system\"></a>build system</h3><p>（todo）</p>\n","site":{"data":{"links":{"Colin’s Nest":{"link":"http://colin1994.github.io/","avatar":"http://example.com/avatar.png"},"Vong":{"link":"https://vongloo.me/","avatar":"http://example.com/avatar.png"},"Punmy":{"link":"https://punmy.cn/","avatar":"http://example.com/avatar.png"},"细语呢喃":{"link":"https://www.hrwhisper.me/","avatar":"http://example.com/avatar.png"},"栖迟于一丘":{"link":"https://www.hongweipeng.com/","avatar":"http://example.com/avatar.png"},"B1ueW01f":{"link":"https://www.b1uew01f.net/","avatar":"http://example.com/avatar.png"},"忘归":{"link":"http://jalan.space/","avatar":"http://example.com/avatar.png"},"进阶者":{"link":"https://ruphi.cn/","avatar":"http://example.com/avatar.png"},"LIZIMEOW'S BLOG":{"link":"http://lizimeow.cn/","avatar":"http://example.com/avatar.png"},"Saitjr":{"link":"http://www.saitjr.com/","avatar":null}}}},"excerpt":"","more":"<h3 id=\"快捷键备忘\"><a href=\"#快捷键备忘\" class=\"headerlink\" title=\"快捷键备忘\"></a>快捷键备忘</h3><ul>\n<li>【control+tab】：在tab之间切换</li>\n<li>【command+j】：合并两行</li>\n<li>【command+l】：选择当前行</li>\n<li>【command+enter】：下一行开辟新行</li>\n<li>【shift+command+enter】：上一行开辟新行</li>\n<li>【option+鼠标左键】：块选择并进入多点编辑模式</li>\n<li>【option+左右键】：移动一个单词（+shift 同时进行选择）</li>\n<li>【command+左右键】：行首行位切换</li>\n<li>【shift+command+p】：在命令中直接输入文档类型（如css等可直接切换）</li>\n<li>【shift+command+p】：reindent lines 代码风格缩进</li>\n</ul>\n<h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><p>那么如何绑定快捷键呢，首先 <code>shift+command+p</code> 打开命令面板，输入<code>keybindings</code>，点击 <code>Key Bindings - User</code>，在配置文件中加入 <code>[{&quot;key&quot;: [&quot;shift+tab&quot;], &quot;command&quot;: &quot;reindent&quot;, &quot;agrs&quot;: {&quot;single_line&quot;: false }},]</code>。</p>\n<p>那么如何知道具体命令是什么呢？<br>可以通过 </p>\n<pre><code>control+`\n</code></pre><p>打开工作台，在工作台中输入 <code>sublime.log_commands(True)</code>，然后再通过<code>shift+command+p</code>打开命令面板，输入 <code>reindent lines</code>, 就可以在下边的工作台中看到具体命令名及参数了。</p>\n<p><strong>那么所有的配置都保存到哪了呢？</strong></p>\n<p>可以点击左上角的 <code>Sublime Text - Preferences - browse Packages...</code><br>这个时候应该会打开到这个目录下 <code>~/Library/Application Support/Sublime Text 3/Packages</code>，具体的根据环境不同路径会不同。</p>\n<p>在该目录下，用户的所有配置项会存在<code>User</code>文件夹中，并且这些配置文件都是纯文本的，所以可以支持版本控制。</p>\n<p>除了这个之外，还有一些自定义项也可以通过 <code>shift+command+p</code> 打开命令面板，输入 <code>settings</code> 打开 <code>Preferences: Settings - User</code> 便可找到配置自定义配置项的配置文件了。</p>\n<h3 id=\"使用Packages-Control安装扩展包\"><a href=\"#使用Packages-Control安装扩展包\" class=\"headerlink\" title=\"使用Packages Control安装扩展包\"></a>使用Packages Control安装扩展包</h3><p>安装 <code>Packages Control</code> 的方法可以参考这个 <a href=\"https://packagecontrol.io/installation\" target=\"_blank\" rel=\"noopener\">Installation - Package Control</a></p>\n<p>官网上也有很多库可供选择。安装完<code>Packages Control</code>之后，包都会存放在 <code>~/Library/Application Support/Sublime Text 3/Packages</code> 里边的 <code>Installed Packages</code> 里。并且会在 <code>Packages/User</code> 里新加一个 <code>Packge Control.sublime-settings</code> 配置项。</p>\n<p>推荐的一些扩展包</p>\n<blockquote>\n<p><code>AdvancedNewFile</code><br><code>Emmet</code><br><code>Git</code><br><code>Sass</code><br><code>SublimeERB</code><br><code>SyncedSideBar</code></p>\n</blockquote>\n<h3 id=\"快速查找\"><a href=\"#快速查找\" class=\"headerlink\" title=\"快速查找\"></a>快速查找</h3><p>正常情况下，可以通过 <code>command+p</code> 直接输入模糊搜索：</p>\n<blockquote>\n<p>eg: 模糊搜索名+冒号+行号，如：<code>demo:10</code>，光标会直接停在第10行<br>eg: 搜索名@函数名会跳转到函数名，如：<code>demo@new</code></p>\n</blockquote>\n<p>可以通过 <code>command+f</code> 在本文件中进行查找：</p>\n<blockquote>\n<p><code>enter</code>：搜索下一处；<code>shift+enter</code>：搜索上一处；<code>esc</code>：停在当前单词<br><code>command+d</code> n次，可以同时编辑，并进入多点编辑</p>\n</blockquote>\n<p>要在文件夹下查找的话，需要在文件夹上右键，点击 <code>find in finder</code>，会把相应的内容记在一个文本里，按<code>F4</code>可以跳转到第一个查找项，或者也可以直接在文本里用鼠标双击打开。</p>\n<p>跳走了可以用 <code>control+-</code> 直接跳回去。<br>如果跳多了，可以 <code>control+shift+-</code> 可以再进行回到上一级的操作。</p>\n<h3 id=\"Emmet\"><a href=\"#Emmet\" class=\"headerlink\" title=\"Emmet\"></a>Emmet</h3><p>牛逼！（todo）</p>\n<h3 id=\"代码片段\"><a href=\"#代码片段\" class=\"headerlink\" title=\"代码片段\"></a>代码片段</h3><p>（todo）</p>\n<h3 id=\"自动补齐\"><a href=\"#自动补齐\" class=\"headerlink\" title=\"自动补齐\"></a>自动补齐</h3><p>（todo）</p>\n<p>/user下的 <code>damemon.sublime-completions</code></p>\n<p>sublimeCodeIntel</p>\n<h3 id=\"build-system\"><a href=\"#build-system\" class=\"headerlink\" title=\"build system\"></a>build system</h3><p>（todo）</p>\n"},{"title":"探究使用Method Swizzling的正确姿势","date":"2019-03-01T03:07:43.000Z","_content":"\n## 背景\n\n初次接触到OC runtime机制的时候，应该都会被其黑魔法所折服。特别是在使用了Method Swizzling来hook某一个方法，改变一个已经存在的 selector 的实现的时候，实现AOP统计打点、APM检测、... 都成为了可能。\n\n## 危害\n\n然而，**越是强大的力量，背后往往会隐藏着更大的危险。**\n\n在Stackoverflow上，有一篇文章：[《What are the Dangers of Method Swizzling in Objective C?》](https://stackoverflow.com/questions/5339276/what-are-the-dangers-of-method-swizzling-in-objective-c?answertab=active#tab-top)，里面已经把OC中方法交换的危险描述得非常清楚了，这里做个简要的概述。\n\n### 1. Method swizzling并非是原子操作\n\n其实95%的场景下，使用 Method Swizzling 都是安全的。因为我们一般希望在整个APP的生命周期里方法的替换是有效的，所以我们会在 `+(void)load` 方法里执行一系列的操作， 这个情况下是不会遇到并发问题的。但是如果不小心将代码写到了 `+(void)initialize` 中，就会有可能出现非常诡异的情况。\n> 其实也应该尽可能少的在 `+(void)initialize` 中做操作，否则会影响启动速度。\n\n### 2. 会更改到并非是我们自身代码的实现\n\n其实这个也是想一下就能明白的问题。如果你在没搞清楚状况的情况下去进行方法替换，可能会影响到其他人的代码。特别是，如果重写了一个类的方法时，却没有调用父类的方法，可能就会出现问题。因此为了避免可能出现的未知情况，我们最好还是要在替换方法实现里调用一下原始实现。\n\n### 3. 可能会存在命名冲突\n\n在 Method Swizzling 的时候，我们一般会在新的方法前加上一个前缀。\n\n如:\n\n```objc\n- (void)my_setFrame:(NSRect)frame {  \n    // do custom work  \n    [self my_setFrame:frame];  \n}  \n```\n\n但是这样有一个问题，就是万一有某一个地方，也定义了 `- (void)my_setFrame:(NSRect)frame` 这个名字的方法，就可能出现问题。\n\n因此最好的解决方式还是在于使用函数指针来解决这个问题（不过这样代码看起来就不那么OC了）。\n\n```objc\n@implementation NSView (MyViewAdditions)  \n  \n  \nstatic void MySetFrame(id self, SEL _cmd, NSRect frame);  \nstatic void (*SetFrameIMP)(id self, SEL _cmd, NSRect frame);  \n  \n  \nstatic void MySetFrame(id self, SEL _cmd, NSRect frame) {  \n    // do custom work  \n    SetFrameIMP(self, _cmd, frame);  \n}  \n  \n  \n+ (void)load {  \n    [self swizzle:@selector(setFrame:) with:(IMP)MySetFrame store:(IMP *)&SetFrameIMP];  \n}  \n  \n  \n@end  \n```\n\n作者也给出了一个比较完美的swizzle方法的定义：\n\n```objc\ntypedef IMP *IMPPointer;  \n  \n  \nBOOL class_swizzleMethodAndStore(Class class, SEL original, IMP replacement, IMPPointer store) {  \n    IMP imp = NULL;  \n    Method method = class_getInstanceMethod(class, original);  \n    if (method) {  \n        const char *type = method_getTypeEncoding(method);  \n        imp = class_replaceMethod(class, original, replacement, type);  \n        if (!imp) {  \n            imp = method_getImplementation(method);  \n        }  \n    }  \n    if (imp && store) { *store = imp; }  \n    return (imp != NULL);  \n}  \n  \n  \n@implementation NSObject (FRRuntimeAdditions)  \n+ (BOOL)swizzle:(SEL)original with:(IMP)replacement store:(IMPPointer)store {  \n    return class_swizzleMethodAndStore(self, original, replacement, store);  \n}  \n@end  \n```\n\n### 4. 会改变方法的参数\n\n作者认为这是一个最大的问题。当你替换了一个方法之后，其实你也替换了传入原始方法实现的参数。\n\n```objc\n[self my_setFrame:frame];\n```\n\n这一行做的事情是：\n\n```objc\nobjc_msgSend(self, @selector(my_setFrame:), frame);\n```\n\nruntime会去寻找 `my_setFrame:` 的实现，一旦找到了，就会把 `my_setFrame` 和 `frame` 传入，但其实这个时候找到的方法应该是原始的 `setFrame:`，于是当它被调用的时候，`_cmd` 这个参数并不是预期 `setFrame:`，而是 `my_setFrame`，这样就接收了一个意料之外的参数。\n\n最好的方式还是使用如上的定义。\n\n### 5. 方法交换带来的顺序问题\n\n当对多个类进行方法交换的时候，要注意顺序，特别是有父子类关系的时候。\n比如：\n\n```objc\n[NSButton swizzle:@selector(setFrame:) with:@selector(my_buttonSetFrame:)];\n[NSControl swizzle:@selector(setFrame:) with:@selector(my_controlSetFrame:)];\n[NSView swizzle:@selector(setFrame:) with:@selector(my_viewSetFrame:)];\n```\n\n上述的实现，其实最终当你调用 `NSButton` 的 `setFrame` 的时候，会调用你替换的 `my_buttonSetFrame` 方法和 `NSView` 的原始的 `setFrame` 的方法。\n\n相反的，如果顺序是这样的话：\n\n```objc\n[NSView swizzle:@selector(setFrame:) with:@selector(my_viewSetFrame:)];\n[NSControl swizzle:@selector(setFrame:) with:@selector(my_controlSetFrame:)];\n[NSButton swizzle:@selector(setFrame:) with:@selector(my_buttonSetFrame:)];\n```\n\n就会分别调用 `NSButton` 、 `NSControl` 和 `NSView` 的交换后的方法，这个顺序应该来说才是正确的。\n\n所以其实这边还是建议在 `+(void)load` 方法里做方法交换，它可以保证父类的load方法在子类的方法调用前先调用，不会出错。\n\n### 6. 会带来很多理解和调试上的不便\n\n这个就不用多说了，特别是没有文档的时候。有时候要是遇到同事写在某一个角落里的runtime操作但是没人知道的话，搞出了一些无法预见的问题，调试起来就很是蛋疼。\n\n## 正确姿势\n\n所以正确的 Method Swizzling 的姿势是什么呢？\n\n### ①\n\n 如上面的作者一直强调的，**在load里进行方法替换**\n\n### ② \n\n其实上面作者给出的 `swizzle完美定义` 已经是比较正确的姿势了。但是这里也记录下另一个问题。\n\n网上一部分的文章，都会讲到，通过 Category 实现 Method Swizzling 的例子如下：\n\n```objc\n#import <objc/runtime.h>\n\n@implementation UIViewController (Tracking)\n\n+ (void)load {\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        Class class = [self class];\n\n        SEL originalSelector = @selector(viewWillAppear:);\n        SEL swizzledSelector = @selector(xxx_viewWillAppear:);\n\n        Method originalMethod = class_getInstanceMethod(class, originalSelector);\n        Method swizzledMethod = class_getInstanceMethod(class, swizzledSelector);\n\n        // When swizzling a class method, use the following:\n        // Class class = object_getClass((id)self);\n        // ...\n        // Method originalMethod = class_getClassMethod(class, originalSelector);\n        // Method swizzledMethod = class_getClassMethod(class, swizzledSelector);\n\n        BOOL didAddMethod =\n            class_addMethod(class,\n                originalSelector,\n                method_getImplementation(swizzledMethod),\n                method_getTypeEncoding(swizzledMethod));\n\n        if (didAddMethod) {\n            class_replaceMethod(class,\n                swizzledSelector,\n                method_getImplementation(originalMethod),\n                method_getTypeEncoding(originalMethod));\n        } else {\n            method_exchangeImplementations(originalMethod, swizzledMethod);\n        }\n    });\n}\n\n#pragma mark - Method Swizzling\n\n- (void)xxx_viewWillAppear:(BOOL)animated {\n    [self xxx_viewWillAppear:animated];\n    NSLog(@\"viewWillAppear: %@\", self);\n}\n\n@end\n```\n\n然而这里有一点不够严谨，也是之前有提到的危险性所在，origin_imp 如果使用了 _cmd 参数，hook之后的_cmd 是不符合预期的。\n\n假设我们现在要hook `- (void)touchesBegan:(NSSet<UITouch *> *)touches withEvent:(UIEvent *)event;` \n\n那么如果如上那么实现的话，在 `[self xxx_touchesBegan:touches withEvent:event];` 就会崩溃。原因是这个函数里有 `forwardTouchMethod`, 反汇编后实现类似：\n\n```objc\nstatic void forwardTouchMethod(id self, SEL _cmd, NSSet *touches, UIEvent *event) {\n  // The responder chain is used to figure out where to send the next touch\n    UIResponder *nextResponder = [self nextResponder];\n    if (nextResponder && nextResponder != self) {\n      // Not all touches are forwarded - so we filter here.\n        NSMutableSet *filteredTouches = [NSMutableSet set];\n        [touches enumerateObjectsUsingBlock:^(UITouch *touch, BOOL *stop) {\n          // Checks every touch for forwarding requirements.\n            if ([touch _wantsForwardingFromResponder:self toNextResponder:nextResponder withEvent:event]) {\n                [filteredTouches addObject:touch];\n            }else {\n              // This is interesting legacy behavior. Before iOS 5, all touches are forwarded (and this is logged)\n                if (!_UIApplicationLinkedOnOrAfter(12)) {\n                    [filteredTouches addObject:touch];\n                    // Log old behavior\n                    static BOOL didLog = 0;\n                    if (!didLog) {\n                        NSLog(@\"Pre-iOS 5.0 touch delivery method forwarding relied upon. Forwarding -%@ to %@.\", NSStringFromSelector(_cmd), nextResponder);\n                    }\n                }\n            }\n        }];\n        // here we basically call [nextResponder touchesBegan:filteredTouches event:event];\n        [nextResponder performSelector:_cmd withObject:filteredTouches withObject:event];\n    }\n}\n```\n\n如果我们exchange了 IMP, `[nextResponder performSelector:_cmd withObject:filteredTouches withObject:event];` 是没有相应的实现的，_cmd 就变成了 我们替换的 SEL。 显然，nextResponder没有实现相应的方法，就会crash。\n\n那么这里可以这么写：\n\n```objc\nstatic IMP __original_TouchesBegan_Method_Imp;\n\n\n@implementation UIView (Debug)\n\n+ (void)load {\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        Class class = [self class];\n        \n        SEL originalSelector = @selector(touchesBegan:withEvent:);\n        SEL swizzledSelector = @selector(dae_touchesBegan:withEvent:);\n        \n        Method originalMethod = class_getInstanceMethod(class, originalSelector);\n        Method swizzledMethod = class_getInstanceMethod(class, swizzledSelector);\n        \n        __original_TouchesBegan_Method_Imp = method_getImplementation(originalMethod);\n        \n        BOOL didAddMethod =\n        class_addMethod(class,\n                        originalSelector,\n                        method_getImplementation(swizzledMethod),\n                        method_getTypeEncoding(swizzledMethod));\n        \n        if (didAddMethod) {\n            class_replaceMethod(class,\n                                swizzledSelector,\n                                method_getImplementation(originalMethod),\n                                method_getTypeEncoding(originalMethod));\n        } else {\n            method_exchangeImplementations(originalMethod, swizzledMethod);\n        }\n    });\n}\n\n- (void)dae_touchesBegan:(NSSet<UITouch *> *)touches withEvent:(UIEvent *)event {\n    // custom \n    \n     void (*functionPointer)(id, SEL, NSSet<UITouch *> *, UIEvent *) = (void(*)(id, SEL, NSSet<UITouch *> *, UIEvent*))__original_TouchesBegan_Method_Imp;\n        \n    functionPointer(self, _cmd, touches, event);\n}\n\n```\n\n这样就能找到正确的IMP了。\n\n\n## 参考链接\n\n[Method Swizzling 的正确途径](https://junyixie.github.io/2017/12/04/safeSwizzleRSSwizzleAnalyze/#%E9%87%87%E7%94%A8Block%E6%B7%BB%E5%8A%A0%E5%AE%9E%E7%8E%B0%EF%BC%8C%E6%B2%A1%E6%9C%89%E5%91%BD%E5%90%8D%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98)\n[The Right Way to Swizzle in Objective-C](https://blog.newrelic.com/engineering/right-way-to-swizzle/)\n[What are the Dangers of Method Swizzling in Objective C?](https://stackoverflow.com/questions/5339276/what-are-the-dangers-of-method-swizzling-in-objective-c?answertab=active#tab-top)\n\n\n","source":"_posts/the-right-way-to-swizzling.md","raw":"---\ntitle: 探究使用Method Swizzling的正确姿势\ndate: 2019-03-01 11:07:43\ntags: \n- Runtime\n- iOS\n- Objective-C\n- Method Swizzling\n---\n\n## 背景\n\n初次接触到OC runtime机制的时候，应该都会被其黑魔法所折服。特别是在使用了Method Swizzling来hook某一个方法，改变一个已经存在的 selector 的实现的时候，实现AOP统计打点、APM检测、... 都成为了可能。\n\n## 危害\n\n然而，**越是强大的力量，背后往往会隐藏着更大的危险。**\n\n在Stackoverflow上，有一篇文章：[《What are the Dangers of Method Swizzling in Objective C?》](https://stackoverflow.com/questions/5339276/what-are-the-dangers-of-method-swizzling-in-objective-c?answertab=active#tab-top)，里面已经把OC中方法交换的危险描述得非常清楚了，这里做个简要的概述。\n\n### 1. Method swizzling并非是原子操作\n\n其实95%的场景下，使用 Method Swizzling 都是安全的。因为我们一般希望在整个APP的生命周期里方法的替换是有效的，所以我们会在 `+(void)load` 方法里执行一系列的操作， 这个情况下是不会遇到并发问题的。但是如果不小心将代码写到了 `+(void)initialize` 中，就会有可能出现非常诡异的情况。\n> 其实也应该尽可能少的在 `+(void)initialize` 中做操作，否则会影响启动速度。\n\n### 2. 会更改到并非是我们自身代码的实现\n\n其实这个也是想一下就能明白的问题。如果你在没搞清楚状况的情况下去进行方法替换，可能会影响到其他人的代码。特别是，如果重写了一个类的方法时，却没有调用父类的方法，可能就会出现问题。因此为了避免可能出现的未知情况，我们最好还是要在替换方法实现里调用一下原始实现。\n\n### 3. 可能会存在命名冲突\n\n在 Method Swizzling 的时候，我们一般会在新的方法前加上一个前缀。\n\n如:\n\n```objc\n- (void)my_setFrame:(NSRect)frame {  \n    // do custom work  \n    [self my_setFrame:frame];  \n}  \n```\n\n但是这样有一个问题，就是万一有某一个地方，也定义了 `- (void)my_setFrame:(NSRect)frame` 这个名字的方法，就可能出现问题。\n\n因此最好的解决方式还是在于使用函数指针来解决这个问题（不过这样代码看起来就不那么OC了）。\n\n```objc\n@implementation NSView (MyViewAdditions)  \n  \n  \nstatic void MySetFrame(id self, SEL _cmd, NSRect frame);  \nstatic void (*SetFrameIMP)(id self, SEL _cmd, NSRect frame);  \n  \n  \nstatic void MySetFrame(id self, SEL _cmd, NSRect frame) {  \n    // do custom work  \n    SetFrameIMP(self, _cmd, frame);  \n}  \n  \n  \n+ (void)load {  \n    [self swizzle:@selector(setFrame:) with:(IMP)MySetFrame store:(IMP *)&SetFrameIMP];  \n}  \n  \n  \n@end  \n```\n\n作者也给出了一个比较完美的swizzle方法的定义：\n\n```objc\ntypedef IMP *IMPPointer;  \n  \n  \nBOOL class_swizzleMethodAndStore(Class class, SEL original, IMP replacement, IMPPointer store) {  \n    IMP imp = NULL;  \n    Method method = class_getInstanceMethod(class, original);  \n    if (method) {  \n        const char *type = method_getTypeEncoding(method);  \n        imp = class_replaceMethod(class, original, replacement, type);  \n        if (!imp) {  \n            imp = method_getImplementation(method);  \n        }  \n    }  \n    if (imp && store) { *store = imp; }  \n    return (imp != NULL);  \n}  \n  \n  \n@implementation NSObject (FRRuntimeAdditions)  \n+ (BOOL)swizzle:(SEL)original with:(IMP)replacement store:(IMPPointer)store {  \n    return class_swizzleMethodAndStore(self, original, replacement, store);  \n}  \n@end  \n```\n\n### 4. 会改变方法的参数\n\n作者认为这是一个最大的问题。当你替换了一个方法之后，其实你也替换了传入原始方法实现的参数。\n\n```objc\n[self my_setFrame:frame];\n```\n\n这一行做的事情是：\n\n```objc\nobjc_msgSend(self, @selector(my_setFrame:), frame);\n```\n\nruntime会去寻找 `my_setFrame:` 的实现，一旦找到了，就会把 `my_setFrame` 和 `frame` 传入，但其实这个时候找到的方法应该是原始的 `setFrame:`，于是当它被调用的时候，`_cmd` 这个参数并不是预期 `setFrame:`，而是 `my_setFrame`，这样就接收了一个意料之外的参数。\n\n最好的方式还是使用如上的定义。\n\n### 5. 方法交换带来的顺序问题\n\n当对多个类进行方法交换的时候，要注意顺序，特别是有父子类关系的时候。\n比如：\n\n```objc\n[NSButton swizzle:@selector(setFrame:) with:@selector(my_buttonSetFrame:)];\n[NSControl swizzle:@selector(setFrame:) with:@selector(my_controlSetFrame:)];\n[NSView swizzle:@selector(setFrame:) with:@selector(my_viewSetFrame:)];\n```\n\n上述的实现，其实最终当你调用 `NSButton` 的 `setFrame` 的时候，会调用你替换的 `my_buttonSetFrame` 方法和 `NSView` 的原始的 `setFrame` 的方法。\n\n相反的，如果顺序是这样的话：\n\n```objc\n[NSView swizzle:@selector(setFrame:) with:@selector(my_viewSetFrame:)];\n[NSControl swizzle:@selector(setFrame:) with:@selector(my_controlSetFrame:)];\n[NSButton swizzle:@selector(setFrame:) with:@selector(my_buttonSetFrame:)];\n```\n\n就会分别调用 `NSButton` 、 `NSControl` 和 `NSView` 的交换后的方法，这个顺序应该来说才是正确的。\n\n所以其实这边还是建议在 `+(void)load` 方法里做方法交换，它可以保证父类的load方法在子类的方法调用前先调用，不会出错。\n\n### 6. 会带来很多理解和调试上的不便\n\n这个就不用多说了，特别是没有文档的时候。有时候要是遇到同事写在某一个角落里的runtime操作但是没人知道的话，搞出了一些无法预见的问题，调试起来就很是蛋疼。\n\n## 正确姿势\n\n所以正确的 Method Swizzling 的姿势是什么呢？\n\n### ①\n\n 如上面的作者一直强调的，**在load里进行方法替换**\n\n### ② \n\n其实上面作者给出的 `swizzle完美定义` 已经是比较正确的姿势了。但是这里也记录下另一个问题。\n\n网上一部分的文章，都会讲到，通过 Category 实现 Method Swizzling 的例子如下：\n\n```objc\n#import <objc/runtime.h>\n\n@implementation UIViewController (Tracking)\n\n+ (void)load {\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        Class class = [self class];\n\n        SEL originalSelector = @selector(viewWillAppear:);\n        SEL swizzledSelector = @selector(xxx_viewWillAppear:);\n\n        Method originalMethod = class_getInstanceMethod(class, originalSelector);\n        Method swizzledMethod = class_getInstanceMethod(class, swizzledSelector);\n\n        // When swizzling a class method, use the following:\n        // Class class = object_getClass((id)self);\n        // ...\n        // Method originalMethod = class_getClassMethod(class, originalSelector);\n        // Method swizzledMethod = class_getClassMethod(class, swizzledSelector);\n\n        BOOL didAddMethod =\n            class_addMethod(class,\n                originalSelector,\n                method_getImplementation(swizzledMethod),\n                method_getTypeEncoding(swizzledMethod));\n\n        if (didAddMethod) {\n            class_replaceMethod(class,\n                swizzledSelector,\n                method_getImplementation(originalMethod),\n                method_getTypeEncoding(originalMethod));\n        } else {\n            method_exchangeImplementations(originalMethod, swizzledMethod);\n        }\n    });\n}\n\n#pragma mark - Method Swizzling\n\n- (void)xxx_viewWillAppear:(BOOL)animated {\n    [self xxx_viewWillAppear:animated];\n    NSLog(@\"viewWillAppear: %@\", self);\n}\n\n@end\n```\n\n然而这里有一点不够严谨，也是之前有提到的危险性所在，origin_imp 如果使用了 _cmd 参数，hook之后的_cmd 是不符合预期的。\n\n假设我们现在要hook `- (void)touchesBegan:(NSSet<UITouch *> *)touches withEvent:(UIEvent *)event;` \n\n那么如果如上那么实现的话，在 `[self xxx_touchesBegan:touches withEvent:event];` 就会崩溃。原因是这个函数里有 `forwardTouchMethod`, 反汇编后实现类似：\n\n```objc\nstatic void forwardTouchMethod(id self, SEL _cmd, NSSet *touches, UIEvent *event) {\n  // The responder chain is used to figure out where to send the next touch\n    UIResponder *nextResponder = [self nextResponder];\n    if (nextResponder && nextResponder != self) {\n      // Not all touches are forwarded - so we filter here.\n        NSMutableSet *filteredTouches = [NSMutableSet set];\n        [touches enumerateObjectsUsingBlock:^(UITouch *touch, BOOL *stop) {\n          // Checks every touch for forwarding requirements.\n            if ([touch _wantsForwardingFromResponder:self toNextResponder:nextResponder withEvent:event]) {\n                [filteredTouches addObject:touch];\n            }else {\n              // This is interesting legacy behavior. Before iOS 5, all touches are forwarded (and this is logged)\n                if (!_UIApplicationLinkedOnOrAfter(12)) {\n                    [filteredTouches addObject:touch];\n                    // Log old behavior\n                    static BOOL didLog = 0;\n                    if (!didLog) {\n                        NSLog(@\"Pre-iOS 5.0 touch delivery method forwarding relied upon. Forwarding -%@ to %@.\", NSStringFromSelector(_cmd), nextResponder);\n                    }\n                }\n            }\n        }];\n        // here we basically call [nextResponder touchesBegan:filteredTouches event:event];\n        [nextResponder performSelector:_cmd withObject:filteredTouches withObject:event];\n    }\n}\n```\n\n如果我们exchange了 IMP, `[nextResponder performSelector:_cmd withObject:filteredTouches withObject:event];` 是没有相应的实现的，_cmd 就变成了 我们替换的 SEL。 显然，nextResponder没有实现相应的方法，就会crash。\n\n那么这里可以这么写：\n\n```objc\nstatic IMP __original_TouchesBegan_Method_Imp;\n\n\n@implementation UIView (Debug)\n\n+ (void)load {\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        Class class = [self class];\n        \n        SEL originalSelector = @selector(touchesBegan:withEvent:);\n        SEL swizzledSelector = @selector(dae_touchesBegan:withEvent:);\n        \n        Method originalMethod = class_getInstanceMethod(class, originalSelector);\n        Method swizzledMethod = class_getInstanceMethod(class, swizzledSelector);\n        \n        __original_TouchesBegan_Method_Imp = method_getImplementation(originalMethod);\n        \n        BOOL didAddMethod =\n        class_addMethod(class,\n                        originalSelector,\n                        method_getImplementation(swizzledMethod),\n                        method_getTypeEncoding(swizzledMethod));\n        \n        if (didAddMethod) {\n            class_replaceMethod(class,\n                                swizzledSelector,\n                                method_getImplementation(originalMethod),\n                                method_getTypeEncoding(originalMethod));\n        } else {\n            method_exchangeImplementations(originalMethod, swizzledMethod);\n        }\n    });\n}\n\n- (void)dae_touchesBegan:(NSSet<UITouch *> *)touches withEvent:(UIEvent *)event {\n    // custom \n    \n     void (*functionPointer)(id, SEL, NSSet<UITouch *> *, UIEvent *) = (void(*)(id, SEL, NSSet<UITouch *> *, UIEvent*))__original_TouchesBegan_Method_Imp;\n        \n    functionPointer(self, _cmd, touches, event);\n}\n\n```\n\n这样就能找到正确的IMP了。\n\n\n## 参考链接\n\n[Method Swizzling 的正确途径](https://junyixie.github.io/2017/12/04/safeSwizzleRSSwizzleAnalyze/#%E9%87%87%E7%94%A8Block%E6%B7%BB%E5%8A%A0%E5%AE%9E%E7%8E%B0%EF%BC%8C%E6%B2%A1%E6%9C%89%E5%91%BD%E5%90%8D%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98)\n[The Right Way to Swizzle in Objective-C](https://blog.newrelic.com/engineering/right-way-to-swizzle/)\n[What are the Dangers of Method Swizzling in Objective C?](https://stackoverflow.com/questions/5339276/what-are-the-dangers-of-method-swizzling-in-objective-c?answertab=active#tab-top)\n\n\n","slug":"the-right-way-to-swizzling","published":1,"updated":"2022-10-25T02:57:42.646Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9nmc48g000i8wwxc5rhbbip","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>初次接触到OC runtime机制的时候，应该都会被其黑魔法所折服。特别是在使用了Method Swizzling来hook某一个方法，改变一个已经存在的 selector 的实现的时候，实现AOP统计打点、APM检测、… 都成为了可能。</p>\n<h2 id=\"危害\"><a href=\"#危害\" class=\"headerlink\" title=\"危害\"></a>危害</h2><p>然而，<strong>越是强大的力量，背后往往会隐藏着更大的危险。</strong></p>\n<p>在Stackoverflow上，有一篇文章：<a href=\"https://stackoverflow.com/questions/5339276/what-are-the-dangers-of-method-swizzling-in-objective-c?answertab=active#tab-top\" target=\"_blank\" rel=\"noopener\">《What are the Dangers of Method Swizzling in Objective C?》</a>，里面已经把OC中方法交换的危险描述得非常清楚了，这里做个简要的概述。</p>\n<h3 id=\"1-Method-swizzling并非是原子操作\"><a href=\"#1-Method-swizzling并非是原子操作\" class=\"headerlink\" title=\"1. Method swizzling并非是原子操作\"></a>1. Method swizzling并非是原子操作</h3><p>其实95%的场景下，使用 Method Swizzling 都是安全的。因为我们一般希望在整个APP的生命周期里方法的替换是有效的，所以我们会在 <code>+(void)load</code> 方法里执行一系列的操作， 这个情况下是不会遇到并发问题的。但是如果不小心将代码写到了 <code>+(void)initialize</code> 中，就会有可能出现非常诡异的情况。</p>\n<blockquote>\n<p>其实也应该尽可能少的在 <code>+(void)initialize</code> 中做操作，否则会影响启动速度。</p>\n</blockquote>\n<h3 id=\"2-会更改到并非是我们自身代码的实现\"><a href=\"#2-会更改到并非是我们自身代码的实现\" class=\"headerlink\" title=\"2. 会更改到并非是我们自身代码的实现\"></a>2. 会更改到并非是我们自身代码的实现</h3><p>其实这个也是想一下就能明白的问题。如果你在没搞清楚状况的情况下去进行方法替换，可能会影响到其他人的代码。特别是，如果重写了一个类的方法时，却没有调用父类的方法，可能就会出现问题。因此为了避免可能出现的未知情况，我们最好还是要在替换方法实现里调用一下原始实现。</p>\n<h3 id=\"3-可能会存在命名冲突\"><a href=\"#3-可能会存在命名冲突\" class=\"headerlink\" title=\"3. 可能会存在命名冲突\"></a>3. 可能会存在命名冲突</h3><p>在 Method Swizzling 的时候，我们一般会在新的方法前加上一个前缀。</p>\n<p>如:</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)my_setFrame:(<span class=\"built_in\">NSRect</span>)frame &#123;  </span><br><span class=\"line\">    <span class=\"comment\">// do custom work  </span></span><br><span class=\"line\">    [<span class=\"keyword\">self</span> my_setFrame:frame];  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是这样有一个问题，就是万一有某一个地方，也定义了 <code>- (void)my_setFrame:(NSRect)frame</code> 这个名字的方法，就可能出现问题。</p>\n<p>因此最好的解决方式还是在于使用函数指针来解决这个问题（不过这样代码看起来就不那么OC了）。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">NSView</span> (<span class=\"title\">MyViewAdditions</span>)  </span></span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> MySetFrame(<span class=\"keyword\">id</span> <span class=\"keyword\">self</span>, SEL _cmd, <span class=\"built_in\">NSRect</span> frame);  </span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> (*SetFrameIMP)(<span class=\"keyword\">id</span> <span class=\"keyword\">self</span>, SEL _cmd, <span class=\"built_in\">NSRect</span> frame);  </span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> MySetFrame(<span class=\"keyword\">id</span> <span class=\"keyword\">self</span>, SEL _cmd, <span class=\"built_in\">NSRect</span> frame) &#123;  </span><br><span class=\"line\">    <span class=\"comment\">// do custom work  </span></span><br><span class=\"line\">    SetFrameIMP(<span class=\"keyword\">self</span>, _cmd, frame);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">+ (<span class=\"keyword\">void</span>)load &#123;  </span><br><span class=\"line\">    [<span class=\"keyword\">self</span> swizzle:<span class=\"keyword\">@selector</span>(setFrame:) with:(IMP)MySetFrame store:(IMP *)&amp;SetFrameIMP];  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<p>作者也给出了一个比较完美的swizzle方法的定义：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> IMP *IMPPointer;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"built_in\">BOOL</span> class_swizzleMethodAndStore(Class <span class=\"keyword\">class</span>, SEL original, IMP replacement, IMPPointer store) &#123;  </span><br><span class=\"line\">    IMP imp = <span class=\"literal\">NULL</span>;  </span><br><span class=\"line\">    Method method = class_getInstanceMethod(<span class=\"keyword\">class</span>, original);  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (method) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *type = method_getTypeEncoding(method);  </span><br><span class=\"line\">        imp = class_replaceMethod(<span class=\"keyword\">class</span>, original, replacement, type);  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!imp) &#123;  </span><br><span class=\"line\">            imp = method_getImplementation(method);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (imp &amp;&amp; store) &#123; *store = imp; &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> (imp != <span class=\"literal\">NULL</span>);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">NSObject</span> (<span class=\"title\">FRRuntimeAdditions</span>)  </span></span><br><span class=\"line\">+ (<span class=\"built_in\">BOOL</span>)swizzle:(SEL)original with:(IMP)replacement store:(IMPPointer)store &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> class_swizzleMethodAndStore(<span class=\"keyword\">self</span>, original, replacement, store);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4-会改变方法的参数\"><a href=\"#4-会改变方法的参数\" class=\"headerlink\" title=\"4. 会改变方法的参数\"></a>4. 会改变方法的参数</h3><p>作者认为这是一个最大的问题。当你替换了一个方法之后，其实你也替换了传入原始方法实现的参数。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"keyword\">self</span> my_setFrame:frame];</span><br></pre></td></tr></table></figure>\n<p>这一行做的事情是：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objc_msgSend(<span class=\"keyword\">self</span>, <span class=\"keyword\">@selector</span>(my_setFrame:), frame);</span><br></pre></td></tr></table></figure>\n<p>runtime会去寻找 <code>my_setFrame:</code> 的实现，一旦找到了，就会把 <code>my_setFrame</code> 和 <code>frame</code> 传入，但其实这个时候找到的方法应该是原始的 <code>setFrame:</code>，于是当它被调用的时候，<code>_cmd</code> 这个参数并不是预期 <code>setFrame:</code>，而是 <code>my_setFrame</code>，这样就接收了一个意料之外的参数。</p>\n<p>最好的方式还是使用如上的定义。</p>\n<h3 id=\"5-方法交换带来的顺序问题\"><a href=\"#5-方法交换带来的顺序问题\" class=\"headerlink\" title=\"5. 方法交换带来的顺序问题\"></a>5. 方法交换带来的顺序问题</h3><p>当对多个类进行方法交换的时候，要注意顺序，特别是有父子类关系的时候。<br>比如：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"built_in\">NSButton</span> swizzle:<span class=\"keyword\">@selector</span>(setFrame:) with:<span class=\"keyword\">@selector</span>(my_buttonSetFrame:)];</span><br><span class=\"line\">[<span class=\"built_in\">NSControl</span> swizzle:<span class=\"keyword\">@selector</span>(setFrame:) with:<span class=\"keyword\">@selector</span>(my_controlSetFrame:)];</span><br><span class=\"line\">[<span class=\"built_in\">NSView</span> swizzle:<span class=\"keyword\">@selector</span>(setFrame:) with:<span class=\"keyword\">@selector</span>(my_viewSetFrame:)];</span><br></pre></td></tr></table></figure>\n<p>上述的实现，其实最终当你调用 <code>NSButton</code> 的 <code>setFrame</code> 的时候，会调用你替换的 <code>my_buttonSetFrame</code> 方法和 <code>NSView</code> 的原始的 <code>setFrame</code> 的方法。</p>\n<p>相反的，如果顺序是这样的话：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"built_in\">NSView</span> swizzle:<span class=\"keyword\">@selector</span>(setFrame:) with:<span class=\"keyword\">@selector</span>(my_viewSetFrame:)];</span><br><span class=\"line\">[<span class=\"built_in\">NSControl</span> swizzle:<span class=\"keyword\">@selector</span>(setFrame:) with:<span class=\"keyword\">@selector</span>(my_controlSetFrame:)];</span><br><span class=\"line\">[<span class=\"built_in\">NSButton</span> swizzle:<span class=\"keyword\">@selector</span>(setFrame:) with:<span class=\"keyword\">@selector</span>(my_buttonSetFrame:)];</span><br></pre></td></tr></table></figure>\n<p>就会分别调用 <code>NSButton</code> 、 <code>NSControl</code> 和 <code>NSView</code> 的交换后的方法，这个顺序应该来说才是正确的。</p>\n<p>所以其实这边还是建议在 <code>+(void)load</code> 方法里做方法交换，它可以保证父类的load方法在子类的方法调用前先调用，不会出错。</p>\n<h3 id=\"6-会带来很多理解和调试上的不便\"><a href=\"#6-会带来很多理解和调试上的不便\" class=\"headerlink\" title=\"6. 会带来很多理解和调试上的不便\"></a>6. 会带来很多理解和调试上的不便</h3><p>这个就不用多说了，特别是没有文档的时候。有时候要是遇到同事写在某一个角落里的runtime操作但是没人知道的话，搞出了一些无法预见的问题，调试起来就很是蛋疼。</p>\n<h2 id=\"正确姿势\"><a href=\"#正确姿势\" class=\"headerlink\" title=\"正确姿势\"></a>正确姿势</h2><p>所以正确的 Method Swizzling 的姿势是什么呢？</p>\n<h3 id=\"①\"><a href=\"#①\" class=\"headerlink\" title=\"①\"></a>①</h3><p> 如上面的作者一直强调的，<strong>在load里进行方法替换</strong></p>\n<h3 id=\"②\"><a href=\"#②\" class=\"headerlink\" title=\"②\"></a>②</h3><p>其实上面作者给出的 <code>swizzle完美定义</code> 已经是比较正确的姿势了。但是这里也记录下另一个问题。</p>\n<p>网上一部分的文章，都会讲到，通过 Category 实现 Method Swizzling 的例子如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;objc/runtime.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">UIViewController</span> (<span class=\"title\">Tracking</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\">+ (<span class=\"keyword\">void</span>)load &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"built_in\">dispatch_once_t</span> onceToken;</span><br><span class=\"line\">    <span class=\"built_in\">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class=\"line\">        Class <span class=\"keyword\">class</span> = [<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        SEL originalSelector = <span class=\"keyword\">@selector</span>(viewWillAppear:);</span><br><span class=\"line\">        SEL swizzledSelector = <span class=\"keyword\">@selector</span>(xxx_viewWillAppear:);</span><br><span class=\"line\"></span><br><span class=\"line\">        Method originalMethod = class_getInstanceMethod(<span class=\"keyword\">class</span>, originalSelector);</span><br><span class=\"line\">        Method swizzledMethod = class_getInstanceMethod(<span class=\"keyword\">class</span>, swizzledSelector);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// When swizzling a class method, use the following:</span></span><br><span class=\"line\">        <span class=\"comment\">// Class class = object_getClass((id)self);</span></span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">        <span class=\"comment\">// Method originalMethod = class_getClassMethod(class, originalSelector);</span></span><br><span class=\"line\">        <span class=\"comment\">// Method swizzledMethod = class_getClassMethod(class, swizzledSelector);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">BOOL</span> didAddMethod =</span><br><span class=\"line\">            class_addMethod(<span class=\"keyword\">class</span>,</span><br><span class=\"line\">                originalSelector,</span><br><span class=\"line\">                method_getImplementation(swizzledMethod),</span><br><span class=\"line\">                method_getTypeEncoding(swizzledMethod));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (didAddMethod) &#123;</span><br><span class=\"line\">            class_replaceMethod(<span class=\"keyword\">class</span>,</span><br><span class=\"line\">                swizzledSelector,</span><br><span class=\"line\">                method_getImplementation(originalMethod),</span><br><span class=\"line\">                method_getTypeEncoding(originalMethod));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            method_exchangeImplementations(originalMethod, swizzledMethod);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#pragma mark - Method Swizzling</span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)xxx_viewWillAppear:(<span class=\"built_in\">BOOL</span>)animated &#123;</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> xxx_viewWillAppear:animated];</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"viewWillAppear: %@\"</span>, <span class=\"keyword\">self</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<p>然而这里有一点不够严谨，也是之前有提到的危险性所在，origin_imp 如果使用了 _cmd 参数，hook之后的_cmd 是不符合预期的。</p>\n<p>假设我们现在要hook <code>- (void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event;</code> </p>\n<p>那么如果如上那么实现的话，在 <code>[self xxx_touchesBegan:touches withEvent:event];</code> 就会崩溃。原因是这个函数里有 <code>forwardTouchMethod</code>, 反汇编后实现类似：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> forwardTouchMethod(<span class=\"keyword\">id</span> <span class=\"keyword\">self</span>, SEL _cmd, <span class=\"built_in\">NSSet</span> *touches, <span class=\"built_in\">UIEvent</span> *event) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// The responder chain is used to figure out where to send the next touch</span></span><br><span class=\"line\">    <span class=\"built_in\">UIResponder</span> *nextResponder = [<span class=\"keyword\">self</span> nextResponder];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nextResponder &amp;&amp; nextResponder != <span class=\"keyword\">self</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Not all touches are forwarded - so we filter here.</span></span><br><span class=\"line\">        <span class=\"built_in\">NSMutableSet</span> *filteredTouches = [<span class=\"built_in\">NSMutableSet</span> set];</span><br><span class=\"line\">        [touches enumerateObjectsUsingBlock:^(<span class=\"built_in\">UITouch</span> *touch, <span class=\"built_in\">BOOL</span> *stop) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// Checks every touch for forwarding requirements.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ([touch _wantsForwardingFromResponder:<span class=\"keyword\">self</span> toNextResponder:nextResponder withEvent:event]) &#123;</span><br><span class=\"line\">                [filteredTouches addObject:touch];</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">              <span class=\"comment\">// This is interesting legacy behavior. Before iOS 5, all touches are forwarded (and this is logged)</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!_UIApplicationLinkedOnOrAfter(<span class=\"number\">12</span>)) &#123;</span><br><span class=\"line\">                    [filteredTouches addObject:touch];</span><br><span class=\"line\">                    <span class=\"comment\">// Log old behavior</span></span><br><span class=\"line\">                    <span class=\"keyword\">static</span> <span class=\"built_in\">BOOL</span> didLog = <span class=\"number\">0</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!didLog) &#123;</span><br><span class=\"line\">                        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Pre-iOS 5.0 touch delivery method forwarding relied upon. Forwarding -%@ to %@.\"</span>, <span class=\"built_in\">NSStringFromSelector</span>(_cmd), nextResponder);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;];</span><br><span class=\"line\">        <span class=\"comment\">// here we basically call [nextResponder touchesBegan:filteredTouches event:event];</span></span><br><span class=\"line\">        [nextResponder performSelector:_cmd withObject:filteredTouches withObject:event];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果我们exchange了 IMP, <code>[nextResponder performSelector:_cmd withObject:filteredTouches withObject:event];</code> 是没有相应的实现的，_cmd 就变成了 我们替换的 SEL。 显然，nextResponder没有实现相应的方法，就会crash。</p>\n<p>那么这里可以这么写：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> IMP __original_TouchesBegan_Method_Imp;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">UIView</span> (<span class=\"title\">Debug</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\">+ (<span class=\"keyword\">void</span>)load &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"built_in\">dispatch_once_t</span> onceToken;</span><br><span class=\"line\">    <span class=\"built_in\">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class=\"line\">        Class <span class=\"keyword\">class</span> = [<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>];</span><br><span class=\"line\">        </span><br><span class=\"line\">        SEL originalSelector = <span class=\"keyword\">@selector</span>(touchesBegan:withEvent:);</span><br><span class=\"line\">        SEL swizzledSelector = <span class=\"keyword\">@selector</span>(dae_touchesBegan:withEvent:);</span><br><span class=\"line\">        </span><br><span class=\"line\">        Method originalMethod = class_getInstanceMethod(<span class=\"keyword\">class</span>, originalSelector);</span><br><span class=\"line\">        Method swizzledMethod = class_getInstanceMethod(<span class=\"keyword\">class</span>, swizzledSelector);</span><br><span class=\"line\">        </span><br><span class=\"line\">        __original_TouchesBegan_Method_Imp = method_getImplementation(originalMethod);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">BOOL</span> didAddMethod =</span><br><span class=\"line\">        class_addMethod(<span class=\"keyword\">class</span>,</span><br><span class=\"line\">                        originalSelector,</span><br><span class=\"line\">                        method_getImplementation(swizzledMethod),</span><br><span class=\"line\">                        method_getTypeEncoding(swizzledMethod));</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (didAddMethod) &#123;</span><br><span class=\"line\">            class_replaceMethod(<span class=\"keyword\">class</span>,</span><br><span class=\"line\">                                swizzledSelector,</span><br><span class=\"line\">                                method_getImplementation(originalMethod),</span><br><span class=\"line\">                                method_getTypeEncoding(originalMethod));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            method_exchangeImplementations(originalMethod, swizzledMethod);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)dae_touchesBegan:(<span class=\"built_in\">NSSet</span>&lt;<span class=\"built_in\">UITouch</span> *&gt; *)touches withEvent:(<span class=\"built_in\">UIEvent</span> *)event &#123;</span><br><span class=\"line\">    <span class=\"comment\">// custom </span></span><br><span class=\"line\">    </span><br><span class=\"line\">     <span class=\"keyword\">void</span> (*functionPointer)(<span class=\"keyword\">id</span>, SEL, <span class=\"built_in\">NSSet</span>&lt;<span class=\"built_in\">UITouch</span> *&gt; *, <span class=\"built_in\">UIEvent</span> *) = (<span class=\"keyword\">void</span>(*)(<span class=\"keyword\">id</span>, SEL, <span class=\"built_in\">NSSet</span>&lt;<span class=\"built_in\">UITouch</span> *&gt; *, <span class=\"built_in\">UIEvent</span>*))__original_TouchesBegan_Method_Imp;</span><br><span class=\"line\">        </span><br><span class=\"line\">    functionPointer(<span class=\"keyword\">self</span>, _cmd, touches, event);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样就能找到正确的IMP了。</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://junyixie.github.io/2017/12/04/safeSwizzleRSSwizzleAnalyze/#%E9%87%87%E7%94%A8Block%E6%B7%BB%E5%8A%A0%E5%AE%9E%E7%8E%B0%EF%BC%8C%E6%B2%A1%E6%9C%89%E5%91%BD%E5%90%8D%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98\" target=\"_blank\" rel=\"noopener\">Method Swizzling 的正确途径</a><br><a href=\"https://blog.newrelic.com/engineering/right-way-to-swizzle/\" target=\"_blank\" rel=\"noopener\">The Right Way to Swizzle in Objective-C</a><br><a href=\"https://stackoverflow.com/questions/5339276/what-are-the-dangers-of-method-swizzling-in-objective-c?answertab=active#tab-top\" target=\"_blank\" rel=\"noopener\">What are the Dangers of Method Swizzling in Objective C?</a></p>\n","site":{"data":{"links":{"Colin’s Nest":{"link":"http://colin1994.github.io/","avatar":"http://example.com/avatar.png"},"Vong":{"link":"https://vongloo.me/","avatar":"http://example.com/avatar.png"},"Punmy":{"link":"https://punmy.cn/","avatar":"http://example.com/avatar.png"},"细语呢喃":{"link":"https://www.hrwhisper.me/","avatar":"http://example.com/avatar.png"},"栖迟于一丘":{"link":"https://www.hongweipeng.com/","avatar":"http://example.com/avatar.png"},"B1ueW01f":{"link":"https://www.b1uew01f.net/","avatar":"http://example.com/avatar.png"},"忘归":{"link":"http://jalan.space/","avatar":"http://example.com/avatar.png"},"进阶者":{"link":"https://ruphi.cn/","avatar":"http://example.com/avatar.png"},"LIZIMEOW'S BLOG":{"link":"http://lizimeow.cn/","avatar":"http://example.com/avatar.png"},"Saitjr":{"link":"http://www.saitjr.com/","avatar":null}}}},"excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>初次接触到OC runtime机制的时候，应该都会被其黑魔法所折服。特别是在使用了Method Swizzling来hook某一个方法，改变一个已经存在的 selector 的实现的时候，实现AOP统计打点、APM检测、… 都成为了可能。</p>\n<h2 id=\"危害\"><a href=\"#危害\" class=\"headerlink\" title=\"危害\"></a>危害</h2><p>然而，<strong>越是强大的力量，背后往往会隐藏着更大的危险。</strong></p>\n<p>在Stackoverflow上，有一篇文章：<a href=\"https://stackoverflow.com/questions/5339276/what-are-the-dangers-of-method-swizzling-in-objective-c?answertab=active#tab-top\" target=\"_blank\" rel=\"noopener\">《What are the Dangers of Method Swizzling in Objective C?》</a>，里面已经把OC中方法交换的危险描述得非常清楚了，这里做个简要的概述。</p>\n<h3 id=\"1-Method-swizzling并非是原子操作\"><a href=\"#1-Method-swizzling并非是原子操作\" class=\"headerlink\" title=\"1. Method swizzling并非是原子操作\"></a>1. Method swizzling并非是原子操作</h3><p>其实95%的场景下，使用 Method Swizzling 都是安全的。因为我们一般希望在整个APP的生命周期里方法的替换是有效的，所以我们会在 <code>+(void)load</code> 方法里执行一系列的操作， 这个情况下是不会遇到并发问题的。但是如果不小心将代码写到了 <code>+(void)initialize</code> 中，就会有可能出现非常诡异的情况。</p>\n<blockquote>\n<p>其实也应该尽可能少的在 <code>+(void)initialize</code> 中做操作，否则会影响启动速度。</p>\n</blockquote>\n<h3 id=\"2-会更改到并非是我们自身代码的实现\"><a href=\"#2-会更改到并非是我们自身代码的实现\" class=\"headerlink\" title=\"2. 会更改到并非是我们自身代码的实现\"></a>2. 会更改到并非是我们自身代码的实现</h3><p>其实这个也是想一下就能明白的问题。如果你在没搞清楚状况的情况下去进行方法替换，可能会影响到其他人的代码。特别是，如果重写了一个类的方法时，却没有调用父类的方法，可能就会出现问题。因此为了避免可能出现的未知情况，我们最好还是要在替换方法实现里调用一下原始实现。</p>\n<h3 id=\"3-可能会存在命名冲突\"><a href=\"#3-可能会存在命名冲突\" class=\"headerlink\" title=\"3. 可能会存在命名冲突\"></a>3. 可能会存在命名冲突</h3><p>在 Method Swizzling 的时候，我们一般会在新的方法前加上一个前缀。</p>\n<p>如:</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)my_setFrame:(<span class=\"built_in\">NSRect</span>)frame &#123;  </span><br><span class=\"line\">    <span class=\"comment\">// do custom work  </span></span><br><span class=\"line\">    [<span class=\"keyword\">self</span> my_setFrame:frame];  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是这样有一个问题，就是万一有某一个地方，也定义了 <code>- (void)my_setFrame:(NSRect)frame</code> 这个名字的方法，就可能出现问题。</p>\n<p>因此最好的解决方式还是在于使用函数指针来解决这个问题（不过这样代码看起来就不那么OC了）。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">NSView</span> (<span class=\"title\">MyViewAdditions</span>)  </span></span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> MySetFrame(<span class=\"keyword\">id</span> <span class=\"keyword\">self</span>, SEL _cmd, <span class=\"built_in\">NSRect</span> frame);  </span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> (*SetFrameIMP)(<span class=\"keyword\">id</span> <span class=\"keyword\">self</span>, SEL _cmd, <span class=\"built_in\">NSRect</span> frame);  </span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> MySetFrame(<span class=\"keyword\">id</span> <span class=\"keyword\">self</span>, SEL _cmd, <span class=\"built_in\">NSRect</span> frame) &#123;  </span><br><span class=\"line\">    <span class=\"comment\">// do custom work  </span></span><br><span class=\"line\">    SetFrameIMP(<span class=\"keyword\">self</span>, _cmd, frame);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">+ (<span class=\"keyword\">void</span>)load &#123;  </span><br><span class=\"line\">    [<span class=\"keyword\">self</span> swizzle:<span class=\"keyword\">@selector</span>(setFrame:) with:(IMP)MySetFrame store:(IMP *)&amp;SetFrameIMP];  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<p>作者也给出了一个比较完美的swizzle方法的定义：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> IMP *IMPPointer;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"built_in\">BOOL</span> class_swizzleMethodAndStore(Class <span class=\"keyword\">class</span>, SEL original, IMP replacement, IMPPointer store) &#123;  </span><br><span class=\"line\">    IMP imp = <span class=\"literal\">NULL</span>;  </span><br><span class=\"line\">    Method method = class_getInstanceMethod(<span class=\"keyword\">class</span>, original);  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (method) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *type = method_getTypeEncoding(method);  </span><br><span class=\"line\">        imp = class_replaceMethod(<span class=\"keyword\">class</span>, original, replacement, type);  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!imp) &#123;  </span><br><span class=\"line\">            imp = method_getImplementation(method);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (imp &amp;&amp; store) &#123; *store = imp; &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> (imp != <span class=\"literal\">NULL</span>);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">NSObject</span> (<span class=\"title\">FRRuntimeAdditions</span>)  </span></span><br><span class=\"line\">+ (<span class=\"built_in\">BOOL</span>)swizzle:(SEL)original with:(IMP)replacement store:(IMPPointer)store &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> class_swizzleMethodAndStore(<span class=\"keyword\">self</span>, original, replacement, store);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4-会改变方法的参数\"><a href=\"#4-会改变方法的参数\" class=\"headerlink\" title=\"4. 会改变方法的参数\"></a>4. 会改变方法的参数</h3><p>作者认为这是一个最大的问题。当你替换了一个方法之后，其实你也替换了传入原始方法实现的参数。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"keyword\">self</span> my_setFrame:frame];</span><br></pre></td></tr></table></figure>\n<p>这一行做的事情是：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objc_msgSend(<span class=\"keyword\">self</span>, <span class=\"keyword\">@selector</span>(my_setFrame:), frame);</span><br></pre></td></tr></table></figure>\n<p>runtime会去寻找 <code>my_setFrame:</code> 的实现，一旦找到了，就会把 <code>my_setFrame</code> 和 <code>frame</code> 传入，但其实这个时候找到的方法应该是原始的 <code>setFrame:</code>，于是当它被调用的时候，<code>_cmd</code> 这个参数并不是预期 <code>setFrame:</code>，而是 <code>my_setFrame</code>，这样就接收了一个意料之外的参数。</p>\n<p>最好的方式还是使用如上的定义。</p>\n<h3 id=\"5-方法交换带来的顺序问题\"><a href=\"#5-方法交换带来的顺序问题\" class=\"headerlink\" title=\"5. 方法交换带来的顺序问题\"></a>5. 方法交换带来的顺序问题</h3><p>当对多个类进行方法交换的时候，要注意顺序，特别是有父子类关系的时候。<br>比如：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"built_in\">NSButton</span> swizzle:<span class=\"keyword\">@selector</span>(setFrame:) with:<span class=\"keyword\">@selector</span>(my_buttonSetFrame:)];</span><br><span class=\"line\">[<span class=\"built_in\">NSControl</span> swizzle:<span class=\"keyword\">@selector</span>(setFrame:) with:<span class=\"keyword\">@selector</span>(my_controlSetFrame:)];</span><br><span class=\"line\">[<span class=\"built_in\">NSView</span> swizzle:<span class=\"keyword\">@selector</span>(setFrame:) with:<span class=\"keyword\">@selector</span>(my_viewSetFrame:)];</span><br></pre></td></tr></table></figure>\n<p>上述的实现，其实最终当你调用 <code>NSButton</code> 的 <code>setFrame</code> 的时候，会调用你替换的 <code>my_buttonSetFrame</code> 方法和 <code>NSView</code> 的原始的 <code>setFrame</code> 的方法。</p>\n<p>相反的，如果顺序是这样的话：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"built_in\">NSView</span> swizzle:<span class=\"keyword\">@selector</span>(setFrame:) with:<span class=\"keyword\">@selector</span>(my_viewSetFrame:)];</span><br><span class=\"line\">[<span class=\"built_in\">NSControl</span> swizzle:<span class=\"keyword\">@selector</span>(setFrame:) with:<span class=\"keyword\">@selector</span>(my_controlSetFrame:)];</span><br><span class=\"line\">[<span class=\"built_in\">NSButton</span> swizzle:<span class=\"keyword\">@selector</span>(setFrame:) with:<span class=\"keyword\">@selector</span>(my_buttonSetFrame:)];</span><br></pre></td></tr></table></figure>\n<p>就会分别调用 <code>NSButton</code> 、 <code>NSControl</code> 和 <code>NSView</code> 的交换后的方法，这个顺序应该来说才是正确的。</p>\n<p>所以其实这边还是建议在 <code>+(void)load</code> 方法里做方法交换，它可以保证父类的load方法在子类的方法调用前先调用，不会出错。</p>\n<h3 id=\"6-会带来很多理解和调试上的不便\"><a href=\"#6-会带来很多理解和调试上的不便\" class=\"headerlink\" title=\"6. 会带来很多理解和调试上的不便\"></a>6. 会带来很多理解和调试上的不便</h3><p>这个就不用多说了，特别是没有文档的时候。有时候要是遇到同事写在某一个角落里的runtime操作但是没人知道的话，搞出了一些无法预见的问题，调试起来就很是蛋疼。</p>\n<h2 id=\"正确姿势\"><a href=\"#正确姿势\" class=\"headerlink\" title=\"正确姿势\"></a>正确姿势</h2><p>所以正确的 Method Swizzling 的姿势是什么呢？</p>\n<h3 id=\"①\"><a href=\"#①\" class=\"headerlink\" title=\"①\"></a>①</h3><p> 如上面的作者一直强调的，<strong>在load里进行方法替换</strong></p>\n<h3 id=\"②\"><a href=\"#②\" class=\"headerlink\" title=\"②\"></a>②</h3><p>其实上面作者给出的 <code>swizzle完美定义</code> 已经是比较正确的姿势了。但是这里也记录下另一个问题。</p>\n<p>网上一部分的文章，都会讲到，通过 Category 实现 Method Swizzling 的例子如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;objc/runtime.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">UIViewController</span> (<span class=\"title\">Tracking</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\">+ (<span class=\"keyword\">void</span>)load &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"built_in\">dispatch_once_t</span> onceToken;</span><br><span class=\"line\">    <span class=\"built_in\">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class=\"line\">        Class <span class=\"keyword\">class</span> = [<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        SEL originalSelector = <span class=\"keyword\">@selector</span>(viewWillAppear:);</span><br><span class=\"line\">        SEL swizzledSelector = <span class=\"keyword\">@selector</span>(xxx_viewWillAppear:);</span><br><span class=\"line\"></span><br><span class=\"line\">        Method originalMethod = class_getInstanceMethod(<span class=\"keyword\">class</span>, originalSelector);</span><br><span class=\"line\">        Method swizzledMethod = class_getInstanceMethod(<span class=\"keyword\">class</span>, swizzledSelector);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// When swizzling a class method, use the following:</span></span><br><span class=\"line\">        <span class=\"comment\">// Class class = object_getClass((id)self);</span></span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">        <span class=\"comment\">// Method originalMethod = class_getClassMethod(class, originalSelector);</span></span><br><span class=\"line\">        <span class=\"comment\">// Method swizzledMethod = class_getClassMethod(class, swizzledSelector);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">BOOL</span> didAddMethod =</span><br><span class=\"line\">            class_addMethod(<span class=\"keyword\">class</span>,</span><br><span class=\"line\">                originalSelector,</span><br><span class=\"line\">                method_getImplementation(swizzledMethod),</span><br><span class=\"line\">                method_getTypeEncoding(swizzledMethod));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (didAddMethod) &#123;</span><br><span class=\"line\">            class_replaceMethod(<span class=\"keyword\">class</span>,</span><br><span class=\"line\">                swizzledSelector,</span><br><span class=\"line\">                method_getImplementation(originalMethod),</span><br><span class=\"line\">                method_getTypeEncoding(originalMethod));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            method_exchangeImplementations(originalMethod, swizzledMethod);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#pragma mark - Method Swizzling</span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)xxx_viewWillAppear:(<span class=\"built_in\">BOOL</span>)animated &#123;</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> xxx_viewWillAppear:animated];</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"viewWillAppear: %@\"</span>, <span class=\"keyword\">self</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<p>然而这里有一点不够严谨，也是之前有提到的危险性所在，origin_imp 如果使用了 _cmd 参数，hook之后的_cmd 是不符合预期的。</p>\n<p>假设我们现在要hook <code>- (void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event;</code> </p>\n<p>那么如果如上那么实现的话，在 <code>[self xxx_touchesBegan:touches withEvent:event];</code> 就会崩溃。原因是这个函数里有 <code>forwardTouchMethod</code>, 反汇编后实现类似：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> forwardTouchMethod(<span class=\"keyword\">id</span> <span class=\"keyword\">self</span>, SEL _cmd, <span class=\"built_in\">NSSet</span> *touches, <span class=\"built_in\">UIEvent</span> *event) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// The responder chain is used to figure out where to send the next touch</span></span><br><span class=\"line\">    <span class=\"built_in\">UIResponder</span> *nextResponder = [<span class=\"keyword\">self</span> nextResponder];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nextResponder &amp;&amp; nextResponder != <span class=\"keyword\">self</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Not all touches are forwarded - so we filter here.</span></span><br><span class=\"line\">        <span class=\"built_in\">NSMutableSet</span> *filteredTouches = [<span class=\"built_in\">NSMutableSet</span> set];</span><br><span class=\"line\">        [touches enumerateObjectsUsingBlock:^(<span class=\"built_in\">UITouch</span> *touch, <span class=\"built_in\">BOOL</span> *stop) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// Checks every touch for forwarding requirements.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ([touch _wantsForwardingFromResponder:<span class=\"keyword\">self</span> toNextResponder:nextResponder withEvent:event]) &#123;</span><br><span class=\"line\">                [filteredTouches addObject:touch];</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">              <span class=\"comment\">// This is interesting legacy behavior. Before iOS 5, all touches are forwarded (and this is logged)</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!_UIApplicationLinkedOnOrAfter(<span class=\"number\">12</span>)) &#123;</span><br><span class=\"line\">                    [filteredTouches addObject:touch];</span><br><span class=\"line\">                    <span class=\"comment\">// Log old behavior</span></span><br><span class=\"line\">                    <span class=\"keyword\">static</span> <span class=\"built_in\">BOOL</span> didLog = <span class=\"number\">0</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!didLog) &#123;</span><br><span class=\"line\">                        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Pre-iOS 5.0 touch delivery method forwarding relied upon. Forwarding -%@ to %@.\"</span>, <span class=\"built_in\">NSStringFromSelector</span>(_cmd), nextResponder);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;];</span><br><span class=\"line\">        <span class=\"comment\">// here we basically call [nextResponder touchesBegan:filteredTouches event:event];</span></span><br><span class=\"line\">        [nextResponder performSelector:_cmd withObject:filteredTouches withObject:event];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果我们exchange了 IMP, <code>[nextResponder performSelector:_cmd withObject:filteredTouches withObject:event];</code> 是没有相应的实现的，_cmd 就变成了 我们替换的 SEL。 显然，nextResponder没有实现相应的方法，就会crash。</p>\n<p>那么这里可以这么写：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> IMP __original_TouchesBegan_Method_Imp;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">UIView</span> (<span class=\"title\">Debug</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\">+ (<span class=\"keyword\">void</span>)load &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"built_in\">dispatch_once_t</span> onceToken;</span><br><span class=\"line\">    <span class=\"built_in\">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class=\"line\">        Class <span class=\"keyword\">class</span> = [<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>];</span><br><span class=\"line\">        </span><br><span class=\"line\">        SEL originalSelector = <span class=\"keyword\">@selector</span>(touchesBegan:withEvent:);</span><br><span class=\"line\">        SEL swizzledSelector = <span class=\"keyword\">@selector</span>(dae_touchesBegan:withEvent:);</span><br><span class=\"line\">        </span><br><span class=\"line\">        Method originalMethod = class_getInstanceMethod(<span class=\"keyword\">class</span>, originalSelector);</span><br><span class=\"line\">        Method swizzledMethod = class_getInstanceMethod(<span class=\"keyword\">class</span>, swizzledSelector);</span><br><span class=\"line\">        </span><br><span class=\"line\">        __original_TouchesBegan_Method_Imp = method_getImplementation(originalMethod);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">BOOL</span> didAddMethod =</span><br><span class=\"line\">        class_addMethod(<span class=\"keyword\">class</span>,</span><br><span class=\"line\">                        originalSelector,</span><br><span class=\"line\">                        method_getImplementation(swizzledMethod),</span><br><span class=\"line\">                        method_getTypeEncoding(swizzledMethod));</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (didAddMethod) &#123;</span><br><span class=\"line\">            class_replaceMethod(<span class=\"keyword\">class</span>,</span><br><span class=\"line\">                                swizzledSelector,</span><br><span class=\"line\">                                method_getImplementation(originalMethod),</span><br><span class=\"line\">                                method_getTypeEncoding(originalMethod));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            method_exchangeImplementations(originalMethod, swizzledMethod);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)dae_touchesBegan:(<span class=\"built_in\">NSSet</span>&lt;<span class=\"built_in\">UITouch</span> *&gt; *)touches withEvent:(<span class=\"built_in\">UIEvent</span> *)event &#123;</span><br><span class=\"line\">    <span class=\"comment\">// custom </span></span><br><span class=\"line\">    </span><br><span class=\"line\">     <span class=\"keyword\">void</span> (*functionPointer)(<span class=\"keyword\">id</span>, SEL, <span class=\"built_in\">NSSet</span>&lt;<span class=\"built_in\">UITouch</span> *&gt; *, <span class=\"built_in\">UIEvent</span> *) = (<span class=\"keyword\">void</span>(*)(<span class=\"keyword\">id</span>, SEL, <span class=\"built_in\">NSSet</span>&lt;<span class=\"built_in\">UITouch</span> *&gt; *, <span class=\"built_in\">UIEvent</span>*))__original_TouchesBegan_Method_Imp;</span><br><span class=\"line\">        </span><br><span class=\"line\">    functionPointer(<span class=\"keyword\">self</span>, _cmd, touches, event);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样就能找到正确的IMP了。</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://junyixie.github.io/2017/12/04/safeSwizzleRSSwizzleAnalyze/#%E9%87%87%E7%94%A8Block%E6%B7%BB%E5%8A%A0%E5%AE%9E%E7%8E%B0%EF%BC%8C%E6%B2%A1%E6%9C%89%E5%91%BD%E5%90%8D%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98\" target=\"_blank\" rel=\"noopener\">Method Swizzling 的正确途径</a><br><a href=\"https://blog.newrelic.com/engineering/right-way-to-swizzle/\" target=\"_blank\" rel=\"noopener\">The Right Way to Swizzle in Objective-C</a><br><a href=\"https://stackoverflow.com/questions/5339276/what-are-the-dangers-of-method-swizzling-in-objective-c?answertab=active#tab-top\" target=\"_blank\" rel=\"noopener\">What are the Dangers of Method Swizzling in Objective C?</a></p>\n"},{"title":"用 Swift 协议扩展和泛型来实现复用[译]","date":"2016-11-11T12:56:15.000Z","_content":"\n\n作为一个iOS开发者，最常用的任务就是通过自定义cell的子类，来实现UITableView或者UICollectionView的自定义。并且 `UITableView` 和 `UICollectionView` 在注册自定义cell子类这一块都有非常类似的API:\n\n```swift\npublic func registerClass(cellClass: AnyClass?, forCellWithReuseIdentifier identifier: String)\npublic func registerNib(nib: UINib?, forCellWithReuseIdentifier identifier: String)\n```\n\n对于注册cell的自定义最常用的解决办法就是，声明一个reuseIdentifier的常量，像下面这样: \n\n```swift\nprivate let reuseIdentifier = \"BookCell\"\n\nclass BookListViewController: UIViewController, UICollectionViewDataSource {\n\n    @IBOutlet private weak var collectionView: UICollectionView!\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        let nib = UINib(nibName: \"BookCell\", bundle: nil)\n        self.collectionView.registerNib(nib, forCellWithReuseIdentifier: reuseIdentifier)\n    }\n\n    func collectionView(collectionView: UICollectionView, cellForItemAtIndexPath indexPath: NSIndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCellWithReuseIdentifier(reuseIdentifier, forIndexPath: indexPath)\n    \n        if let bookCell = cell as? BookCell {\n            // TODO: configure cell\n        }\n    \n        return cell\n    }\n}\n```\n\n接下来让我们尝试着使用泛型来让它简单化和安全化。  \n  \n首先，如果在我们的代码当中能不需要到处声明reuse identifier常量，那就再好不过了。而事实上，我们可以直接使用自定义cell的类名来当做   **默认的reuseIdentifier**。  \n我们可以通过创建一个Reuseable Views的协议并且创建默认的声明方法给 `UIView` 的子类们。\n\n```swift\nprotocol ReusableView: class {\n    static var defaultReuseIdentifier: String { get }\n}\n\nextension ReusableView where Self: UIView {\n    static var defaultReuseIdentifier: String {\n        return NSStringFromClass(self)\n    }\n}\n\nextension UICollectionViewCell: ReusableView {\n}\n```\n\n通过让 `UICollectionViewCell` 遵循 `ReusableView` 协议，我们可以得到每个cell子类的一个唯一的重用标识。\n\n```swift\nlet identifier = BookCell.defaultReuseIdentifier\n// identifier = \"MyModule.BookCell\"\n```\n\n接下来，我们通过同样的方法，将注册Nib步骤中的一些脏代码给去除掉。  \n\n我们创建一个 **Nib Loadable Views** 的协议并通过协议拓展添加一个默认方法实现。\n\n```swift\nprotocol NibLoadableView: class {\n    static var nibName: String { get }\n}\n\nextension NibLoadableView where Self: UIView {\n    static var nibName: String {\n        return NSStringFromClass(self).componentsSeparatedByString(\".\").last!\n    }\n}\n\nextension BookCell: NibLoadableView {\n}\n```\n\n通过让我们的 `BookCell` 类遵循 `NibLoadableView` 协议，现在我们就有了一个更安全和方便的方法去获得到Nib的名称。\n\n```swift\nlet nibName = BookCell.nibName\n// nibName = \"BookCell\"\n```\n\n有这两个协议，我们可以通过使用 **Swift的泛型** 并且通过拓展 `UICollectionView` 来简化cell的注册和使用。\n\n```swift\nextension UICollectionView {\n    \n    func register<T: UICollectionViewCell where T: ReusableView>(_: T.Type) {\n        registerClass(T.self, forCellWithReuseIdentifier: T.defaultReuseIdentifier)\n    }\n    \n    func register<T: UICollectionViewCell where T: ReusableView, T: NibLoadableView>(_: T.Type) {\n        let bundle = NSBundle(forClass: T.self)\n        let nib = UINib(nibName: T.nibName, bundle: bundle)\n        \n        registerNib(nib, forCellWithReuseIdentifier: T.defaultReuseIdentifier)\n    }\n    \n    func dequeueReusableCell<T: UICollectionViewCell where T: ReusableView>(forIndexPath indexPath: NSIndexPath) -> T {\n        guard let cell = dequeueReusableCellWithReuseIdentifier(T.defaultReuseIdentifier, forIndexPath: indexPath) as? T else {\n            fatalError(\"Could not dequeue cell with identifier: \\(T.defaultReuseIdentifier)\")\n        }\n        \n        return cell\n    }    \n}\n```\n\n注意这里，我们创建了两个版本的注册方法，一个是用来注册 `ReusableView` 子类用的，一个是用来注册 `ReusableView` 和 `NibLoadableView`的子类。这很好的将view controller的特定的注册方法分离出来。\n\n另一个比较棒的细节就是 `dequeueReusableCell` 方法不再需要给他任何重用标识字符串而且可以直接使用cell的子类作为返回值。\n\n现在cell的注册和使用代码看起来棒极了 :) 。\n\n```swift\nclass BookListViewController: UIViewController, UICollectionViewDataSource {\n\n    @IBOutlet private weak var collectionView: UICollectionView!\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        self.collectionView.register(BookCell.self)\n    }\n\n    func collectionView(collectionView: UICollectionView, cellForItemAtIndexPath indexPath: NSIndexPath) -> UICollectionViewCell {\n        \n        let cell: BookCell = collectionView.dequeueReusableCell(forIndexPath: indexPath)\n        \n        // TODO: configure cell\n    \n        return cell\n    }\n    ...\n}\n```\n\n## 总结  \n如果你是从 Objective-C 转到 Swift 的话，研究Swift强大的新特性比如 **协议拓展**、 **泛型**， 从而找到更优雅的实现方式和替代方法是非常值得的。\n\n\n\n\n","source":"_posts/yong-swift-xieyi-tuozhan-fuyong.md","raw":"---\ntitle: 用 Swift 协议扩展和泛型来实现复用[译]\ndate: 2016-11-11 20:56:15\ntags:\n- iOS\n- Swift\n---\n\n\n作为一个iOS开发者，最常用的任务就是通过自定义cell的子类，来实现UITableView或者UICollectionView的自定义。并且 `UITableView` 和 `UICollectionView` 在注册自定义cell子类这一块都有非常类似的API:\n\n```swift\npublic func registerClass(cellClass: AnyClass?, forCellWithReuseIdentifier identifier: String)\npublic func registerNib(nib: UINib?, forCellWithReuseIdentifier identifier: String)\n```\n\n对于注册cell的自定义最常用的解决办法就是，声明一个reuseIdentifier的常量，像下面这样: \n\n```swift\nprivate let reuseIdentifier = \"BookCell\"\n\nclass BookListViewController: UIViewController, UICollectionViewDataSource {\n\n    @IBOutlet private weak var collectionView: UICollectionView!\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        let nib = UINib(nibName: \"BookCell\", bundle: nil)\n        self.collectionView.registerNib(nib, forCellWithReuseIdentifier: reuseIdentifier)\n    }\n\n    func collectionView(collectionView: UICollectionView, cellForItemAtIndexPath indexPath: NSIndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCellWithReuseIdentifier(reuseIdentifier, forIndexPath: indexPath)\n    \n        if let bookCell = cell as? BookCell {\n            // TODO: configure cell\n        }\n    \n        return cell\n    }\n}\n```\n\n接下来让我们尝试着使用泛型来让它简单化和安全化。  \n  \n首先，如果在我们的代码当中能不需要到处声明reuse identifier常量，那就再好不过了。而事实上，我们可以直接使用自定义cell的类名来当做   **默认的reuseIdentifier**。  \n我们可以通过创建一个Reuseable Views的协议并且创建默认的声明方法给 `UIView` 的子类们。\n\n```swift\nprotocol ReusableView: class {\n    static var defaultReuseIdentifier: String { get }\n}\n\nextension ReusableView where Self: UIView {\n    static var defaultReuseIdentifier: String {\n        return NSStringFromClass(self)\n    }\n}\n\nextension UICollectionViewCell: ReusableView {\n}\n```\n\n通过让 `UICollectionViewCell` 遵循 `ReusableView` 协议，我们可以得到每个cell子类的一个唯一的重用标识。\n\n```swift\nlet identifier = BookCell.defaultReuseIdentifier\n// identifier = \"MyModule.BookCell\"\n```\n\n接下来，我们通过同样的方法，将注册Nib步骤中的一些脏代码给去除掉。  \n\n我们创建一个 **Nib Loadable Views** 的协议并通过协议拓展添加一个默认方法实现。\n\n```swift\nprotocol NibLoadableView: class {\n    static var nibName: String { get }\n}\n\nextension NibLoadableView where Self: UIView {\n    static var nibName: String {\n        return NSStringFromClass(self).componentsSeparatedByString(\".\").last!\n    }\n}\n\nextension BookCell: NibLoadableView {\n}\n```\n\n通过让我们的 `BookCell` 类遵循 `NibLoadableView` 协议，现在我们就有了一个更安全和方便的方法去获得到Nib的名称。\n\n```swift\nlet nibName = BookCell.nibName\n// nibName = \"BookCell\"\n```\n\n有这两个协议，我们可以通过使用 **Swift的泛型** 并且通过拓展 `UICollectionView` 来简化cell的注册和使用。\n\n```swift\nextension UICollectionView {\n    \n    func register<T: UICollectionViewCell where T: ReusableView>(_: T.Type) {\n        registerClass(T.self, forCellWithReuseIdentifier: T.defaultReuseIdentifier)\n    }\n    \n    func register<T: UICollectionViewCell where T: ReusableView, T: NibLoadableView>(_: T.Type) {\n        let bundle = NSBundle(forClass: T.self)\n        let nib = UINib(nibName: T.nibName, bundle: bundle)\n        \n        registerNib(nib, forCellWithReuseIdentifier: T.defaultReuseIdentifier)\n    }\n    \n    func dequeueReusableCell<T: UICollectionViewCell where T: ReusableView>(forIndexPath indexPath: NSIndexPath) -> T {\n        guard let cell = dequeueReusableCellWithReuseIdentifier(T.defaultReuseIdentifier, forIndexPath: indexPath) as? T else {\n            fatalError(\"Could not dequeue cell with identifier: \\(T.defaultReuseIdentifier)\")\n        }\n        \n        return cell\n    }    \n}\n```\n\n注意这里，我们创建了两个版本的注册方法，一个是用来注册 `ReusableView` 子类用的，一个是用来注册 `ReusableView` 和 `NibLoadableView`的子类。这很好的将view controller的特定的注册方法分离出来。\n\n另一个比较棒的细节就是 `dequeueReusableCell` 方法不再需要给他任何重用标识字符串而且可以直接使用cell的子类作为返回值。\n\n现在cell的注册和使用代码看起来棒极了 :) 。\n\n```swift\nclass BookListViewController: UIViewController, UICollectionViewDataSource {\n\n    @IBOutlet private weak var collectionView: UICollectionView!\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        self.collectionView.register(BookCell.self)\n    }\n\n    func collectionView(collectionView: UICollectionView, cellForItemAtIndexPath indexPath: NSIndexPath) -> UICollectionViewCell {\n        \n        let cell: BookCell = collectionView.dequeueReusableCell(forIndexPath: indexPath)\n        \n        // TODO: configure cell\n    \n        return cell\n    }\n    ...\n}\n```\n\n## 总结  \n如果你是从 Objective-C 转到 Swift 的话，研究Swift强大的新特性比如 **协议拓展**、 **泛型**， 从而找到更优雅的实现方式和替代方法是非常值得的。\n\n\n\n\n","slug":"yong-swift-xieyi-tuozhan-fuyong","published":1,"updated":"2022-10-25T02:57:42.646Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9nmc48k000k8wwx8bp4xtcm","content":"<p>作为一个iOS开发者，最常用的任务就是通过自定义cell的子类，来实现UITableView或者UICollectionView的自定义。并且 <code>UITableView</code> 和 <code>UICollectionView</code> 在注册自定义cell子类这一块都有非常类似的API:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">registerClass</span><span class=\"params\">(cellClass: AnyClass?, forCellWithReuseIdentifier identifier: String)</span></span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">registerNib</span><span class=\"params\">(nib: UINib?, forCellWithReuseIdentifier identifier: String)</span></span></span><br></pre></td></tr></table></figure>\n<p>对于注册cell的自定义最常用的解决办法就是，声明一个reuseIdentifier的常量，像下面这样: </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">let</span> reuseIdentifier = <span class=\"string\">\"BookCell\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BookListViewController</span>: <span class=\"title\">UIViewController</span>, <span class=\"title\">UICollectionViewDataSource</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@IBOutlet</span> <span class=\"keyword\">private</span> <span class=\"keyword\">weak</span> <span class=\"keyword\">var</span> collectionView: <span class=\"type\">UICollectionView</span>!</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">viewDidLoad</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.viewDidLoad()</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">let</span> nib = <span class=\"type\">UINib</span>(nibName: <span class=\"string\">\"BookCell\"</span>, bundle: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.collectionView.registerNib(nib, forCellWithReuseIdentifier: reuseIdentifier)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">collectionView</span><span class=\"params\">(collectionView: UICollectionView, cellForItemAtIndexPath indexPath: NSIndexPath)</span></span> -&gt; <span class=\"type\">UICollectionViewCell</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> cell = collectionView.dequeueReusableCellWithReuseIdentifier(reuseIdentifier, forIndexPath: indexPath)</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> bookCell = cell <span class=\"keyword\">as</span>? <span class=\"type\">BookCell</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// <span class=\"doctag\">TODO:</span> configure cell</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">return</span> cell</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来让我们尝试着使用泛型来让它简单化和安全化。  </p>\n<p>首先，如果在我们的代码当中能不需要到处声明reuse identifier常量，那就再好不过了。而事实上，我们可以直接使用自定义cell的类名来当做   <strong>默认的reuseIdentifier</strong>。<br>我们可以通过创建一个Reuseable Views的协议并且创建默认的声明方法给 <code>UIView</code> 的子类们。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">ReusableView</span>: <span class=\"title\">class</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> defaultReuseIdentifier: <span class=\"type\">String</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">ReusableView</span> <span class=\"title\">where</span> <span class=\"title\">Self</span>: <span class=\"title\">UIView</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> defaultReuseIdentifier: <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">NSStringFromClass</span>(<span class=\"keyword\">self</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">UICollectionViewCell</span>: <span class=\"title\">ReusableView</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过让 <code>UICollectionViewCell</code> 遵循 <code>ReusableView</code> 协议，我们可以得到每个cell子类的一个唯一的重用标识。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> identifier = <span class=\"type\">BookCell</span>.defaultReuseIdentifier</span><br><span class=\"line\"><span class=\"comment\">// identifier = \"MyModule.BookCell\"</span></span><br></pre></td></tr></table></figure>\n<p>接下来，我们通过同样的方法，将注册Nib步骤中的一些脏代码给去除掉。  </p>\n<p>我们创建一个 <strong>Nib Loadable Views</strong> 的协议并通过协议拓展添加一个默认方法实现。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">NibLoadableView</span>: <span class=\"title\">class</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> nibName: <span class=\"type\">String</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">NibLoadableView</span> <span class=\"title\">where</span> <span class=\"title\">Self</span>: <span class=\"title\">UIView</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> nibName: <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">NSStringFromClass</span>(<span class=\"keyword\">self</span>).componentsSeparatedByString(<span class=\"string\">\".\"</span>).last!</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">BookCell</span>: <span class=\"title\">NibLoadableView</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过让我们的 <code>BookCell</code> 类遵循 <code>NibLoadableView</code> 协议，现在我们就有了一个更安全和方便的方法去获得到Nib的名称。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> nibName = <span class=\"type\">BookCell</span>.nibName</span><br><span class=\"line\"><span class=\"comment\">// nibName = \"BookCell\"</span></span><br></pre></td></tr></table></figure>\n<p>有这两个协议，我们可以通过使用 <strong>Swift的泛型</strong> 并且通过拓展 <code>UICollectionView</code> 来简化cell的注册和使用。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">UICollectionView</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">register</span>&lt;T: UICollectionViewCell where T: ReusableView&gt;<span class=\"params\">(<span class=\"number\">_</span>: T.<span class=\"keyword\">Type</span>)</span></span> &#123;</span><br><span class=\"line\">        registerClass(<span class=\"type\">T</span>.<span class=\"keyword\">self</span>, forCellWithReuseIdentifier: <span class=\"type\">T</span>.defaultReuseIdentifier)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">register</span>&lt;T: UICollectionViewCell where T: ReusableView, T: NibLoadableView&gt;<span class=\"params\">(<span class=\"number\">_</span>: T.<span class=\"keyword\">Type</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> bundle = <span class=\"type\">NSBundle</span>(forClass: <span class=\"type\">T</span>.<span class=\"keyword\">self</span>)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> nib = <span class=\"type\">UINib</span>(nibName: <span class=\"type\">T</span>.nibName, bundle: bundle)</span><br><span class=\"line\">        </span><br><span class=\"line\">        registerNib(nib, forCellWithReuseIdentifier: <span class=\"type\">T</span>.defaultReuseIdentifier)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">dequeueReusableCell</span>&lt;T: UICollectionViewCell where T: ReusableView&gt;<span class=\"params\">(forIndexPath indexPath: NSIndexPath)</span></span> -&gt; <span class=\"type\">T</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> cell = dequeueReusableCellWithReuseIdentifier(<span class=\"type\">T</span>.defaultReuseIdentifier, forIndexPath: indexPath) <span class=\"keyword\">as</span>? <span class=\"type\">T</span> <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">fatalError</span>(<span class=\"string\">\"Could not dequeue cell with identifier: \\(T.defaultReuseIdentifier)\"</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> cell</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意这里，我们创建了两个版本的注册方法，一个是用来注册 <code>ReusableView</code> 子类用的，一个是用来注册 <code>ReusableView</code> 和 <code>NibLoadableView</code>的子类。这很好的将view controller的特定的注册方法分离出来。</p>\n<p>另一个比较棒的细节就是 <code>dequeueReusableCell</code> 方法不再需要给他任何重用标识字符串而且可以直接使用cell的子类作为返回值。</p>\n<p>现在cell的注册和使用代码看起来棒极了 :) 。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BookListViewController</span>: <span class=\"title\">UIViewController</span>, <span class=\"title\">UICollectionViewDataSource</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@IBOutlet</span> <span class=\"keyword\">private</span> <span class=\"keyword\">weak</span> <span class=\"keyword\">var</span> collectionView: <span class=\"type\">UICollectionView</span>!</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">viewDidLoad</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.viewDidLoad()</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">self</span>.collectionView.register(<span class=\"type\">BookCell</span>.<span class=\"keyword\">self</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">collectionView</span><span class=\"params\">(collectionView: UICollectionView, cellForItemAtIndexPath indexPath: NSIndexPath)</span></span> -&gt; <span class=\"type\">UICollectionViewCell</span> &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">let</span> cell: <span class=\"type\">BookCell</span> = collectionView.dequeueReusableCell(forIndexPath: indexPath)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// <span class=\"doctag\">TODO:</span> configure cell</span></span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">return</span> cell</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>如果你是从 Objective-C 转到 Swift 的话，研究Swift强大的新特性比如 <strong>协议拓展</strong>、 <strong>泛型</strong>， 从而找到更优雅的实现方式和替代方法是非常值得的。</p>\n","site":{"data":{"links":{"Colin’s Nest":{"link":"http://colin1994.github.io/","avatar":"http://example.com/avatar.png"},"Vong":{"link":"https://vongloo.me/","avatar":"http://example.com/avatar.png"},"Punmy":{"link":"https://punmy.cn/","avatar":"http://example.com/avatar.png"},"细语呢喃":{"link":"https://www.hrwhisper.me/","avatar":"http://example.com/avatar.png"},"栖迟于一丘":{"link":"https://www.hongweipeng.com/","avatar":"http://example.com/avatar.png"},"B1ueW01f":{"link":"https://www.b1uew01f.net/","avatar":"http://example.com/avatar.png"},"忘归":{"link":"http://jalan.space/","avatar":"http://example.com/avatar.png"},"进阶者":{"link":"https://ruphi.cn/","avatar":"http://example.com/avatar.png"},"LIZIMEOW'S BLOG":{"link":"http://lizimeow.cn/","avatar":"http://example.com/avatar.png"},"Saitjr":{"link":"http://www.saitjr.com/","avatar":null}}}},"excerpt":"","more":"<p>作为一个iOS开发者，最常用的任务就是通过自定义cell的子类，来实现UITableView或者UICollectionView的自定义。并且 <code>UITableView</code> 和 <code>UICollectionView</code> 在注册自定义cell子类这一块都有非常类似的API:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">registerClass</span><span class=\"params\">(cellClass: AnyClass?, forCellWithReuseIdentifier identifier: String)</span></span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">registerNib</span><span class=\"params\">(nib: UINib?, forCellWithReuseIdentifier identifier: String)</span></span></span><br></pre></td></tr></table></figure>\n<p>对于注册cell的自定义最常用的解决办法就是，声明一个reuseIdentifier的常量，像下面这样: </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">let</span> reuseIdentifier = <span class=\"string\">\"BookCell\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BookListViewController</span>: <span class=\"title\">UIViewController</span>, <span class=\"title\">UICollectionViewDataSource</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@IBOutlet</span> <span class=\"keyword\">private</span> <span class=\"keyword\">weak</span> <span class=\"keyword\">var</span> collectionView: <span class=\"type\">UICollectionView</span>!</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">viewDidLoad</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.viewDidLoad()</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">let</span> nib = <span class=\"type\">UINib</span>(nibName: <span class=\"string\">\"BookCell\"</span>, bundle: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.collectionView.registerNib(nib, forCellWithReuseIdentifier: reuseIdentifier)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">collectionView</span><span class=\"params\">(collectionView: UICollectionView, cellForItemAtIndexPath indexPath: NSIndexPath)</span></span> -&gt; <span class=\"type\">UICollectionViewCell</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> cell = collectionView.dequeueReusableCellWithReuseIdentifier(reuseIdentifier, forIndexPath: indexPath)</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> bookCell = cell <span class=\"keyword\">as</span>? <span class=\"type\">BookCell</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// <span class=\"doctag\">TODO:</span> configure cell</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">return</span> cell</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来让我们尝试着使用泛型来让它简单化和安全化。  </p>\n<p>首先，如果在我们的代码当中能不需要到处声明reuse identifier常量，那就再好不过了。而事实上，我们可以直接使用自定义cell的类名来当做   <strong>默认的reuseIdentifier</strong>。<br>我们可以通过创建一个Reuseable Views的协议并且创建默认的声明方法给 <code>UIView</code> 的子类们。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">ReusableView</span>: <span class=\"title\">class</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> defaultReuseIdentifier: <span class=\"type\">String</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">ReusableView</span> <span class=\"title\">where</span> <span class=\"title\">Self</span>: <span class=\"title\">UIView</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> defaultReuseIdentifier: <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">NSStringFromClass</span>(<span class=\"keyword\">self</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">UICollectionViewCell</span>: <span class=\"title\">ReusableView</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过让 <code>UICollectionViewCell</code> 遵循 <code>ReusableView</code> 协议，我们可以得到每个cell子类的一个唯一的重用标识。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> identifier = <span class=\"type\">BookCell</span>.defaultReuseIdentifier</span><br><span class=\"line\"><span class=\"comment\">// identifier = \"MyModule.BookCell\"</span></span><br></pre></td></tr></table></figure>\n<p>接下来，我们通过同样的方法，将注册Nib步骤中的一些脏代码给去除掉。  </p>\n<p>我们创建一个 <strong>Nib Loadable Views</strong> 的协议并通过协议拓展添加一个默认方法实现。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">NibLoadableView</span>: <span class=\"title\">class</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> nibName: <span class=\"type\">String</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">NibLoadableView</span> <span class=\"title\">where</span> <span class=\"title\">Self</span>: <span class=\"title\">UIView</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> nibName: <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">NSStringFromClass</span>(<span class=\"keyword\">self</span>).componentsSeparatedByString(<span class=\"string\">\".\"</span>).last!</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">BookCell</span>: <span class=\"title\">NibLoadableView</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过让我们的 <code>BookCell</code> 类遵循 <code>NibLoadableView</code> 协议，现在我们就有了一个更安全和方便的方法去获得到Nib的名称。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> nibName = <span class=\"type\">BookCell</span>.nibName</span><br><span class=\"line\"><span class=\"comment\">// nibName = \"BookCell\"</span></span><br></pre></td></tr></table></figure>\n<p>有这两个协议，我们可以通过使用 <strong>Swift的泛型</strong> 并且通过拓展 <code>UICollectionView</code> 来简化cell的注册和使用。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">UICollectionView</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">register</span>&lt;T: UICollectionViewCell where T: ReusableView&gt;<span class=\"params\">(<span class=\"number\">_</span>: T.<span class=\"keyword\">Type</span>)</span></span> &#123;</span><br><span class=\"line\">        registerClass(<span class=\"type\">T</span>.<span class=\"keyword\">self</span>, forCellWithReuseIdentifier: <span class=\"type\">T</span>.defaultReuseIdentifier)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">register</span>&lt;T: UICollectionViewCell where T: ReusableView, T: NibLoadableView&gt;<span class=\"params\">(<span class=\"number\">_</span>: T.<span class=\"keyword\">Type</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> bundle = <span class=\"type\">NSBundle</span>(forClass: <span class=\"type\">T</span>.<span class=\"keyword\">self</span>)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> nib = <span class=\"type\">UINib</span>(nibName: <span class=\"type\">T</span>.nibName, bundle: bundle)</span><br><span class=\"line\">        </span><br><span class=\"line\">        registerNib(nib, forCellWithReuseIdentifier: <span class=\"type\">T</span>.defaultReuseIdentifier)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">dequeueReusableCell</span>&lt;T: UICollectionViewCell where T: ReusableView&gt;<span class=\"params\">(forIndexPath indexPath: NSIndexPath)</span></span> -&gt; <span class=\"type\">T</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> cell = dequeueReusableCellWithReuseIdentifier(<span class=\"type\">T</span>.defaultReuseIdentifier, forIndexPath: indexPath) <span class=\"keyword\">as</span>? <span class=\"type\">T</span> <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">fatalError</span>(<span class=\"string\">\"Could not dequeue cell with identifier: \\(T.defaultReuseIdentifier)\"</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> cell</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意这里，我们创建了两个版本的注册方法，一个是用来注册 <code>ReusableView</code> 子类用的，一个是用来注册 <code>ReusableView</code> 和 <code>NibLoadableView</code>的子类。这很好的将view controller的特定的注册方法分离出来。</p>\n<p>另一个比较棒的细节就是 <code>dequeueReusableCell</code> 方法不再需要给他任何重用标识字符串而且可以直接使用cell的子类作为返回值。</p>\n<p>现在cell的注册和使用代码看起来棒极了 :) 。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BookListViewController</span>: <span class=\"title\">UIViewController</span>, <span class=\"title\">UICollectionViewDataSource</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@IBOutlet</span> <span class=\"keyword\">private</span> <span class=\"keyword\">weak</span> <span class=\"keyword\">var</span> collectionView: <span class=\"type\">UICollectionView</span>!</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">viewDidLoad</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.viewDidLoad()</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">self</span>.collectionView.register(<span class=\"type\">BookCell</span>.<span class=\"keyword\">self</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">collectionView</span><span class=\"params\">(collectionView: UICollectionView, cellForItemAtIndexPath indexPath: NSIndexPath)</span></span> -&gt; <span class=\"type\">UICollectionViewCell</span> &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">let</span> cell: <span class=\"type\">BookCell</span> = collectionView.dequeueReusableCell(forIndexPath: indexPath)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// <span class=\"doctag\">TODO:</span> configure cell</span></span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">return</span> cell</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>如果你是从 Objective-C 转到 Swift 的话，研究Swift强大的新特性比如 <strong>协议拓展</strong>、 <strong>泛型</strong>， 从而找到更优雅的实现方式和替代方法是非常值得的。</p>\n"}],"PostAsset":[{"_id":"source/_posts/bezier-zhibei/56030-bb6b8c6a46f12135.gif","slug":"56030-bb6b8c6a46f12135.gif","post":"cl9nmc48800098wwxj9c1go4z","modified":1,"renderable":0},{"_id":"source/_posts/bezier-zhibei/56030-f3e69b487f4e37c8.gif","slug":"56030-f3e69b487f4e37c8.gif","post":"cl9nmc48800098wwxj9c1go4z","modified":1,"renderable":0},{"_id":"source/_posts/bezier-zhibei/56030-2d2fb8989e10f177.gif","slug":"56030-2d2fb8989e10f177.gif","post":"cl9nmc48800098wwxj9c1go4z","modified":1,"renderable":0},{"_id":"source/_posts/bezier-zhibei/56030-390b7b874ddd5d3d.gif","slug":"56030-390b7b874ddd5d3d.gif","post":"cl9nmc48800098wwxj9c1go4z","modified":1,"renderable":0},{"_id":"source/_posts/bezier-zhibei/56030-48977fcfcd8cd57e.png","post":"cl9nmc48800098wwxj9c1go4z","slug":"56030-48977fcfcd8cd57e.png","modified":1,"renderable":1},{"_id":"source/_posts/bezier-zhibei/56030-4ad6b01ea2c03caa.png","post":"cl9nmc48800098wwxj9c1go4z","slug":"56030-4ad6b01ea2c03caa.png","modified":1,"renderable":1},{"_id":"source/_posts/bezier-zhibei/56030-5175f6c03d4990b2.jpg","post":"cl9nmc48800098wwxj9c1go4z","slug":"56030-5175f6c03d4990b2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/bezier-zhibei/56030-5d3e252f34e657c9.jpg","post":"cl9nmc48800098wwxj9c1go4z","slug":"56030-5d3e252f34e657c9.jpg","modified":1,"renderable":1},{"_id":"source/_posts/bezier-zhibei/56030-61f16deba712d8ac.gif","slug":"56030-61f16deba712d8ac.gif","post":"cl9nmc48800098wwxj9c1go4z","modified":1,"renderable":0},{"_id":"source/_posts/bezier-zhibei/56030-6700ecb2811dcac4.jpg","post":"cl9nmc48800098wwxj9c1go4z","slug":"56030-6700ecb2811dcac4.jpg","modified":1,"renderable":1},{"_id":"source/_posts/bezier-zhibei/56030-86bc9a9afdb15e48.png","post":"cl9nmc48800098wwxj9c1go4z","slug":"56030-86bc9a9afdb15e48.png","modified":1,"renderable":1},{"_id":"source/_posts/bezier-zhibei/56030-88174468ef9870e3.png","post":"cl9nmc48800098wwxj9c1go4z","slug":"56030-88174468ef9870e3.png","modified":1,"renderable":1},{"_id":"source/_posts/bezier-zhibei/56030-8c56a1e98f432000.jpg","post":"cl9nmc48800098wwxj9c1go4z","slug":"56030-8c56a1e98f432000.jpg","modified":1,"renderable":1},{"_id":"source/_posts/bezier-zhibei/56030-8fb7008726c62987.gif","slug":"56030-8fb7008726c62987.gif","post":"cl9nmc48800098wwxj9c1go4z","modified":1,"renderable":0},{"_id":"source/_posts/bezier-zhibei/56030-9b189370ffbf5aec.gif","slug":"56030-9b189370ffbf5aec.gif","post":"cl9nmc48800098wwxj9c1go4z","modified":1,"renderable":0},{"_id":"source/_posts/bezier-zhibei/56030-9e2c8e268d676528.png","post":"cl9nmc48800098wwxj9c1go4z","slug":"56030-9e2c8e268d676528.png","modified":1,"renderable":1},{"_id":"source/_posts/bezier-zhibei/56030-b65e3dd8196f4da5.gif","post":"cl9nmc48800098wwxj9c1go4z","slug":"56030-b65e3dd8196f4da5.gif","modified":1,"renderable":1},{"_id":"source/_posts/bezier-zhibei/56030-c2894a2979862cd1.png","post":"cl9nmc48800098wwxj9c1go4z","slug":"56030-c2894a2979862cd1.png","modified":1,"renderable":1},{"_id":"source/_posts/bezier-zhibei/56030-c2aa8094cd0a6004.png","post":"cl9nmc48800098wwxj9c1go4z","slug":"56030-c2aa8094cd0a6004.png","modified":1,"renderable":1},{"_id":"source/_posts/bezier-zhibei/56030-de6fcb447ec49b87.png","post":"cl9nmc48800098wwxj9c1go4z","slug":"56030-de6fcb447ec49b87.png","modified":1,"renderable":1}],"PostCategory":[],"PostTag":[{"post_id":"cl9nmc47l00008wwxervnp72v","tag_id":"cl9nmc48100038wwxui38rqss","_id":"cl9nmc48a000c8wwxteeg8ofl"},{"post_id":"cl9nmc47l00008wwxervnp72v","tag_id":"cl9nmc48700078wwxeti3q5od","_id":"cl9nmc48c000e8wwxlykszprh"},{"post_id":"cl9nmc47y00028wwxztk1zuec","tag_id":"cl9nmc489000a8wwx0etkov3a","_id":"cl9nmc48f000h8wwxh7gxtln5"},{"post_id":"cl9nmc48300048wwxhow0ile1","tag_id":"cl9nmc489000a8wwx0etkov3a","_id":"cl9nmc48l000l8wwxr1efny77"},{"post_id":"cl9nmc48500058wwxhz7nrmf3","tag_id":"cl9nmc48j000j8wwx4ry2st29","_id":"cl9nmc48m000n8wwx9m8lkd3f"},{"post_id":"cl9nmc48700068wwxrddovz3b","tag_id":"cl9nmc48j000j8wwx4ry2st29","_id":"cl9nmc48n000p8wwxgufmf6cf"},{"post_id":"cl9nmc48800088wwxhxrjxqrt","tag_id":"cl9nmc48j000j8wwx4ry2st29","_id":"cl9nmc48n000s8wwxc0rpa5ao"},{"post_id":"cl9nmc48800088wwxhxrjxqrt","tag_id":"cl9nmc48n000q8wwxu4f5xs1f","_id":"cl9nmc48o000t8wwx7vol7mo8"},{"post_id":"cl9nmc48800098wwxj9c1go4z","tag_id":"cl9nmc48n000r8wwxcg497v1u","_id":"cl9nmc48o000x8wwx9h4gxzb3"},{"post_id":"cl9nmc48800098wwxj9c1go4z","tag_id":"cl9nmc48j000j8wwx4ry2st29","_id":"cl9nmc48p000y8wwxfjx6dp34"},{"post_id":"cl9nmc48800098wwxj9c1go4z","tag_id":"cl9nmc48o000v8wwx1ho7waw8","_id":"cl9nmc48p00108wwxx97qj8tg"},{"post_id":"cl9nmc489000b8wwxx884b3jz","tag_id":"cl9nmc48o000w8wwx3nwxikje","_id":"cl9nmc48p00128wwxck9qj7nq"},{"post_id":"cl9nmc489000b8wwxx884b3jz","tag_id":"cl9nmc48p000z8wwx95x2oz0e","_id":"cl9nmc48p00138wwx2ez4xbj2"},{"post_id":"cl9nmc48a000d8wwxwn6rzvkx","tag_id":"cl9nmc48p00118wwx4db9egg1","_id":"cl9nmc48q00188wwxk416rug4"},{"post_id":"cl9nmc48a000d8wwxwn6rzvkx","tag_id":"cl9nmc48p00148wwxeabsqq18","_id":"cl9nmc48q00198wwxnwvuuagt"},{"post_id":"cl9nmc48a000d8wwxwn6rzvkx","tag_id":"cl9nmc48q00158wwxkj552hzc","_id":"cl9nmc48r001b8wwx7oblos5z"},{"post_id":"cl9nmc48a000d8wwxwn6rzvkx","tag_id":"cl9nmc48q00168wwxygbwxb5j","_id":"cl9nmc48r001c8wwxtwd605c4"},{"post_id":"cl9nmc48e000g8wwxxjy5yf38","tag_id":"cl9nmc48q00178wwxn9s6xscc","_id":"cl9nmc48r001e8wwx4k3jzf1d"},{"post_id":"cl9nmc48g000i8wwxc5rhbbip","tag_id":"cl9nmc48q001a8wwx0o46vxef","_id":"cl9nmc48u001i8wwxocb5k5aa"},{"post_id":"cl9nmc48g000i8wwxc5rhbbip","tag_id":"cl9nmc48j000j8wwx4ry2st29","_id":"cl9nmc48u001j8wwxuv04cxc8"},{"post_id":"cl9nmc48g000i8wwxc5rhbbip","tag_id":"cl9nmc48s001f8wwxupa8x2ru","_id":"cl9nmc48u001k8wwxh7b71ydc"},{"post_id":"cl9nmc48g000i8wwxc5rhbbip","tag_id":"cl9nmc48t001g8wwx16yhte98","_id":"cl9nmc48u001l8wwxqlhbnxt5"},{"post_id":"cl9nmc48k000k8wwx8bp4xtcm","tag_id":"cl9nmc48j000j8wwx4ry2st29","_id":"cl9nmc48u001m8wwxzgluiytn"},{"post_id":"cl9nmc48k000k8wwx8bp4xtcm","tag_id":"cl9nmc48t001h8wwxysrq11xv","_id":"cl9nmc48u001n8wwxb7x8xciw"}],"Tag":[{"name":"高效","_id":"cl9nmc48100038wwxui38rqss"},{"name":"学习","_id":"cl9nmc48700078wwxeti3q5od"},{"name":"ARTS","_id":"cl9nmc489000a8wwx0etkov3a"},{"name":"iOS","_id":"cl9nmc48j000j8wwx4ry2st29"},{"name":"Orientation","_id":"cl9nmc48n000q8wwxu4f5xs1f"},{"name":"贝塞尔","_id":"cl9nmc48n000r8wwxcg497v1u"},{"name":"动画","_id":"cl9nmc48o000v8wwx1ho7waw8"},{"name":"心得","_id":"cl9nmc48o000w8wwx3nwxikje"},{"name":"软件工程","_id":"cl9nmc48p000z8wwx95x2oz0e"},{"name":"Python","_id":"cl9nmc48p00118wwx4db9egg1"},{"name":"Flask","_id":"cl9nmc48p00148wwxeabsqq18"},{"name":"OpenSSL","_id":"cl9nmc48q00158wwxkj552hzc"},{"name":"Linux","_id":"cl9nmc48q00168wwxygbwxb5j"},{"name":"sublime text","_id":"cl9nmc48q00178wwxn9s6xscc"},{"name":"Runtime","_id":"cl9nmc48q001a8wwx0o46vxef"},{"name":"Objective-C","_id":"cl9nmc48s001f8wwxupa8x2ru"},{"name":"Method Swizzling","_id":"cl9nmc48t001g8wwx16yhte98"},{"name":"Swift","_id":"cl9nmc48t001h8wwxysrq11xv"}]}}